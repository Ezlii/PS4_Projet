
PS4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdc4  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800bf04  0800bf04  0000cf04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c0d0  0800c0d0  0000d0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c0d8  0800c0d8  0000d0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c0dc  0800c0dc  0000d0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000b8  20000008  0800c0e0  0000e008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000720  200000c0  0800c198  0000e0c0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200007e0  0800c198  0000e7e0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000e0c0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fd1f  00000000  00000000  0000e0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004570  00000000  00000000  0003de0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026c8  00000000  00000000  00042380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001e13  00000000  00000000  00044a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00029356  00000000  00000000  0004685b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000283c2  00000000  00000000  0006fbb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0010887d  00000000  00000000  00097f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a07f0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000aed4  00000000  00000000  001a0834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005f  00000000  00000000  001ab708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000c0 	.word	0x200000c0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800beec 	.word	0x0800beec

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000c4 	.word	0x200000c4
 800017c:	0800beec 	.word	0x0800beec

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <application>:
VL53L1_DEV Dev = &dev;
VL53L1_DeviceInfo_t deviceInfo;
VL53L1_Error status;


void application(void){
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0
	  Display_Initialize();
 8000516:	f000 f871 	bl	80005fc <Display_Initialize>
	  SH1106_Clear();
 800051a:	f000 f907 	bl	800072c <SH1106_Clear>

	  dev.i2c_slave_address = 0x29;
 800051e:	4b30      	ldr	r3, [pc, #192]	@ (80005e0 <application+0xd0>)
 8000520:	2229      	movs	r2, #41	@ 0x29
 8000522:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398

	  VL53L1_Error status;
	  VL53L1_RangingMeasurementData_t RangingData;

	  status = VL53L1_GetDeviceInfo(Dev, &deviceInfo);
 8000526:	4b2f      	ldr	r3, [pc, #188]	@ (80005e4 <application+0xd4>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	492f      	ldr	r1, [pc, #188]	@ (80005e8 <application+0xd8>)
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fd73 	bl	8001018 <VL53L1_GetDeviceInfo>
 8000532:	4603      	mov	r3, r0
 8000534:	77fb      	strb	r3, [r7, #31]
	     } else {
	    	// no connection
	     }

	     // Sensor initialisieren
	     status = VL53L1_DataInit(Dev);
 8000536:	4b2b      	ldr	r3, [pc, #172]	@ (80005e4 <application+0xd4>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fdc4 	bl	80010c8 <VL53L1_DataInit>
 8000540:	4603      	mov	r3, r0
 8000542:	77fb      	strb	r3, [r7, #31]
	     if (status != VL53L1_ERROR_NONE) {
 8000544:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d002      	beq.n	8000552 <application+0x42>
	         printf("DataInit fehlgeschlagen\n");
 800054c:	4827      	ldr	r0, [pc, #156]	@ (80005ec <application+0xdc>)
 800054e:	f00a fe47 	bl	800b1e0 <puts>
	     }

	     status = VL53L1_StaticInit(Dev);   // Initialisiert die Register des Sensors
 8000552:	4b24      	ldr	r3, [pc, #144]	@ (80005e4 <application+0xd4>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fdef 	bl	800113a <VL53L1_StaticInit>
 800055c:	4603      	mov	r3, r0
 800055e:	77fb      	strb	r3, [r7, #31]
	     if (status != VL53L1_ERROR_NONE) {
 8000560:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d002      	beq.n	800056e <application+0x5e>
	         printf("StaticInit fehlgeschlagen\n");
 8000568:	4821      	ldr	r0, [pc, #132]	@ (80005f0 <application+0xe0>)
 800056a:	f00a fe39 	bl	800b1e0 <puts>
	     }

	     VL53L1_SetDistanceMode(Dev, 2);  // 1 = Short, 2 = Long
 800056e:	4b1d      	ldr	r3, [pc, #116]	@ (80005e4 <application+0xd4>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2102      	movs	r1, #2
 8000574:	4618      	mov	r0, r3
 8000576:	f000 ff1b 	bl	80013b0 <VL53L1_SetDistanceMode>
	     VL53L1_SetMeasurementTimingBudgetMicroSeconds(Dev, 50000); // z.B. 50 ms
 800057a:	4b1a      	ldr	r3, [pc, #104]	@ (80005e4 <application+0xd4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8000582:	4618      	mov	r0, r3
 8000584:	f000 ff8a 	bl	800149c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>


	     VL53L1_StartMeasurement(Dev);
 8000588:	4b16      	ldr	r3, [pc, #88]	@ (80005e4 <application+0xd4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	f001 fa4d 	bl	8001a2c <VL53L1_StartMeasurement>


	     uint8_t dataReady = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	77bb      	strb	r3, [r7, #30]
	     uint16_t distance_mm;

	     while (1)
		 {
			 // Hier gibt es KEIN CheckForDataReady – also direkt Daten abholen
			 status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 8000596:	4b13      	ldr	r3, [pc, #76]	@ (80005e4 <application+0xd4>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	463a      	mov	r2, r7
 800059c:	4611      	mov	r1, r2
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fc6e 	bl	8001e80 <VL53L1_GetRangingMeasurementData>
 80005a4:	4603      	mov	r3, r0
 80005a6:	77fb      	strb	r3, [r7, #31]

			 if (status == VL53L1_ERROR_NONE && RangingData.RangeStatus == 0) {
 80005a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d109      	bne.n	80005c4 <application+0xb4>
 80005b0:	7efb      	ldrb	r3, [r7, #27]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d106      	bne.n	80005c4 <application+0xb4>
				 printf("Distanz: %u mm\n", RangingData.RangeMilliMeter);
 80005b6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80005ba:	4619      	mov	r1, r3
 80005bc:	480d      	ldr	r0, [pc, #52]	@ (80005f4 <application+0xe4>)
 80005be:	f00a fda7 	bl	800b110 <iprintf>
 80005c2:	e004      	b.n	80005ce <application+0xbe>
			 } else {
				 printf("Ungültige Messung (Status: %u)\n", RangingData.RangeStatus);
 80005c4:	7efb      	ldrb	r3, [r7, #27]
 80005c6:	4619      	mov	r1, r3
 80005c8:	480b      	ldr	r0, [pc, #44]	@ (80005f8 <application+0xe8>)
 80005ca:	f00a fda1 	bl	800b110 <iprintf>
			 }

			 // Messung abschließen und neue starten
			 VL53L1_ClearInterruptAndStartMeasurement(Dev);
 80005ce:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <application+0xd4>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fa96 	bl	8001b04 <VL53L1_ClearInterruptAndStartMeasurement>

			 HAL_Delay(50);  // Warten bis nächste Messung fertig ist
 80005d8:	2032      	movs	r0, #50	@ 0x32
 80005da:	f006 f8fd 	bl	80067d8 <HAL_Delay>
			 status = VL53L1_GetRangingMeasurementData(Dev, &RangingData);
 80005de:	e7da      	b.n	8000596 <application+0x86>
 80005e0:	200000dc 	.word	0x200000dc
 80005e4:	20000008 	.word	0x20000008
 80005e8:	2000047c 	.word	0x2000047c
 80005ec:	0800bf04 	.word	0x0800bf04
 80005f0:	0800bf1c 	.word	0x0800bf1c
 80005f4:	0800bf38 	.word	0x0800bf38
 80005f8:	0800bf48 	.word	0x0800bf48

080005fc <Display_Initialize>:
uint8_t display_buffer[DISPLAY_WIDTH * DISPLAY_PAGES];



void Display_Initialize(void)                                                   //Inizialisierung des Displays
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Activate_Display_GPIO_Port, Activate_Display_Pin, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000606:	4828      	ldr	r0, [pc, #160]	@ (80006a8 <Display_Initialize+0xac>)
 8000608:	f006 fbe8 	bl	8006ddc <HAL_GPIO_WritePin>

	HAL_Delay(100);
 800060c:	2064      	movs	r0, #100	@ 0x64
 800060e:	f006 f8e3 	bl	80067d8 <HAL_Delay>
    send_command_display(0xAE); // Display off
 8000612:	20ae      	movs	r0, #174	@ 0xae
 8000614:	f000 f84a 	bl	80006ac <send_command_display>
    send_command_display(0xD5); send_command_display(0x80); // Set Display Clock
 8000618:	20d5      	movs	r0, #213	@ 0xd5
 800061a:	f000 f847 	bl	80006ac <send_command_display>
 800061e:	2080      	movs	r0, #128	@ 0x80
 8000620:	f000 f844 	bl	80006ac <send_command_display>
    send_command_display(0xA8); send_command_display(0x3F); // Set Multiplex Ratio (0x3F = 63)
 8000624:	20a8      	movs	r0, #168	@ 0xa8
 8000626:	f000 f841 	bl	80006ac <send_command_display>
 800062a:	203f      	movs	r0, #63	@ 0x3f
 800062c:	f000 f83e 	bl	80006ac <send_command_display>
    send_command_display(0xD3); send_command_display(0x00); // Display offset
 8000630:	20d3      	movs	r0, #211	@ 0xd3
 8000632:	f000 f83b 	bl	80006ac <send_command_display>
 8000636:	2000      	movs	r0, #0
 8000638:	f000 f838 	bl	80006ac <send_command_display>
    send_command_display(0x40); // Start line at 0
 800063c:	2040      	movs	r0, #64	@ 0x40
 800063e:	f000 f835 	bl	80006ac <send_command_display>
    send_command_display(0xAD); send_command_display(0x8B); // DC-DC Control ON
 8000642:	20ad      	movs	r0, #173	@ 0xad
 8000644:	f000 f832 	bl	80006ac <send_command_display>
 8000648:	208b      	movs	r0, #139	@ 0x8b
 800064a:	f000 f82f 	bl	80006ac <send_command_display>
    send_command_display(0xA1); // Segment remap
 800064e:	20a1      	movs	r0, #161	@ 0xa1
 8000650:	f000 f82c 	bl	80006ac <send_command_display>
    send_command_display(0xC8); // COM scan direction
 8000654:	20c8      	movs	r0, #200	@ 0xc8
 8000656:	f000 f829 	bl	80006ac <send_command_display>
    send_command_display(0xDA); send_command_display(0x12); // COM pins hardware config
 800065a:	20da      	movs	r0, #218	@ 0xda
 800065c:	f000 f826 	bl	80006ac <send_command_display>
 8000660:	2012      	movs	r0, #18
 8000662:	f000 f823 	bl	80006ac <send_command_display>
    send_command_display(0x81); send_command_display(0x7F); // Contrast
 8000666:	2081      	movs	r0, #129	@ 0x81
 8000668:	f000 f820 	bl	80006ac <send_command_display>
 800066c:	207f      	movs	r0, #127	@ 0x7f
 800066e:	f000 f81d 	bl	80006ac <send_command_display>
    send_command_display(0xD9); send_command_display(0xF1); // Pre-charge
 8000672:	20d9      	movs	r0, #217	@ 0xd9
 8000674:	f000 f81a 	bl	80006ac <send_command_display>
 8000678:	20f1      	movs	r0, #241	@ 0xf1
 800067a:	f000 f817 	bl	80006ac <send_command_display>
    send_command_display(0xDB); send_command_display(0x40); // VCOMH
 800067e:	20db      	movs	r0, #219	@ 0xdb
 8000680:	f000 f814 	bl	80006ac <send_command_display>
 8000684:	2040      	movs	r0, #64	@ 0x40
 8000686:	f000 f811 	bl	80006ac <send_command_display>
    send_command_display(0xA4); // Entire display ON (resume to RAM)
 800068a:	20a4      	movs	r0, #164	@ 0xa4
 800068c:	f000 f80e 	bl	80006ac <send_command_display>
    send_command_display(0xA6); // Normal display (not inverse)
 8000690:	20a6      	movs	r0, #166	@ 0xa6
 8000692:	f000 f80b 	bl	80006ac <send_command_display>
    send_command_display(0xAF); // Display ON
 8000696:	20af      	movs	r0, #175	@ 0xaf
 8000698:	f000 f808 	bl	80006ac <send_command_display>

    HAL_Delay(120);
 800069c:	2078      	movs	r0, #120	@ 0x78
 800069e:	f006 f89b 	bl	80067d8 <HAL_Delay>

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	48000400 	.word	0x48000400

080006ac <send_command_display>:

void send_command_display (uint8_t command)                                     //Command an das Display schreiben
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Data_Command_GPIO_Port, Data_Command_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006bc:	480c      	ldr	r0, [pc, #48]	@ (80006f0 <send_command_display+0x44>)
 80006be:	f006 fb8d 	bl	8006ddc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80006c2:	200a      	movs	r0, #10
 80006c4:	f006 f888 	bl	80067d8 <HAL_Delay>
    HAL_SPI_Transmit(&hspi1,& command, 1, 10);
 80006c8:	1df9      	adds	r1, r7, #7
 80006ca:	230a      	movs	r3, #10
 80006cc:	2201      	movs	r2, #1
 80006ce:	4809      	ldr	r0, [pc, #36]	@ (80006f4 <send_command_display+0x48>)
 80006d0:	f009 f851 	bl	8009776 <HAL_SPI_Transmit>
    HAL_Delay(10);
 80006d4:	200a      	movs	r0, #10
 80006d6:	f006 f87f 	bl	80067d8 <HAL_Delay>
    HAL_GPIO_WritePin(Data_Command_GPIO_Port, Data_Command_Pin, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006e0:	4803      	ldr	r0, [pc, #12]	@ (80006f0 <send_command_display+0x44>)
 80006e2:	f006 fb7b 	bl	8006ddc <HAL_GPIO_WritePin>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	48000400 	.word	0x48000400
 80006f4:	20000544 	.word	0x20000544

080006f8 <send_data_display>:


void send_data_display(uint8_t* data, uint16_t size)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(Data_Command_GPIO_Port, Data_Command_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800070a:	4806      	ldr	r0, [pc, #24]	@ (8000724 <send_data_display+0x2c>)
 800070c:	f006 fb66 	bl	8006ddc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, size, 10);
 8000710:	887a      	ldrh	r2, [r7, #2]
 8000712:	230a      	movs	r3, #10
 8000714:	6879      	ldr	r1, [r7, #4]
 8000716:	4804      	ldr	r0, [pc, #16]	@ (8000728 <send_data_display+0x30>)
 8000718:	f009 f82d 	bl	8009776 <HAL_SPI_Transmit>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	48000400 	.word	0x48000400
 8000728:	20000544 	.word	0x20000544

0800072c <SH1106_Clear>:
{
    send_command_display(0b00000001);
}


void SH1106_Clear(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b0a2      	sub	sp, #136	@ 0x88
 8000730:	af00      	add	r7, sp, #0
    uint8_t buffer[128];
    memset(buffer, 0x00, sizeof(buffer));
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2280      	movs	r2, #128	@ 0x80
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f00a fe31 	bl	800b3a0 <memset>

    for (uint8_t page = 0; page < 8; page++) {
 800073e:	2300      	movs	r3, #0
 8000740:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000744:	e016      	b.n	8000774 <SH1106_Clear+0x48>
    	send_command_display(0xB0 + page); // Set page
 8000746:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800074a:	3b50      	subs	r3, #80	@ 0x50
 800074c:	b2db      	uxtb	r3, r3
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ffac 	bl	80006ac <send_command_display>
    	send_command_display(0x02);        // Set lower column
 8000754:	2002      	movs	r0, #2
 8000756:	f7ff ffa9 	bl	80006ac <send_command_display>
    	send_command_display(0x10);        // Set higher column
 800075a:	2010      	movs	r0, #16
 800075c:	f7ff ffa6 	bl	80006ac <send_command_display>
    	send_data_display(buffer, sizeof(buffer));
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2180      	movs	r1, #128	@ 0x80
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ffc7 	bl	80006f8 <send_data_display>
    for (uint8_t page = 0; page < 8; page++) {
 800076a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800076e:	3301      	adds	r3, #1
 8000770:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000774:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000778:	2b07      	cmp	r3, #7
 800077a:	d9e4      	bls.n	8000746 <SH1106_Clear+0x1a>
    }
}
 800077c:	bf00      	nop
 800077e:	bf00      	nop
 8000780:	3788      	adds	r7, #136	@ 0x88
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000786:	b480      	push	{r7}
 8000788:	b085      	sub	sp, #20
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800078e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000792:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000794:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4313      	orrs	r3, r2
 800079c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800079e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4013      	ands	r3, r2
 80007a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007aa:	68fb      	ldr	r3, [r7, #12]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007bc:	f005 ff86 	bl	80066cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c0:	f000 f83e 	bl	8000840 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007c4:	f000 f894 	bl	80008f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c8:	f000 f982 	bl	8000ad0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007cc:	f000 f8ee 	bl	80009ac <MX_SPI1_Init>
  MX_TIM2_Init();
 80007d0:	f000 f92a 	bl	8000a28 <MX_TIM2_Init>
  MX_I2C3_Init();
 80007d4:	f000 f8aa 	bl	800092c <MX_I2C3_Init>


  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80007d8:	2000      	movs	r0, #0
 80007da:	f005 fe1f 	bl	800641c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80007de:	2001      	movs	r0, #1
 80007e0:	f005 fe1c 	bl	800641c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80007e4:	2002      	movs	r0, #2
 80007e6:	f005 fe19 	bl	800641c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80007ea:	2101      	movs	r1, #1
 80007ec:	2000      	movs	r0, #0
 80007ee:	f005 fe4f 	bl	8006490 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80007f2:	2101      	movs	r1, #1
 80007f4:	2001      	movs	r0, #1
 80007f6:	f005 fe4b 	bl	8006490 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80007fa:	2101      	movs	r1, #1
 80007fc:	2002      	movs	r0, #2
 80007fe:	f005 fe47 	bl	8006490 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <main+0x84>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000808:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800080a:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <main+0x84>)
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000810:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <main+0x84>)
 8000812:	2200      	movs	r2, #0
 8000814:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <main+0x84>)
 8000818:	2200      	movs	r2, #0
 800081a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800081c:	4b07      	ldr	r3, [pc, #28]	@ (800083c <main+0x84>)
 800081e:	2200      	movs	r2, #0
 8000820:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000822:	4906      	ldr	r1, [pc, #24]	@ (800083c <main+0x84>)
 8000824:	2000      	movs	r0, #0
 8000826:	f005 fea3 	bl	8006570 <BSP_COM_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <main+0x7c>
  {
    Error_Handler();
 8000830:	f000 f99a 	bl	8000b68 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  application();
 8000834:	f7ff fe6c 	bl	8000510 <application>
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <main+0x80>
 800083c:	200004e0 	.word	0x200004e0

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b09a      	sub	sp, #104	@ 0x68
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0320 	add.w	r3, r7, #32
 800084a:	2248      	movs	r2, #72	@ 0x48
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f00a fda6 	bl	800b3a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
 8000862:	615a      	str	r2, [r3, #20]
 8000864:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000866:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <SystemClock_Config+0xac>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800086e:	4a1f      	ldr	r2, [pc, #124]	@ (80008ec <SystemClock_Config+0xac>)
 8000870:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000874:	6013      	str	r3, [r2, #0]
 8000876:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <SystemClock_Config+0xac>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000882:	2322      	movs	r3, #34	@ 0x22
 8000884:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000886:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800088a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800088c:	2301      	movs	r3, #1
 800088e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000890:	2340      	movs	r3, #64	@ 0x40
 8000892:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000894:	2300      	movs	r3, #0
 8000896:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000898:	23a0      	movs	r3, #160	@ 0xa0
 800089a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800089c:	2300      	movs	r3, #0
 800089e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	4618      	mov	r0, r3
 80008a6:	f007 fc8b 	bl	80081c0 <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80008b0:	f000 f95a 	bl	8000b68 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80008b4:	236f      	movs	r3, #111	@ 0x6f
 80008b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2101      	movs	r1, #1
 80008d4:	4618      	mov	r0, r3
 80008d6:	f007 ffe7 	bl	80088a8 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80008e0:	f000 f942 	bl	8000b68 <Error_Handler>
  }
}
 80008e4:	bf00      	nop
 80008e6:	3768      	adds	r7, #104	@ 0x68
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	58000400 	.word	0x58000400

080008f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b094      	sub	sp, #80	@ 0x50
 80008f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f6:	463b      	mov	r3, r7
 80008f8:	2250      	movs	r2, #80	@ 0x50
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f00a fd4f 	bl	800b3a0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000902:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000906:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000908:	2300      	movs	r3, #0
 800090a:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800090c:	2300      	movs	r3, #0
 800090e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4618      	mov	r0, r3
 8000914:	f008 fc05 	bl	8009122 <HAL_RCCEx_PeriphCLKConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800091e:	f000 f923 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000922:	bf00      	nop
 8000924:	3750      	adds	r7, #80	@ 0x50
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_I2C3_Init+0x74>)
 8000932:	4a1c      	ldr	r2, [pc, #112]	@ (80009a4 <MX_I2C3_Init+0x78>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B07CB4;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <MX_I2C3_Init+0x74>)
 8000938:	4a1b      	ldr	r2, [pc, #108]	@ (80009a8 <MX_I2C3_Init+0x7c>)
 800093a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_I2C3_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <MX_I2C3_Init+0x74>)
 8000944:	2201      	movs	r2, #1
 8000946:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <MX_I2C3_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800094e:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <MX_I2C3_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <MX_I2C3_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_I2C3_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_I2C3_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000966:	480e      	ldr	r0, [pc, #56]	@ (80009a0 <MX_I2C3_Init+0x74>)
 8000968:	f006 fa73 	bl	8006e52 <HAL_I2C_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000972:	f000 f8f9 	bl	8000b68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000976:	2100      	movs	r1, #0
 8000978:	4809      	ldr	r0, [pc, #36]	@ (80009a0 <MX_I2C3_Init+0x74>)
 800097a:	f006 fff5 	bl	8007968 <HAL_I2CEx_ConfigAnalogFilter>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000984:	f000 f8f0 	bl	8000b68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000988:	2100      	movs	r1, #0
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_I2C3_Init+0x74>)
 800098c:	f007 f837 	bl	80079fe <HAL_I2CEx_ConfigDigitalFilter>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000996:	f000 f8e7 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200004f0 	.word	0x200004f0
 80009a4:	40005c00 	.word	0x40005c00
 80009a8:	00b07cb4 	.word	0x00b07cb4

080009ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a24 <MX_SPI1_Init+0x78>)
 80009b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009be:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c4:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009c6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80009ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009cc:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009d2:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80009d8:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009da:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009e2:	2208      	movs	r2, #8
 80009e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_SPI1_Init+0x74>)
 80009fa:	2207      	movs	r2, #7
 80009fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <MX_SPI1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_SPI1_Init+0x74>)
 8000a06:	2208      	movs	r2, #8
 8000a08:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_SPI1_Init+0x74>)
 8000a0c:	f008 fe10 	bl	8009630 <HAL_SPI_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a16:	f000 f8a7 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000544 	.word	0x20000544
 8000a24:	40013000 	.word	0x40013000

08000a28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	@ 0x30
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	2224      	movs	r2, #36	@ 0x24
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f00a fcb2 	bl	800b3a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a46:	4b21      	ldr	r3, [pc, #132]	@ (8000acc <MX_TIM2_Init+0xa4>)
 8000a48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000acc <MX_TIM2_Init+0xa4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	@ (8000acc <MX_TIM2_Init+0xa4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000acc <MX_TIM2_Init+0xa4>)
 8000a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a62:	4b1a      	ldr	r3, [pc, #104]	@ (8000acc <MX_TIM2_Init+0xa4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a68:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <MX_TIM2_Init+0xa4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a76:	2301      	movs	r3, #1
 8000a78:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a86:	2301      	movs	r3, #1
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4619      	mov	r1, r3
 8000a98:	480c      	ldr	r0, [pc, #48]	@ (8000acc <MX_TIM2_Init+0xa4>)
 8000a9a:	f009 fa59 	bl	8009f50 <HAL_TIM_Encoder_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000aa4:	f000 f860 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	@ (8000acc <MX_TIM2_Init+0xa4>)
 8000ab6:	f009 fc9b 	bl	800a3f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000ac0:	f000 f852 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	3730      	adds	r7, #48	@ 0x30
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200005a8 	.word	0x200005a8

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae4:	2004      	movs	r0, #4
 8000ae6:	f7ff fe4e 	bl	8000786 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2002      	movs	r0, #2
 8000aec:	f7ff fe4b 	bl	8000786 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	2001      	movs	r0, #1
 8000af2:	f7ff fe48 	bl	8000786 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Activate_Display_Pin|Data_Command_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000afc:	4818      	ldr	r0, [pc, #96]	@ (8000b60 <MX_GPIO_Init+0x90>)
 8000afe:	f006 f96d 	bl	8006ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Activate_Display_Pin Data_Command_Pin */
  GPIO_InitStruct.Pin = Activate_Display_Pin|Data_Command_Pin;
 8000b02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	4811      	ldr	r0, [pc, #68]	@ (8000b60 <MX_GPIO_Init+0x90>)
 8000b1a:	f005 ffef 	bl	8006afc <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Rotary_Encoder_Pin */
  GPIO_InitStruct.Pin = SW_Rotary_Encoder_Pin;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW_Rotary_Encoder_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480d      	ldr	r0, [pc, #52]	@ (8000b64 <MX_GPIO_Init+0x94>)
 8000b30:	f005 ffe4 	bl	8006afc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8000b34:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000b38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000b46:	230a      	movs	r3, #10
 8000b48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b52:	f005 ffd3 	bl	8006afc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b56:	bf00      	nop
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	48000400 	.word	0x48000400
 8000b64:	48000800 	.word	0x48000800

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <Error_Handler+0x8>

08000b74 <LL_AHB2_GRP1_EnableClock>:
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4013      	ands	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b98:	68fb      	ldr	r3, [r7, #12]
}
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b085      	sub	sp, #20
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000bae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bb2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000bb4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bc2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000be4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000be6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bf4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
}
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b09c      	sub	sp, #112	@ 0x70
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	2250      	movs	r2, #80	@ 0x50
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f00a fbb1 	bl	800b3a0 <memset>
  if(hi2c->Instance==I2C3)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a16      	ldr	r2, [pc, #88]	@ (8000c9c <HAL_I2C_MspInit+0x84>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d125      	bne.n	8000c94 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000c48:	2308      	movs	r3, #8
 8000c4a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c4c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8000c50:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	4618      	mov	r0, r3
 8000c58:	f008 fa63 	bl	8009122 <HAL_RCCEx_PeriphCLKConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c62:	f7ff ff81 	bl	8000b68 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	2004      	movs	r0, #4
 8000c68:	f7ff ff84 	bl	8000b74 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c70:	2312      	movs	r3, #18
 8000c72:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c80:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c84:	4619      	mov	r1, r3
 8000c86:	4806      	ldr	r0, [pc, #24]	@ (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c88:	f005 ff38 	bl	8006afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c8c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8000c90:	f7ff ff89 	bl	8000ba6 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000c94:	bf00      	nop
 8000c96:	3770      	adds	r7, #112	@ 0x70
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40005c00 	.word	0x40005c00
 8000ca0:	48000800 	.word	0x48000800

08000ca4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a13      	ldr	r2, [pc, #76]	@ (8000d10 <HAL_SPI_MspInit+0x6c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d11f      	bne.n	8000d06 <HAL_SPI_MspInit+0x62>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cc6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000cca:	f7ff ff85 	bl	8000bd8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f7ff ff50 	bl	8000b74 <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cd4:	23f0      	movs	r3, #240	@ 0xf0
 8000cd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ce4:	2305      	movs	r3, #5
 8000ce6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	4619      	mov	r1, r3
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf2:	f005 ff03 	bl	8006afc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2022      	movs	r0, #34	@ 0x22
 8000cfc:	f005 fe6b 	bl	80069d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d00:	2022      	movs	r0, #34	@ 0x22
 8000d02:	f005 fe82 	bl	8006a0a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d06:	bf00      	nop
 8000d08:	3720      	adds	r7, #32
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40013000 	.word	0x40013000

08000d14 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d34:	d11e      	bne.n	8000d74 <HAL_TIM_Encoder_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d36:	2001      	movs	r0, #1
 8000d38:	f7ff ff35 	bl	8000ba6 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f7ff ff19 	bl	8000b74 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d42:	2303      	movs	r3, #3
 8000d44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d52:	2301      	movs	r3, #1
 8000d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d60:	f005 fecc 	bl	8006afc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	201c      	movs	r0, #28
 8000d6a:	f005 fe34 	bl	80069d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d6e:	201c      	movs	r0, #28
 8000d70:	f005 fe4b 	bl	8006a0a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <NMI_Handler+0x4>

08000d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <MemManage_Handler+0x4>

08000d94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd2:	f005 fcd5 	bl	8006780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f006 f814 	bl	8006e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8000dec:	2002      	movs	r0, #2
 8000dee:	f006 f80d 	bl	8006e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8000dfa:	2010      	movs	r0, #16
 8000dfc:	f006 f806 	bl	8006e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e08:	4802      	ldr	r0, [pc, #8]	@ (8000e14 <TIM2_IRQHandler+0x10>)
 8000e0a:	f009 f947 	bl	800a09c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200005a8 	.word	0x200005a8

08000e18 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e1c:	4802      	ldr	r0, [pc, #8]	@ (8000e28 <SPI1_IRQHandler+0x10>)
 8000e1e:	f008 fe1f 	bl	8009a60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000544 	.word	0x20000544

08000e2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	e00a      	b.n	8000e54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e3e:	f3af 8000 	nop.w
 8000e42:	4601      	mov	r1, r0
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	60ba      	str	r2, [r7, #8]
 8000e4a:	b2ca      	uxtb	r2, r1
 8000e4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	3301      	adds	r3, #1
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	dbf0      	blt.n	8000e3e <_read+0x12>
  }

  return len;
 8000e5c:	687b      	ldr	r3, [r7, #4]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	e009      	b.n	8000e8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	60ba      	str	r2, [r7, #8]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f005 fbd7 	bl	8006634 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	dbf1      	blt.n	8000e78 <_write+0x12>
  }
  return len;
 8000e94:	687b      	ldr	r3, [r7, #4]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <_close>:

int _close(int file)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ec6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <_isatty>:

int _isatty(int file)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f10:	4a14      	ldr	r2, [pc, #80]	@ (8000f64 <_sbrk+0x5c>)
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <_sbrk+0x60>)
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f1c:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <_sbrk+0x64>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	@ (8000f70 <_sbrk+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d207      	bcs.n	8000f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f38:	f00a fa94 	bl	800b464 <__errno>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	220c      	movs	r2, #12
 8000f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	e009      	b.n	8000f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <_sbrk+0x64>)
 8000f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20030000 	.word	0x20030000
 8000f68:	00000400 	.word	0x00000400
 8000f6c:	200005f4 	.word	0x200005f4
 8000f70:	200007e0 	.word	0x200007e0

08000f74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000f78:	4b24      	ldr	r3, [pc, #144]	@ (800100c <SystemInit+0x98>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f7e:	4a23      	ldr	r2, [pc, #140]	@ (800100c <SystemInit+0x98>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000f98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f9c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000fa0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000fa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <SystemInit+0x9c>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000fb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fbe:	f023 0305 	bic.w	r3, r3, #5
 8000fc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000fc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000fce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fd2:	f023 0301 	bic.w	r3, r3, #1
 8000fd6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fde:	4a0d      	ldr	r2, [pc, #52]	@ (8001014 <SystemInit+0xa0>)
 8000fe0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	@ (8001014 <SystemInit+0xa0>)
 8000fe8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ff4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ff8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00
 8001010:	faf6fefb 	.word	0xfaf6fefb
 8001014:	22041000 	.word	0x22041000

08001018 <VL53L1_GetDeviceInfo>:

}

VL53L1_Error VL53L1_GetDeviceInfo(VL53L1_DEV Dev,
	VL53L1_DeviceInfo_t *pVL53L1_DeviceInfo)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001022:	2300      	movs	r3, #0
 8001024:	75fb      	strb	r3, [r7, #23]
	uint8_t revision_id;
	VL53L1_LLDriverData_t   *pLLData;

	LOG_FUNCTION_START("");

	pLLData =  VL53L1DevStructGetLLDriverHandle(Dev);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	613b      	str	r3, [r7, #16]

	strncpy(pVL53L1_DeviceInfo->ProductId, "",
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	3340      	adds	r3, #64	@ 0x40
 800102e:	221f      	movs	r2, #31
 8001030:	4921      	ldr	r1, [pc, #132]	@ (80010b8 <VL53L1_GetDeviceInfo+0xa0>)
 8001032:	4618      	mov	r0, r3
 8001034:	f00a f9bc 	bl	800b3b0 <strncpy>
			VL53L1_DEVINFO_STRLEN-1);
	pVL53L1_DeviceInfo->ProductType =
			pLLData->nvm_copy_data.identification__module_type;
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	f893 21fb 	ldrb.w	r2, [r3, #507]	@ 0x1fb
	pVL53L1_DeviceInfo->ProductType =
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

	revision_id = pLLData->nvm_copy_data.identification__revision_id;
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 800104a:	73fb      	strb	r3, [r7, #15]
	pVL53L1_DeviceInfo->ProductRevisionMajor = 1;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
	pVL53L1_DeviceInfo->ProductRevisionMinor = (revision_id & 0xF0) >> 4;
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	091b      	lsrs	r3, r3, #4
 8001058:	b2da      	uxtb	r2, r3
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62

#ifndef VL53L1_USE_EMPTY_STRING
	if (pVL53L1_DeviceInfo->ProductRevisionMinor == 0)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001066:	2b00      	cmp	r3, #0
 8001068:	d106      	bne.n	8001078 <VL53L1_GetDeviceInfo+0x60>
		strncpy(pVL53L1_DeviceInfo->Name,
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	221f      	movs	r2, #31
 800106e:	4913      	ldr	r1, [pc, #76]	@ (80010bc <VL53L1_GetDeviceInfo+0xa4>)
 8001070:	4618      	mov	r0, r3
 8001072:	f00a f99d 	bl	800b3b0 <strncpy>
 8001076:	e005      	b.n	8001084 <VL53L1_GetDeviceInfo+0x6c>
				VL53L1_STRING_DEVICE_INFO_NAME0,
				VL53L1_DEVINFO_STRLEN-1);
	else
		strncpy(pVL53L1_DeviceInfo->Name,
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	221f      	movs	r2, #31
 800107c:	4910      	ldr	r1, [pc, #64]	@ (80010c0 <VL53L1_GetDeviceInfo+0xa8>)
 800107e:	4618      	mov	r0, r3
 8001080:	f00a f996 	bl	800b3b0 <strncpy>
				VL53L1_STRING_DEVICE_INFO_NAME1,
				VL53L1_DEVINFO_STRLEN-1);
	strncpy(pVL53L1_DeviceInfo->Type,
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	3320      	adds	r3, #32
 8001088:	221f      	movs	r2, #31
 800108a:	490e      	ldr	r1, [pc, #56]	@ (80010c4 <VL53L1_GetDeviceInfo+0xac>)
 800108c:	4618      	mov	r0, r3
 800108e:	f00a f98f 	bl	800b3b0 <strncpy>
			VL53L1_STRING_DEVICE_INFO_TYPE,
			VL53L1_DEVINFO_STRLEN-1);
	/* Is module_type (ProductType) "evo" aka VL53L3 instead of VL53L1 ? */
	if (pVL53L1_DeviceInfo->ProductType == 0xAA) {
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001098:	2baa      	cmp	r3, #170	@ 0xaa
 800109a:	d106      	bne.n	80010aa <VL53L1_GetDeviceInfo+0x92>
		pVL53L1_DeviceInfo->Name[5] = '3';
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	2233      	movs	r2, #51	@ 0x33
 80010a0:	715a      	strb	r2, [r3, #5]
		pVL53L1_DeviceInfo->Type[5] = '3';
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	2233      	movs	r2, #51	@ 0x33
 80010a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pVL53L1_DeviceInfo->Name[0] = 0;
	pVL53L1_DeviceInfo->Type[0] = 0;
#endif

	LOG_FUNCTION_END(Status);
	return Status;
 80010aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	0800bf6c 	.word	0x0800bf6c
 80010bc:	0800bf70 	.word	0x0800bf70
 80010c0:	0800bf80 	.word	0x0800bf80
 80010c4:	0800bf90 	.word	0x0800bf90

080010c8 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 80010d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d105      	bne.n	80010e8 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 80010dc:	2101      	movs	r1, #1
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f001 f832 	bl	8002148 <VL53L1_data_init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 80010e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d103      	bne.n	80010f8 <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80010f8:	2300      	movs	r3, #0
 80010fa:	73bb      	strb	r3, [r7, #14]
 80010fc:	e012      	b.n	8001124 <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d112      	bne.n	800112c <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8001106:	7bbb      	ldrb	r3, [r7, #14]
 8001108:	b29b      	uxth	r3, r3
 800110a:	2201      	movs	r2, #1
 800110c:	4619      	mov	r1, r3
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 fbbb 	bl	800188a <VL53L1_SetLimitCheckEnable>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	4313      	orrs	r3, r2
 800111c:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800111e:	7bbb      	ldrb	r3, [r7, #14]
 8001120:	3301      	adds	r3, #1
 8001122:	73bb      	strb	r3, [r7, #14]
 8001124:	7bbb      	ldrb	r3, [r7, #14]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d9e9      	bls.n	80010fe <VL53L1_DataInit+0x36>
 800112a:	e000      	b.n	800112e <VL53L1_DataInit+0x66>
		else
			break;
 800112c:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001142:	2300      	movs	r3, #0
 8001144:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2203      	movs	r2, #3
 800114a:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800114e:	2320      	movs	r3, #32
 8001150:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7bba      	ldrb	r2, [r7, #14]
 8001156:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8001158:	2108      	movs	r1, #8
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f8e3 	bl	8001326 <VL53L1_SetPresetMode>
 8001160:	4603      	mov	r3, r0
 8001162:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2208      	movs	r2, #8
 8001168:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 800116c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8001178:	b480      	push	{r7}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	603a      	str	r2, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	460b      	mov	r3, r1
 8001186:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001188:	2300      	movs	r3, #0
 800118a:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 800118c:	4a2b      	ldr	r2, [pc, #172]	@ (800123c <ComputeDevicePresetMode+0xc4>)
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	4611      	mov	r1, r2
 8001196:	8019      	strh	r1, [r3, #0]
 8001198:	3302      	adds	r3, #2
 800119a:	0c12      	lsrs	r2, r2, #16
 800119c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 800119e:	4a28      	ldr	r2, [pc, #160]	@ (8001240 <ComputeDevicePresetMode+0xc8>)
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	4611      	mov	r1, r2
 80011a8:	8019      	strh	r1, [r3, #0]
 80011aa:	3302      	adds	r3, #2
 80011ac:	0c12      	lsrs	r2, r2, #16
 80011ae:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80011b0:	4a24      	ldr	r2, [pc, #144]	@ (8001244 <ComputeDevicePresetMode+0xcc>)
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	4611      	mov	r1, r2
 80011ba:	8019      	strh	r1, [r3, #0]
 80011bc:	3302      	adds	r3, #2
 80011be:	0c12      	lsrs	r2, r2, #16
 80011c0:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	2201      	movs	r2, #1
 80011c6:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d002      	beq.n	80011d4 <ComputeDevicePresetMode+0x5c>
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d003      	beq.n	80011da <ComputeDevicePresetMode+0x62>
 80011d2:	e005      	b.n	80011e0 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	75bb      	strb	r3, [r7, #22]
		break;
 80011d8:	e004      	b.n	80011e4 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 80011da:	2301      	movs	r3, #1
 80011dc:	75bb      	strb	r3, [r7, #22]
		break;
 80011de:	e001      	b.n	80011e4 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d015      	beq.n	8001216 <ComputeDevicePresetMode+0x9e>
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	dc1b      	bgt.n	8001226 <ComputeDevicePresetMode+0xae>
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d009      	beq.n	8001206 <ComputeDevicePresetMode+0x8e>
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	d117      	bne.n	8001226 <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 80011f6:	7dbb      	ldrb	r3, [r7, #22]
 80011f8:	3318      	adds	r3, #24
 80011fa:	443b      	add	r3, r7
 80011fc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	701a      	strb	r2, [r3, #0]
		break;
 8001204:	e011      	b.n	800122a <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8001206:	7dbb      	ldrb	r3, [r7, #22]
 8001208:	3318      	adds	r3, #24
 800120a:	443b      	add	r3, r7
 800120c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	701a      	strb	r2, [r3, #0]
		break;
 8001214:	e009      	b.n	800122a <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8001216:	7dbb      	ldrb	r3, [r7, #22]
 8001218:	3318      	adds	r3, #24
 800121a:	443b      	add	r3, r7
 800121c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	701a      	strb	r2, [r3, #0]
		break;
 8001224:	e001      	b.n	800122a <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8001226:	23f8      	movs	r3, #248	@ 0xf8
 8001228:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 800122a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800122e:	4618      	mov	r0, r3
 8001230:	371c      	adds	r7, #28
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	0800bf98 	.word	0x0800bf98
 8001240:	0800bf9c 	.word	0x0800bf9c
 8001244:	0800bfa0 	.word	0x0800bfa0

08001248 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b08e      	sub	sp, #56	@ 0x38
 800124c:	af04      	add	r7, sp, #16
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	460b      	mov	r3, r1
 8001254:	72fb      	strb	r3, [r7, #11]
 8001256:	4613      	mov	r3, r2
 8001258:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800125a:	2300      	movs	r3, #0
 800125c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8001270:	7afb      	ldrb	r3, [r7, #11]
 8001272:	2b03      	cmp	r3, #3
 8001274:	d002      	beq.n	800127c <SetPresetMode+0x34>
 8001276:	7afb      	ldrb	r3, [r7, #11]
 8001278:	2b08      	cmp	r3, #8
 800127a:	d103      	bne.n	8001284 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800127c:	2340      	movs	r3, #64	@ 0x40
 800127e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001282:	e002      	b.n	800128a <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001284:	2320      	movs	r3, #32
 8001286:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800128a:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 800128e:	7ab9      	ldrb	r1, [r7, #10]
 8001290:	7afb      	ldrb	r3, [r7, #11]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff70 	bl	8001178 <ComputeDevicePresetMode>
 8001298:	4603      	mov	r3, r0
 800129a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800129e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d112      	bne.n	80012cc <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 80012a6:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 80012aa:	f107 001c 	add.w	r0, r7, #28
 80012ae:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	f107 0318 	add.w	r3, r7, #24
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	4603      	mov	r3, r0
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f001 f9ff 	bl	80026c4 <VL53L1_get_preset_mode_timing_cfg>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 80012cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d112      	bne.n	80012fa <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 80012d4:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 80012d8:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 80012da:	69fd      	ldr	r5, [r7, #28]
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	9102      	str	r1, [sp, #8]
 80012e4:	9201      	str	r2, [sp, #4]
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	462b      	mov	r3, r5
 80012ea:	4622      	mov	r2, r4
 80012ec:	4601      	mov	r1, r0
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f001 fa92 	bl	8002818 <VL53L1_set_preset_mode>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80012fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d103      	bne.n	800130a <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001308:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 800130a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800130e:	2b00      	cmp	r3, #0
 8001310:	d103      	bne.n	800131a <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	7afa      	ldrb	r2, [r7, #11]
 8001316:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 800131a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800131e:	4618      	mov	r0, r3
 8001320:	3728      	adds	r7, #40	@ 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bdb0      	pop	{r4, r5, r7, pc}

08001326 <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	460b      	mov	r3, r1
 8001330:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001332:	2300      	movs	r3, #0
 8001334:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8001336:	2303      	movs	r3, #3
 8001338:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f003 fd9a 	bl	8004e74 <VL53L1_low_power_auto_data_init>
 8001340:	4603      	mov	r3, r0
 8001342:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 8001344:	7bba      	ldrb	r2, [r7, #14]
 8001346:	78f9      	ldrb	r1, [r7, #3]
 8001348:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff7b 	bl	8001248 <SetPresetMode>
 8001352:	4603      	mov	r3, r0
 8001354:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d117      	bne.n	800138e <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 800135e:	78fb      	ldrb	r3, [r7, #3]
 8001360:	2b04      	cmp	r3, #4
 8001362:	d005      	beq.n	8001370 <VL53L1_SetPresetMode+0x4a>
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	2b03      	cmp	r3, #3
 8001368:	d002      	beq.n	8001370 <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	2b08      	cmp	r3, #8
 800136e:	d107      	bne.n	8001380 <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8001370:	f24a 0128 	movw	r1, #41000	@ 0xa028
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f891 	bl	800149c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800137a:	4603      	mov	r3, r0
 800137c:	73fb      	strb	r3, [r7, #15]
 800137e:	e006      	b.n	800138e <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8001380:	f248 2135 	movw	r1, #33333	@ 0x8235
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f889 	bl	800149c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800138a:	4603      	mov	r3, r0
 800138c:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d106      	bne.n	80013a4 <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8001396:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fa08 	bl	80017b0 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 80013a0:	4603      	mov	r3, r0
 80013a2:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80013a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80013bc:	2300      	movs	r3, #0
 80013be:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 80013d2:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d008      	beq.n	80013ec <VL53L1_SetDistanceMode+0x3c>
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d005      	beq.n	80013ec <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d002      	beq.n	80013ec <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 80013e6:	f06f 0303 	mvn.w	r3, #3
 80013ea:	e052      	b.n	8001492 <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 80013ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d107      	bne.n	8001404 <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 80013f4:	f107 0308 	add.w	r3, r7, #8
 80013f8:	4619      	mov	r1, r3
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f001 f90b 	bl	8002616 <VL53L1_get_user_zone>
 8001400:	4603      	mov	r3, r0
 8001402:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800140a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10a      	bne.n	8001428 <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	f107 0210 	add.w	r2, r7, #16
 800141a:	f107 010c 	add.w	r1, r7, #12
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f001 f836 	bl	8002490 <VL53L1_get_timeouts_us>
 8001424:	4603      	mov	r3, r0
 8001426:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8001428:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d107      	bne.n	8001440 <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 8001430:	78fa      	ldrb	r2, [r7, #3]
 8001432:	7fb9      	ldrb	r1, [r7, #30]
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff06 	bl	8001248 <SetPresetMode>
 800143c:	4603      	mov	r3, r0
 800143e:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8001440:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d103      	bne.n	8001450 <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	78fa      	ldrb	r2, [r7, #3]
 800144c:	f883 237d 	strb.w	r2, [r3, #893]	@ 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8001450:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10e      	bne.n	8001476 <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8001458:	68f9      	ldr	r1, [r7, #12]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 ffde 	bl	8002420 <VL53L1_set_timeouts_us>
 8001464:	4603      	mov	r3, r0
 8001466:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8001468:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8001476:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d107      	bne.n	800148e <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	4619      	mov	r1, r3
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f001 f8a3 	bl	80025d0 <VL53L1_set_user_zone>
 800148a:	4603      	mov	r3, r0
 800148c:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 800148e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3720      	adds	r7, #32
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08c      	sub	sp, #48	@ 0x30
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t Mm1Enabled = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 80014c0:	4b64      	ldr	r3, [pc, #400]	@ (8001654 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 80014c2:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	4a64      	ldr	r2, [pc, #400]	@ (8001658 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d902      	bls.n	80014d2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80014cc:	23fc      	movs	r3, #252	@ 0xfc
 80014ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 80014d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d109      	bne.n	80014ee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80014da:	f107 031a 	add.w	r3, r7, #26
 80014de:	461a      	mov	r2, r3
 80014e0:	2105      	movs	r1, #5
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 fa8b 	bl	80019fe <VL53L1_GetSequenceStepEnable>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80014ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d109      	bne.n	800150a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80014f6:	f107 0319 	add.w	r3, r7, #25
 80014fa:	461a      	mov	r2, r3
 80014fc:	2106      	movs	r1, #6
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 fa7d 	bl	80019fe <VL53L1_GetSequenceStepEnable>
 8001504:	4603      	mov	r3, r0
 8001506:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 800150a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10b      	bne.n	800152a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	f107 0210 	add.w	r2, r7, #16
 800151a:	f107 010c 	add.w	r1, r7, #12
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 ffb6 	bl	8002490 <VL53L1_get_timeouts_us>
 8001524:	4603      	mov	r3, r0
 8001526:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800152a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800152e:	2b00      	cmp	r3, #0
 8001530:	f040 8081 	bne.w	8001636 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 800153a:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	62bb      	str	r3, [r7, #40]	@ 0x28
		divisor = 1;
 8001540:	2301      	movs	r3, #1
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
		switch (PresetMode) {
 8001544:	7efb      	ldrb	r3, [r7, #27]
 8001546:	2b08      	cmp	r3, #8
 8001548:	d026      	beq.n	8001598 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 800154a:	2b08      	cmp	r3, #8
 800154c:	dc43      	bgt.n	80015d6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 800154e:	2b03      	cmp	r3, #3
 8001550:	d00f      	beq.n	8001572 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 8001552:	2b04      	cmp	r3, #4
 8001554:	d13f      	bne.n	80015d6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001556:	7ebb      	ldrb	r3, [r7, #26]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d002      	beq.n	8001562 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 800155c:	7e7b      	ldrb	r3, [r7, #25]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d103      	bne.n	800156a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 8001562:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001566:	62bb      	str	r3, [r7, #40]	@ 0x28
			else
				TimingGuard = 1000;
		break;
 8001568:	e038      	b.n	80015dc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 800156a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8001570:	e034      	b.n	80015dc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001578:	7ebb      	ldrb	r3, [r7, #26]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d002      	beq.n	8001584 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 800157e:	7e7b      	ldrb	r3, [r7, #25]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d103      	bne.n	800158c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 8001584:	f246 73e8 	movw	r3, #26600	@ 0x67e8
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800158a:	e002      	b.n	8001592 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 800158c:	f245 4360 	movw	r3, #21600	@ 0x5460
 8001590:	62bb      	str	r3, [r7, #40]	@ 0x28
			divisor = 2;
 8001592:	2302      	movs	r3, #2
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8001596:	e021      	b.n	80015dc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800159e:	23f5      	movs	r3, #245	@ 0xf5
 80015a0:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	461a      	mov	r2, r3
 80015a8:	f248 0136 	movw	r1, #32822	@ 0x8036
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f001 ffe3 	bl	8003578 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	dd07      	ble.n	80015c8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	22f5      	movs	r2, #245	@ 0xf5
 80015bc:	fb02 f303 	mul.w	r3, r2, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	4413      	add	r3, r2
 80015c6:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 80015ce:	62bb      	str	r3, [r7, #40]	@ 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 80015d0:	2302      	movs	r3, #2
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 80015d4:	e002      	b.n	80015dc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80015d6:	23f8      	movs	r3, #248	@ 0xf8
 80015d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d803      	bhi.n	80015ec <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80015e4:	23fc      	movs	r3, #252	@ 0xfc
 80015e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80015ea:	e003      	b.n	80015f4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f0:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80015f2:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 80015f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d11c      	bne.n	8001636 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	429a      	cmp	r2, r3
 8001602:	d203      	bcs.n	800160c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8001604:	23fc      	movs	r3, #252	@ 0xfc
 8001606:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800160a:	e00d      	b.n	8001628 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	fbb2 f3f3 	udiv	r3, r2, r3
 8001614:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8001616:	68f9      	ldr	r1, [r7, #12]
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 feff 	bl	8002420 <VL53L1_set_timeouts_us>
 8001622:	4603      	mov	r3, r0
 8001624:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8001628:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8001636:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800163a:	2b00      	cmp	r3, #0
 800163c:	d103      	bne.n	8001646 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001646:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800164a:	4618      	mov	r0, r3
 800164c:	3730      	adds	r7, #48	@ 0x30
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	00086470 	.word	0x00086470
 8001658:	00989680 	.word	0x00989680

0800165c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08c      	sub	sp, #48	@ 0x30
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001666:	2300      	movs	r3, #0
 8001668:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t Mm1Enabled = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800168a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800168e:	2b00      	cmp	r3, #0
 8001690:	d109      	bne.n	80016a6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8001692:	f107 031b 	add.w	r3, r7, #27
 8001696:	461a      	mov	r2, r3
 8001698:	2105      	movs	r1, #5
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f9af 	bl	80019fe <VL53L1_GetSequenceStepEnable>
 80016a0:	4603      	mov	r3, r0
 80016a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80016a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d109      	bne.n	80016c2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80016ae:	f107 031a 	add.w	r3, r7, #26
 80016b2:	461a      	mov	r2, r3
 80016b4:	2106      	movs	r1, #6
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f9a1 	bl	80019fe <VL53L1_GetSequenceStepEnable>
 80016bc:	4603      	mov	r3, r0
 80016be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80016c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10b      	bne.n	80016e2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	f107 0214 	add.w	r2, r7, #20
 80016d2:	f107 010c 	add.w	r1, r7, #12
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 feda 	bl	8002490 <VL53L1_get_timeouts_us>
 80016dc:	4603      	mov	r3, r0
 80016de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 80016e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d155      	bne.n	8001796 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
		PresetMode = VL53L1DevDataGet(Dev,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 80016f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 80016f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d02a      	beq.n	8001752 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	dc47      	bgt.n	8001790 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 8001700:	2b03      	cmp	r3, #3
 8001702:	d012      	beq.n	800172a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 8001704:	2b04      	cmp	r3, #4
 8001706:	d143      	bne.n	8001790 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001708:	7efb      	ldrb	r3, [r7, #27]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d002      	beq.n	8001714 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 800170e:	7ebb      	ldrb	r3, [r7, #26]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d105      	bne.n	8001720 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800171a:	3308      	adds	r3, #8
 800171c:	62bb      	str	r3, [r7, #40]	@ 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800171e:	e03a      	b.n	8001796 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001726:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8001728:	e035      	b.n	8001796 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800172a:	7efb      	ldrb	r3, [r7, #27]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d002      	beq.n	8001736 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 8001730:	7ebb      	ldrb	r3, [r7, #26]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d106      	bne.n	8001744 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	f503 534f 	add.w	r3, r3, #13248	@ 0x33c0
 800173c:	3334      	adds	r3, #52	@ 0x34
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	62bb      	str	r3, [r7, #40]	@ 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8001742:	e028      	b.n	8001796 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	f503 5328 	add.w	r3, r3, #10752	@ 0x2a00
 800174a:	3330      	adds	r3, #48	@ 0x30
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 8001750:	e021      	b.n	8001796 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8001752:	23f5      	movs	r3, #245	@ 0xf5
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
			VL53L1_get_tuning_parm(Dev,
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	461a      	mov	r2, r3
 800175c:	f248 0136 	movw	r1, #32822	@ 0x8036
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f001 ff09 	bl	8003578 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	dd07      	ble.n	800177c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	22f5      	movs	r2, #245	@ 0xf5
 8001770:	fb02 f303 	mul.w	r3, r2, r3
 8001774:	461a      	mov	r2, r3
 8001776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001778:	4413      	add	r3, r2
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177e:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 8001782:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	4413      	add	r3, r2
 800178c:	62bb      	str	r3, [r7, #40]	@ 0x28
		break;
 800178e:	e002      	b.n	8001796 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8001790:	23f8      	movs	r3, #248	@ 0xf8
 8001792:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
	}
	if (Status == VL53L1_ERROR_NONE)
 8001796:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x148>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017a2:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80017a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3730      	adds	r7, #48	@ 0x30
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	019b      	lsls	r3, r3, #6
 80017c6:	4a09      	ldr	r2, [pc, #36]	@ (80017ec <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 80017c8:	fba2 2303 	umull	r2, r3, r2, r3
 80017cc:	099b      	lsrs	r3, r3, #6
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	4413      	add	r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 fdd3 	bl	8002382 <VL53L1_set_inter_measurement_period_ms>
 80017dc:	4603      	mov	r3, r0
 80017de:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 80017e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	10624dd3 	.word	0x10624dd3

080017f0 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	4619      	mov	r1, r3
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 fde5 	bl	80023d4 <VL53L1_get_inter_measurement_period_ms>
 800180a:	4603      	mov	r3, r0
 800180c:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	019b      	lsls	r3, r3, #6
 8001814:	4907      	ldr	r1, [pc, #28]	@ (8001834 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 8001816:	fba1 1303 	umull	r1, r3, r1, r3
 800181a:	099b      	lsrs	r3, r3, #6
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 8001826:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	10624dd3 	.word	0x10624dd3

08001838 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	460b      	mov	r3, r1
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001846:	2300      	movs	r3, #0
 8001848:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800184a:	897b      	ldrh	r3, [r7, #10]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d002      	beq.n	8001856 <SetLimitValue+0x1e>
 8001850:	2b01      	cmp	r3, #1
 8001852:	d009      	beq.n	8001868 <SetLimitValue+0x30>
 8001854:	e011      	b.n	800187a <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	0b9b      	lsrs	r3, r3, #14
 800185a:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 800185c:	8abb      	ldrh	r3, [r7, #20]
 800185e:	4619      	mov	r1, r3
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f001 f965 	bl	8002b30 <VL53L1_set_lite_sigma_threshold>
		break;
 8001866:	e00a      	b.n	800187e <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	0a5b      	lsrs	r3, r3, #9
 800186c:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800186e:	8abb      	ldrh	r3, [r7, #20]
 8001870:	4619      	mov	r1, r3
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f001 f988 	bl	8002b88 <VL53L1_set_lite_min_count_rate>
		break;
 8001878:	e001      	b.n	800187e <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800187a:	23fc      	movs	r3, #252	@ 0xfc
 800187c:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800187e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b084      	sub	sp, #16
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	460b      	mov	r3, r1
 8001894:	807b      	strh	r3, [r7, #2]
 8001896:	4613      	mov	r3, r2
 8001898:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800189a:	2300      	movs	r3, #0
 800189c:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80018a2:	887b      	ldrh	r3, [r7, #2]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d902      	bls.n	80018ae <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80018a8:	23fc      	movs	r3, #252	@ 0xfc
 80018aa:	73fb      	strb	r3, [r7, #15]
 80018ac:	e014      	b.n	80018d8 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 80018ae:	787b      	ldrb	r3, [r7, #1]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	e006      	b.n	80018c8 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80018ba:	887b      	ldrh	r3, [r7, #2]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	33e0      	adds	r3, #224	@ 0xe0
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 80018c8:	887b      	ldrh	r3, [r7, #2]
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	4619      	mov	r1, r3
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ffb2 	bl	8001838 <SetLimitValue>
 80018d4:	4603      	mov	r3, r0
 80018d6:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 80018d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10c      	bne.n	80018fa <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80018e0:	787b      	ldrb	r3, [r7, #1]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf14      	ite	ne
 80018e6:	2301      	movne	r3, #1
 80018e8:	2300      	moveq	r3, #0
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	887b      	ldrh	r3, [r7, #2]
 80018ee:	4611      	mov	r1, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	460a      	mov	r2, r1
 80018f6:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 80018fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8001906:	b480      	push	{r7}
 8001908:	b087      	sub	sp, #28
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	460b      	mov	r3, r1
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001914:	2300      	movs	r3, #0
 8001916:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001918:	897b      	ldrh	r3, [r7, #10]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d905      	bls.n	800192a <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800191e:	23fc      	movs	r3, #252	@ 0xfc
 8001920:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	e008      	b.n	800193c <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800192a:	897b      	ldrh	r3, [r7, #10]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	f893 3384 	ldrb.w	r3, [r3, #900]	@ 0x384
 8001934:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7dba      	ldrb	r2, [r7, #22]
 800193a:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800193c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001940:	4618      	mov	r0, r3
 8001942:	371c      	adds	r7, #28
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	460b      	mov	r3, r1
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800195a:	2300      	movs	r3, #0
 800195c:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8001962:	897b      	ldrh	r3, [r7, #10]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <VL53L1_GetLimitCheckValue+0x22>
 8001968:	2b01      	cmp	r3, #1
 800196a:	d00c      	beq.n	8001986 <VL53L1_GetLimitCheckValue+0x3a>
 800196c:	e017      	b.n	800199e <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f001 f8c5 	bl	8002b04 <VL53L1_get_lite_sigma_threshold>
 800197a:	4603      	mov	r3, r0
 800197c:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800197e:	8abb      	ldrh	r3, [r7, #20]
 8001980:	039b      	lsls	r3, r3, #14
 8001982:	61bb      	str	r3, [r7, #24]
		break;
 8001984:	e00d      	b.n	80019a2 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8001986:	f107 0316 	add.w	r3, r7, #22
 800198a:	4619      	mov	r1, r3
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f001 f8e5 	bl	8002b5c <VL53L1_get_lite_min_count_rate>
 8001992:	4603      	mov	r3, r0
 8001994:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8001996:	8afb      	ldrh	r3, [r7, #22]
 8001998:	025b      	lsls	r3, r3, #9
 800199a:	61bb      	str	r3, [r7, #24]
		break;
 800199c:	e001      	b.n	80019a2 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800199e:	23fc      	movs	r3, #252	@ 0xfc
 80019a0:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 80019a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d123      	bne.n	80019f2 <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d110      	bne.n	80019d2 <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 80019b0:	897b      	ldrh	r3, [r7, #10]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	33e0      	adds	r3, #224	@ 0xe0
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80019c4:	897b      	ldrh	r3, [r7, #10]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4413      	add	r3, r2
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
 80019d0:	e00f      	b.n	80019f2 <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80019d8:	897b      	ldrh	r3, [r7, #10]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	33e0      	adds	r3, #224	@ 0xe0
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80019e6:	897b      	ldrh	r3, [r7, #10]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 80019f2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3720      	adds	r7, #32
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	460b      	mov	r3, r1
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8001a10:	7afb      	ldrb	r3, [r7, #11]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4619      	mov	r1, r3
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 fda3 	bl	8002562 <VL53L1_get_sequence_config_bit>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8001a20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	789b      	ldrb	r3, [r3, #2]
 8001a3c:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8001a3e:	7dbb      	ldrb	r3, [r7, #22]
 8001a40:	2b40      	cmp	r3, #64	@ 0x40
 8001a42:	d002      	beq.n	8001a4a <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 fa57 	bl	8001ef8 <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3378 	ldrb.w	r3, [r3, #888]	@ 0x378
 8001a50:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 8001a52:	7d7b      	ldrb	r3, [r7, #21]
 8001a54:	2b63      	cmp	r3, #99	@ 0x63
 8001a56:	dc12      	bgt.n	8001a7e <VL53L1_StartMeasurement+0x52>
 8001a58:	2b62      	cmp	r3, #98	@ 0x62
 8001a5a:	da0d      	bge.n	8001a78 <VL53L1_StartMeasurement+0x4c>
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	dc0e      	bgt.n	8001a7e <VL53L1_StartMeasurement+0x52>
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	da09      	bge.n	8001a78 <VL53L1_StartMeasurement+0x4c>
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	dc02      	bgt.n	8001a6e <VL53L1_StartMeasurement+0x42>
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	da05      	bge.n	8001a78 <VL53L1_StartMeasurement+0x4c>
 8001a6c:	e007      	b.n	8001a7e <VL53L1_StartMeasurement+0x52>
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d105      	bne.n	8001a7e <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	75fb      	strb	r3, [r7, #23]
		break;
 8001a76:	e004      	b.n	8001a82 <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8001a78:	23f2      	movs	r3, #242	@ 0xf2
 8001a7a:	75fb      	strb	r3, [r7, #23]
		break;
 8001a7c:	e001      	b.n	8001a82 <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8001a7e:	23fd      	movs	r3, #253	@ 0xfd
 8001a80:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 8001a82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d11f      	bne.n	8001aca <VL53L1_StartMeasurement+0x9e>
 8001a8a:	7dbb      	ldrb	r3, [r7, #22]
 8001a8c:	2b40      	cmp	r3, #64	@ 0x40
 8001a8e:	d11c      	bne.n	8001aca <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	4619      	mov	r1, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fde0 	bl	800165c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4a17      	ldr	r2, [pc, #92]	@ (8001b00 <VL53L1_StartMeasurement+0xd4>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	099b      	lsrs	r3, r3, #6
 8001aaa:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fe9c 	bl	80017f0 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1d1a      	adds	r2, r3, #4
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d901      	bls.n	8001aca <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8001ac6:	23fc      	movs	r3, #252	@ 0xfc
 8001ac8:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 8001aca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d107      	bne.n	8001ae2 <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 8001ad2:	7dbb      	ldrb	r3, [r7, #22]
 8001ad4:	2206      	movs	r2, #6
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f001 f88b 	bl	8002bf4 <VL53L1_init_and_start_range>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 8001ae2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d103      	bne.n	8001af2 <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2204      	movs	r2, #4
 8001aee:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 8001af2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	10624dd3 	.word	0x10624dd3

08001b04 <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	789b      	ldrb	r3, [r3, #2]
 8001b14:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8001b16:	7bbb      	ldrb	r3, [r7, #14]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f001 fbf8 	bl	8003310 <VL53L1_clear_interrupt_and_enable_next_range>
 8001b20:	4603      	mov	r3, r0
 8001b22:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8001b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b08d      	sub	sp, #52	@ 0x34
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	603a      	str	r2, [r7, #0]
 8001b3a:	71fb      	strb	r3, [r7, #7]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 8001b40:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001b44:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t SRAS = 30;
 8001b46:	231e      	movs	r3, #30
 8001b48:	847b      	strh	r3, [r7, #34]	@ 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 8001b4a:	4b33      	ldr	r3, [pc, #204]	@ (8001c18 <ComputeRQL+0xe8>)
 8001b4c:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 8001b4e:	4b33      	ldr	r3, [pc, #204]	@ (8001c1c <ComputeRQL+0xec>)
 8001b50:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 8001b52:	f641 139a 	movw	r3, #6554	@ 0x199a
 8001b56:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d103      	bne.n	8001b66 <ComputeRQL+0x36>
		returnvalue = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001b64:	e04f      	b.n	8001c06 <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8001b66:	79bb      	ldrb	r3, [r7, #6]
 8001b68:	2b07      	cmp	r3, #7
 8001b6a:	d103      	bne.n	8001b74 <ComputeRQL+0x44>
		returnvalue = 50;
 8001b6c:	2332      	movs	r3, #50	@ 0x32
 8001b6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001b72:	e048      	b.n	8001c06 <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8001b7a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	dd03      	ble.n	8001b8a <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 8001b82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001b84:	041b      	lsls	r3, r3, #16
 8001b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b88:	e007      	b.n	8001b9a <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8001b90:	461a      	mov	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	fb02 f303 	mul.w	r3, r2, r3
 8001b98:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 8001b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d020      	beq.n	8001be2 <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8001bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb0:	085b      	lsrs	r3, r3, #1
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc0:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	041b      	lsls	r3, r3, #16
 8001bc6:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d804      	bhi.n	8001bda <ComputeRQL+0xaa>
				SRQL = GI - partial;
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bd8:	e006      	b.n	8001be8 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 8001bda:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001be0:	e002      	b.n	8001be8 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 8001be2:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 8001be6:	62bb      	str	r3, [r7, #40]	@ 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8001be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bea:	0c1b      	lsrs	r3, r3, #16
 8001bec:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	2b32      	cmp	r3, #50	@ 0x32
 8001bf2:	d905      	bls.n	8001c00 <ComputeRQL+0xd0>
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	2b64      	cmp	r3, #100	@ 0x64
 8001bf8:	bf28      	it	cs
 8001bfa:	2364      	movcs	r3, #100	@ 0x64
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	e000      	b.n	8001c02 <ComputeRQL+0xd2>
 8001c00:	2332      	movs	r3, #50	@ 0x32
 8001c02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return returnvalue;
 8001c06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3734      	adds	r7, #52	@ 0x34
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	0075b333 	.word	0x0075b333
 8001c1c:	0030cccd 	.word	0x0030cccd

08001c20 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	3b04      	subs	r3, #4
 8001c2e:	2b0f      	cmp	r3, #15
 8001c30:	d83d      	bhi.n	8001cae <ConvertStatusLite+0x8e>
 8001c32:	a201      	add	r2, pc, #4	@ (adr r2, 8001c38 <ConvertStatusLite+0x18>)
 8001c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c38:	08001c8b 	.word	0x08001c8b
 8001c3c:	08001c85 	.word	0x08001c85
 8001c40:	08001c91 	.word	0x08001c91
 8001c44:	08001c97 	.word	0x08001c97
 8001c48:	08001ca3 	.word	0x08001ca3
 8001c4c:	08001ca9 	.word	0x08001ca9
 8001c50:	08001caf 	.word	0x08001caf
 8001c54:	08001caf 	.word	0x08001caf
 8001c58:	08001c9d 	.word	0x08001c9d
 8001c5c:	08001caf 	.word	0x08001caf
 8001c60:	08001caf 	.word	0x08001caf
 8001c64:	08001caf 	.word	0x08001caf
 8001c68:	08001caf 	.word	0x08001caf
 8001c6c:	08001caf 	.word	0x08001caf
 8001c70:	08001c79 	.word	0x08001c79
 8001c74:	08001c7f 	.word	0x08001c7f
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8001c78:	230a      	movs	r3, #10
 8001c7a:	73fb      	strb	r3, [r7, #15]
		break;
 8001c7c:	e019      	b.n	8001cb2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	73fb      	strb	r3, [r7, #15]
		break;
 8001c82:	e016      	b.n	8001cb2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8001c84:	2304      	movs	r3, #4
 8001c86:	73fb      	strb	r3, [r7, #15]
		break;
 8001c88:	e013      	b.n	8001cb2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	73fb      	strb	r3, [r7, #15]
		break;
 8001c8e:	e010      	b.n	8001cb2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
		break;
 8001c94:	e00d      	b.n	8001cb2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8001c96:	2307      	movs	r3, #7
 8001c98:	73fb      	strb	r3, [r7, #15]
		break;
 8001c9a:	e00a      	b.n	8001cb2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8001c9c:	2309      	movs	r3, #9
 8001c9e:	73fb      	strb	r3, [r7, #15]
		break;
 8001ca0:	e007      	b.n	8001cb2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	73fb      	strb	r3, [r7, #15]
		break;
 8001ca6:	e004      	b.n	8001cb2 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	73fb      	strb	r3, [r7, #15]
		break;
 8001cac:	e001      	b.n	8001cb2 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8001cae:	23ff      	movs	r3, #255	@ 0xff
 8001cb0:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08c      	sub	sp, #48	@ 0x30
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	72fb      	strb	r3, [r7, #11]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cde:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8001cee:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8001cf2:	7afb      	ldrb	r3, [r7, #11]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ff1a 	bl	8001b30 <ComputeRQL>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	461a      	mov	r2, r3
 8001d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d02:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001d08:	025b      	lsls	r3, r3, #9
 8001d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8001d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d10:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001d16:	025b      	lsls	r3, r3, #9
 8001d18:	627b      	str	r3, [r7, #36]	@ 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8001d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d1e:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 8001d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d26:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8001d2c:	025b      	lsls	r3, r3, #9
 8001d2e:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8001d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d32:	6a3a      	ldr	r2, [r7, #32]
 8001d34:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	@ 0x3c
 8001d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d3e:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 8001d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d42:	2200      	movs	r2, #0
 8001d44:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 8001d46:	7abb      	ldrb	r3, [r7, #10]
 8001d48:	2b11      	cmp	r3, #17
 8001d4a:	d009      	beq.n	8001d60 <SetSimpleData+0xa0>
 8001d4c:	2b11      	cmp	r3, #17
 8001d4e:	dc0f      	bgt.n	8001d70 <SetSimpleData+0xb0>
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	dc02      	bgt.n	8001d5a <SetSimpleData+0x9a>
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	dc03      	bgt.n	8001d60 <SetSimpleData+0xa0>
 8001d58:	e00a      	b.n	8001d70 <SetSimpleData+0xb0>
 8001d5a:	2b0d      	cmp	r3, #13
 8001d5c:	d004      	beq.n	8001d68 <SetSimpleData+0xa8>
 8001d5e:	e007      	b.n	8001d70 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8001d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d62:	2205      	movs	r2, #5
 8001d64:	76da      	strb	r2, [r3, #27]
		break;
 8001d66:	e006      	b.n	8001d76 <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8001d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d6a:	220d      	movs	r2, #13
 8001d6c:	76da      	strb	r2, [r3, #27]
		break;
 8001d6e:	e002      	b.n	8001d76 <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8001d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d72:	2200      	movs	r2, #0
 8001d74:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8001d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d78:	7edb      	ldrb	r3, [r3, #27]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d108      	bne.n	8001d90 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8001d7e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ff4c 	bl	8001c20 <ConvertStatusLite>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8001d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d8e:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8001d94:	025b      	lsls	r3, r3, #9
 8001d96:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a3a      	ldr	r2, [r7, #32]
 8001d9c:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001da4:	025b      	lsls	r3, r3, #9
 8001da6:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a3a      	ldr	r2, [r7, #32]
 8001dac:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	461a      	mov	r2, r3
 8001db6:	2100      	movs	r1, #0
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f7ff fdc7 	bl	800194c <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8001dbe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	bf0c      	ite	eq
 8001dc6:	2301      	moveq	r3, #1
 8001dc8:	2300      	movne	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8001dcc:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 8001dce:	f107 0319 	add.w	r3, r7, #25
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f7ff fd95 	bl	8001906 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8001ddc:	7e7b      	ldrb	r3, [r7, #25]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d104      	bne.n	8001dec <SetSimpleData+0x12c>
 8001de2:	7ffb      	ldrb	r3, [r7, #31]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <SetSimpleData+0x12c>
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <SetSimpleData+0x12e>
 8001dec:	2300      	movs	r3, #0
 8001dee:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	7fba      	ldrb	r2, [r7, #30]
 8001df4:	f883 2386 	strb.w	r2, [r3, #902]	@ 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	2101      	movs	r1, #1
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f7ff fda3 	bl	800194c <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8001e06:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	bf0c      	ite	eq
 8001e0e:	2301      	moveq	r3, #1
 8001e10:	2300      	movne	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8001e14:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 8001e16:	f107 0319 	add.w	r3, r7, #25
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f7ff fd71 	bl	8001906 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8001e24:	7e7b      	ldrb	r3, [r7, #25]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d104      	bne.n	8001e34 <SetSimpleData+0x174>
 8001e2a:	7f7b      	ldrb	r3, [r7, #29]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <SetSimpleData+0x174>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <SetSimpleData+0x176>
 8001e34:	2300      	movs	r3, #0
 8001e36:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	7fba      	ldrb	r2, [r7, #30]
 8001e3c:	f883 2387 	strb.w	r2, [r3, #903]	@ 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8001e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e42:	8b1b      	ldrh	r3, [r3, #24]
 8001e44:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8001e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e48:	7edb      	ldrb	r3, [r3, #27]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d110      	bne.n	8001e70 <SetSimpleData+0x1b0>
 8001e4e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	da0c      	bge.n	8001e70 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8001e56:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001e5a:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <SetSimpleData+0x1bc>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	da03      	bge.n	8001e6a <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 8001e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e64:	220e      	movs	r2, #14
 8001e66:	76da      	strb	r2, [r3, #27]
 8001e68:	e002      	b.n	8001e70 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8001e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 8001e70:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3730      	adds	r7, #48	@ 0x30
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000010 	.word	0x20000010

08001e80 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b0a8      	sub	sp, #160	@ 0xa0
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 8001e90:	f107 0308 	add.w	r3, r7, #8
 8001e94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8001e98:	221c      	movs	r2, #28
 8001e9a:	21ff      	movs	r1, #255	@ 0xff
 8001e9c:	6838      	ldr	r0, [r7, #0]
 8001e9e:	f009 fa7f 	bl	800b3a0 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8001ea2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001ea6:	2102      	movs	r1, #2
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f001 f9c1 	bl	8003230 <VL53L1_get_device_results>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8001eb4:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d117      	bne.n	8001eec <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8001ebc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ec0:	789a      	ldrb	r2, [r3, #2]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 8001ec6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001eca:	3304      	adds	r3, #4
 8001ecc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		Status = SetSimpleData(Dev, 1,
 8001ed0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ed4:	78da      	ldrb	r2, [r3, #3]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ede:	2101      	movs	r1, #1
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff feed 	bl	8001cc0 <SetSimpleData>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001eec:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3798      	adds	r7, #152	@ 0x98
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b0c6      	sub	sp, #280	@ 0x118
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f02:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f06:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	uint32_t patch_tuning = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8001f14:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10b      	bne.n	8001f34 <VL53L1_LoadPatch+0x3c>
		status = VL53L1_WrByte(
 8001f1c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f20:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f24:	2200      	movs	r2, #0
 8001f26:	2185      	movs	r1, #133	@ 0x85
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	f003 f8e3 	bl	80050f4 <VL53L1_WrByte>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 8001f34:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d106      	bne.n	8001f4a <VL53L1_LoadPatch+0x52>
		VL53L1_enable_powerforce(Dev);
 8001f3c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f40:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	f002 fd5c 	bl	8004a02 <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 8001f4a:	4b7e      	ldr	r3, [pc, #504]	@ (8002144 <VL53L1_LoadPatch+0x24c>)
 8001f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	switch(patch_tuning) {
 8001f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d81a      	bhi.n	8001f90 <VL53L1_LoadPatch+0x98>
 8001f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f60 <VL53L1_LoadPatch+0x68>)
 8001f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f60:	08001f71 	.word	0x08001f71
 8001f64:	08001f79 	.word	0x08001f79
 8001f68:	08001f81 	.word	0x08001f81
 8001f6c:	08001f89 	.word	0x08001f89
	case 0:
		patch_power = 0x00;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8001f76:	e00e      	b.n	8001f96 <VL53L1_LoadPatch+0x9e>
	case 1:
		patch_power = 0x10;
 8001f78:	2310      	movs	r3, #16
 8001f7a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8001f7e:	e00a      	b.n	8001f96 <VL53L1_LoadPatch+0x9e>
	case 2:
		patch_power = 0x20;
 8001f80:	2320      	movs	r3, #32
 8001f82:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8001f86:	e006      	b.n	8001f96 <VL53L1_LoadPatch+0x9e>
	case 3:
		patch_power = 0x40;
 8001f88:	2340      	movs	r3, #64	@ 0x40
 8001f8a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
		break;
 8001f8e:	e002      	b.n	8001f96 <VL53L1_LoadPatch+0x9e>
	default:
		patch_power = 0x00;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 8001f96:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d134      	bne.n	8002008 <VL53L1_LoadPatch+0x110>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 8001f9e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fa2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fa6:	2229      	movs	r2, #41	@ 0x29
 8001fa8:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8001faa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fb2:	22c9      	movs	r2, #201	@ 0xc9
 8001fb4:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8001fb6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fbe:	220e      	movs	r2, #14
 8001fc0:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8001fc2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fc6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fca:	2240      	movs	r2, #64	@ 0x40
 8001fcc:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8001fce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fd2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fd6:	2228      	movs	r2, #40	@ 0x28
 8001fd8:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8001fda:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fe4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fe8:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 8001fea:	f107 020c 	add.w	r2, r7, #12
 8001fee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ff2:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8001ff6:	2306      	movs	r3, #6
 8001ff8:	f240 4176 	movw	r1, #1142	@ 0x476
 8001ffc:	6800      	ldr	r0, [r0, #0]
 8001ffe:	f003 f821 	bl	8005044 <VL53L1_WriteMulti>
 8002002:	4603      	mov	r3, r0
 8002004:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 8002008:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800200c:	2b00      	cmp	r3, #0
 800200e:	d132      	bne.n	8002076 <VL53L1_LoadPatch+0x17e>
		comms_buffer[0] = 0x03;
 8002010:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002014:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002018:	2203      	movs	r2, #3
 800201a:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 800201c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002020:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002024:	226d      	movs	r2, #109	@ 0x6d
 8002026:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8002028:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800202c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002030:	2203      	movs	r2, #3
 8002032:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8002034:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002038:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800203c:	226f      	movs	r2, #111	@ 0x6f
 800203e:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8002040:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002044:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002048:	2207      	movs	r2, #7
 800204a:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 800204c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002050:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002054:	2229      	movs	r2, #41	@ 0x29
 8002056:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 8002058:	f107 020c 	add.w	r2, r7, #12
 800205c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002060:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8002064:	2306      	movs	r3, #6
 8002066:	f240 4196 	movw	r1, #1174	@ 0x496
 800206a:	6800      	ldr	r0, [r0, #0]
 800206c:	f002 ffea 	bl	8005044 <VL53L1_WriteMulti>
 8002070:	4603      	mov	r3, r0
 8002072:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 8002076:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 800207a:	2b00      	cmp	r3, #0
 800207c:	d11a      	bne.n	80020b4 <VL53L1_LoadPatch+0x1bc>
		comms_buffer[0] = 0x00;
 800207e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002082:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800208a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800208e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002092:	2207      	movs	r2, #7
 8002094:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 8002096:	f107 020c 	add.w	r2, r7, #12
 800209a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800209e:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 80020a2:	2302      	movs	r3, #2
 80020a4:	f240 4172 	movw	r1, #1138	@ 0x472
 80020a8:	6800      	ldr	r0, [r0, #0]
 80020aa:	f002 ffcb 	bl	8005044 <VL53L1_WriteMulti>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 80020b4:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d11a      	bne.n	80020f2 <VL53L1_LoadPatch+0x1fa>
		comms_buffer[0] = 0x00;
 80020bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80020c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020d0:	2207      	movs	r2, #7
 80020d2:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 80020d4:	f107 020c 	add.w	r2, r7, #12
 80020d8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020dc:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 80020e0:	2302      	movs	r3, #2
 80020e2:	f240 4174 	movw	r1, #1140	@ 0x474
 80020e6:	6800      	ldr	r0, [r0, #0]
 80020e8:	f002 ffac 	bl	8005044 <VL53L1_WriteMulti>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 80020f2:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10c      	bne.n	8002114 <VL53L1_LoadPatch+0x21c>
		status = VL53L1_WrByte(
 80020fa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020fe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002102:	2201      	movs	r2, #1
 8002104:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	f002 fff3 	bl	80050f4 <VL53L1_WrByte>
 800210e:	4603      	mov	r3, r0
 8002110:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 8002114:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10b      	bne.n	8002134 <VL53L1_LoadPatch+0x23c>
		status = VL53L1_WrByte(
 800211c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002120:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002124:	2201      	movs	r2, #1
 8002126:	2185      	movs	r1, #133	@ 0x85
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	f002 ffe3 	bl	80050f4 <VL53L1_WrByte>
 800212e:	4603      	mov	r3, r0
 8002130:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 8002134:	f997 3117 	ldrsb.w	r3, [r7, #279]	@ 0x117
}
 8002138:	4618      	mov	r0, r3
 800213a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000010 	.word	0x20000010

08002148 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8002148:	b5b0      	push	{r4, r5, r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af04      	add	r7, sp, #16
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 800215c:	2162      	movs	r1, #98	@ 0x62
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f002 f909 	bl	8004376 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2201      	movs	r2, #1
 800216e:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2200      	movs	r2, #0
 8002174:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2201      	movs	r2, #1
 800217a:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2201      	movs	r2, #1
 8002180:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002188:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002190:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8002198:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2264      	movs	r2, #100	@ 0x64
 800219e:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80021a6:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f240 72db 	movw	r2, #2011	@ 0x7db
 80021b6:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f002 f8bf 	bl	800433e <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <VL53L1_data_init+0x90>
 80021c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d104      	bne.n	80021d8 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f857 	bl	8002282 <VL53L1_read_p2p_data>
 80021d4:	4603      	mov	r3, r0
 80021d6:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80021de:	4618      	mov	r0, r3
 80021e0:	f001 fbee 	bl	80039c0 <VL53L1_init_refspadchar_config_struct>
 80021e4:	4603      	mov	r3, r0
 80021e6:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80021ee:	4618      	mov	r0, r3
 80021f0:	f001 fc0a 	bl	8003a08 <VL53L1_init_ssc_config_struct>
 80021f4:	4603      	mov	r3, r0
 80021f6:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f103 0242 	add.w	r2, r3, #66	@ 0x42
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8002204:	4619      	mov	r1, r3
 8002206:	4610      	mov	r0, r2
 8002208:	f001 fc1f 	bl	8003a4a <VL53L1_init_xtalk_config_struct>
 800220c:	4603      	mov	r3, r0
 800220e:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002216:	4618      	mov	r0, r3
 8002218:	f001 fc79 	bl	8003b0e <VL53L1_init_offset_cal_config_struct>
 800221c:	4603      	mov	r3, r0
 800221e:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	33a4      	adds	r3, #164	@ 0xa4
 8002224:	4618      	mov	r0, r3
 8002226:	f001 fc99 	bl	8003b5c <VL53L1_init_tuning_parm_storage_struct>
 800222a:	4603      	mov	r3, r0
 800222c:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 800222e:	2120      	movs	r1, #32
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 fcbf 	bl	8002bb4 <VL53L1_set_vhv_loopbound>
 8002236:	4603      	mov	r3, r0
 8002238:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800223a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d116      	bne.n	8002270 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	7858      	ldrb	r0, [r3, #1]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	8b1c      	ldrh	r4, [r3, #24]
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	689d      	ldr	r5, [r3, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	6912      	ldr	r2, [r2, #16]
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	6949      	ldr	r1, [r1, #20]
 800225a:	9102      	str	r1, [sp, #8]
 800225c:	9201      	str	r2, [sp, #4]
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	462b      	mov	r3, r5
 8002262:	4622      	mov	r2, r4
 8002264:	4601      	mov	r1, r0
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 fad6 	bl	8002818 <VL53L1_set_preset_mode>
 800226c:	4603      	mov	r3, r0
 800226e:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f002 fdff 	bl	8004e74 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8002276:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bdb0      	pop	{r4, r5, r7, pc}

08002282 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800228a:	2300      	movs	r3, #0
 800228c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d108      	bne.n	80022ac <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80022a0:	4619      	mov	r1, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f003 f825 	bl	80052f2 <VL53L1_get_static_nvm_managed>
 80022a8:	4603      	mov	r3, r0
 80022aa:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 80022ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d107      	bne.n	80022c4 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	3342      	adds	r3, #66	@ 0x42
 80022b8:	4619      	mov	r1, r3
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f003 f957 	bl	800556e <VL53L1_get_customer_nvm_managed>
 80022c0:	4603      	mov	r3, r0
 80022c2:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 80022c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d115      	bne.n	80022f8 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f503 73fd 	add.w	r3, r3, #506	@ 0x1fa
 80022d2:	4619      	mov	r1, r3
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f004 f809 	bl	80062ec <VL53L1_get_nvm_copy_data>
 80022da:	4603      	mov	r3, r0
 80022dc:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 80022de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d108      	bne.n	80022f8 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f503 72fd 	add.w	r2, r3, #506	@ 0x1fa
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	33f0      	adds	r3, #240	@ 0xf0
 80022f0:	4619      	mov	r1, r3
 80022f2:	4610      	mov	r0, r2
 80022f4:	f002 f9a1 	bl	800463a <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 80022f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d109      	bne.n	8002314 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8002306:	461a      	mov	r2, r3
 8002308:	21de      	movs	r1, #222	@ 0xde
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f002 ff06 	bl	800511c <VL53L1_RdWord>
 8002310:	4603      	mov	r3, r0
 8002312:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 800231a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800231e:	d204      	bcs.n	800232a <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 8002326:	f8a3 215e 	strh.w	r2, [r3, #350]	@ 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 800232a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d107      	bne.n	8002342 <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	339e      	adds	r3, #158	@ 0x9e
 8002336:	4619      	mov	r1, r3
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f98e 	bl	800265a <VL53L1_get_mode_mitigation_roi>
 800233e:	4603      	mov	r3, r0
 8002340:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d114      	bne.n	8002376 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10f      	bne.n	8002376 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f893 309f 	ldrb.w	r3, [r3, #159]	@ 0x9f
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 8002376:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8002382:	b480      	push	{r7}
 8002384:	b085      	sub	sp, #20
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800239e:	23f1      	movs	r3, #241	@ 0xf1
 80023a0:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 80023a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10c      	bne.n	80023c4 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 80023b6:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 80023c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80023f0:	23f1      	movs	r3, #241	@ 0xf1
 80023f2:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 80023f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	@ 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 8002408:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8002410:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800242e:	2300      	movs	r3, #0
 8002430:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8002440:	23f1      	movs	r3, #241	@ 0xf1
 8002442:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8002444:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d11b      	bne.n	8002484 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f8b3 115e 	ldrh.w	r1, [r3, #350]	@ 0x15e
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	f502 72ce 	add.w	r2, r2, #412	@ 0x19c
 8002470:	9201      	str	r2, [sp, #4]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	460b      	mov	r3, r1
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	68b8      	ldr	r0, [r7, #8]
 800247c:	f002 fc2c 	bl	8004cd8 <VL53L1_calc_timeout_register_values>
 8002480:	4603      	mov	r3, r0
 8002482:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8002484:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800249e:	2300      	movs	r3, #0
 80024a0:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80024b8:	23f1      	movs	r3, #241	@ 0xf1
 80024ba:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 80024bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d148      	bne.n	8002556 <VL53L1_get_timeouts_us+0xc6>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	f8b3 215e 	ldrh.w	r2, [r3, #350]	@ 0x15e
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	f893 31a2 	ldrb.w	r3, [r3, #418]	@ 0x1a2
 80024d0:	4619      	mov	r1, r3
 80024d2:	4610      	mov	r0, r2
 80024d4:	f002 faa7 	bl	8004a26 <VL53L1_calc_macro_period_us>
 80024d8:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f893 318b 	ldrb.w	r3, [r3, #395]	@ 0x18b
			VL53L1_calc_timeout_us(
 80024e0:	6979      	ldr	r1, [r7, #20]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f002 fb5f 	bl	8004ba6 <VL53L1_calc_timeout_us>
 80024e8:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
		timeout_encoded =
 80024f4:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80024f6:	8a7b      	ldrh	r3, [r7, #18]
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	f892 219d 	ldrb.w	r2, [r2, #413]	@ 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 8002502:	4413      	add	r3, r2
 8002504:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8002506:	8a7b      	ldrh	r3, [r7, #18]
 8002508:	6979      	ldr	r1, [r7, #20]
 800250a:	4618      	mov	r0, r3
 800250c:	f002 fb8b 	bl	8004c26 <VL53L1_calc_decoded_timeout_us>
 8002510:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
		timeout_encoded =
 800251c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800251e:	8a7b      	ldrh	r3, [r7, #18]
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	f892 21a1 	ldrb.w	r2, [r2, #417]	@ 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 800252a:	4413      	add	r3, r2
 800252c:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800252e:	8a7b      	ldrh	r3, [r7, #18]
 8002530:	6979      	ldr	r1, [r7, #20]
 8002532:	4618      	mov	r0, r3
 8002534:	f002 fb77 	bl	8004c26 <VL53L1_calc_decoded_timeout_us>
 8002538:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8002556:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3720      	adds	r7, #32
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8002562:	b480      	push	{r7}
 8002564:	b087      	sub	sp, #28
 8002566:	af00      	add	r7, sp, #0
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	460b      	mov	r3, r1
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002570:	2300      	movs	r3, #0
 8002572:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8002578:	2301      	movs	r3, #1
 800257a:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800257c:	7afb      	ldrb	r3, [r7, #11]
 800257e:	2b07      	cmp	r3, #7
 8002580:	d81c      	bhi.n	80025bc <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 8002582:	7afb      	ldrb	r3, [r7, #11]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d004      	beq.n	8002592 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8002588:	7afb      	ldrb	r3, [r7, #11]
 800258a:	2201      	movs	r2, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f893 21c5 	ldrb.w	r2, [r3, #453]	@ 0x1c5
		*pvalue =
 8002598:	7dbb      	ldrb	r3, [r7, #22]
 800259a:	4013      	ands	r3, r2
 800259c:	b2da      	uxtb	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 80025a2:	7afb      	ldrb	r3, [r7, #11]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00b      	beq.n	80025c0 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	7afb      	ldrb	r3, [r7, #11]
 80025b0:	fa42 f303 	asr.w	r3, r2, r3
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	e001      	b.n	80025c0 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 80025bc:	23fc      	movs	r3, #252	@ 0xfc
 80025be:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 80025c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80025da:	2300      	movs	r3, #0
 80025dc:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	7858      	ldrb	r0, [r3, #1]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	7819      	ldrb	r1, [r3, #0]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f203 13c3 	addw	r3, r3, #451	@ 0x1c3
 80025f0:	461a      	mov	r2, r3
 80025f2:	f002 fbea 	bl	8004dca <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	7898      	ldrb	r0, [r3, #2]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	78d9      	ldrb	r1, [r3, #3]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8002604:	461a      	mov	r2, r3
 8002606:	f002 fc1f 	bl	8004e48 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 800260a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002620:	2300      	movs	r3, #0
 8002622:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f893 01c3 	ldrb.w	r0, [r3, #451]	@ 0x1c3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	3301      	adds	r3, #1
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	4619      	mov	r1, r3
 8002636:	f002 fcd6 	bl	8004fe6 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f893 01c4 	ldrb.w	r0, [r3, #452]	@ 0x1c4
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	1c99      	adds	r1, r3, #2
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	3303      	adds	r3, #3
 8002648:	461a      	mov	r2, r3
 800264a:	f002 fbe5 	bl	8004e18 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 800264e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002664:	2300      	movs	r3, #0
 8002666:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	f893 322a 	ldrb.w	r3, [r3, #554]	@ 0x22a
 800267e:	f107 020e 	add.w	r2, r7, #14
 8002682:	f107 010d 	add.w	r1, r7, #13
 8002686:	4618      	mov	r0, r3
 8002688:	f002 fcad 	bl	8004fe6 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800268c:	7bba      	ldrb	r2, [r7, #14]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8002692:	7b7a      	ldrb	r2, [r7, #13]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f893 322b 	ldrb.w	r3, [r3, #555]	@ 0x22b
 800269e:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 80026b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	460b      	mov	r3, r1
 80026d2:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 80026dc:	7afb      	ldrb	r3, [r7, #11]
 80026de:	3b01      	subs	r3, #1
 80026e0:	2b25      	cmp	r3, #37	@ 0x25
 80026e2:	f200 808e 	bhi.w	8002802 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 80026e6:	a201      	add	r2, pc, #4	@ (adr r2, 80026ec <VL53L1_get_preset_mode_timing_cfg+0x28>)
 80026e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ec:	08002785 	.word	0x08002785
 80026f0:	08002785 	.word	0x08002785
 80026f4:	08002785 	.word	0x08002785
 80026f8:	08002785 	.word	0x08002785
 80026fc:	08002785 	.word	0x08002785
 8002700:	080027af 	.word	0x080027af
 8002704:	080027af 	.word	0x080027af
 8002708:	080027af 	.word	0x080027af
 800270c:	08002803 	.word	0x08002803
 8002710:	08002803 	.word	0x08002803
 8002714:	08002803 	.word	0x08002803
 8002718:	08002803 	.word	0x08002803
 800271c:	08002803 	.word	0x08002803
 8002720:	08002803 	.word	0x08002803
 8002724:	08002803 	.word	0x08002803
 8002728:	08002803 	.word	0x08002803
 800272c:	08002785 	.word	0x08002785
 8002730:	080027af 	.word	0x080027af
 8002734:	08002803 	.word	0x08002803
 8002738:	08002803 	.word	0x08002803
 800273c:	08002803 	.word	0x08002803
 8002740:	08002803 	.word	0x08002803
 8002744:	08002803 	.word	0x08002803
 8002748:	08002803 	.word	0x08002803
 800274c:	08002803 	.word	0x08002803
 8002750:	08002803 	.word	0x08002803
 8002754:	08002803 	.word	0x08002803
 8002758:	08002803 	.word	0x08002803
 800275c:	08002803 	.word	0x08002803
 8002760:	08002803 	.word	0x08002803
 8002764:	08002803 	.word	0x08002803
 8002768:	08002803 	.word	0x08002803
 800276c:	08002803 	.word	0x08002803
 8002770:	08002803 	.word	0x08002803
 8002774:	08002803 	.word	0x08002803
 8002778:	080027d9 	.word	0x080027d9
 800277c:	080027d9 	.word	0x080027d9
 8002780:	080027d9 	.word	0x080027d9
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	@ 0xca
		*pdss_config__target_total_rate_mcps =
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
		*pphasecal_config_timeout_us =
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
		*pmm_config_timeout_us =
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
		*prange_config_timeout_us =
 80027a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027aa:	601a      	str	r2, [r3, #0]
	break;
 80027ac:	e02c      	b.n	8002808 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
		*pmm_config_timeout_us =
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
		*prange_config_timeout_us =
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	601a      	str	r2, [r3, #0]
	break;
 80027d6:	e017      	b.n	8002808 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
		*pmm_config_timeout_us =
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
		*prange_config_timeout_us =
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	601a      	str	r2, [r3, #0]
	break;
 8002800:	e002      	b.n	8002808 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8002802:	23fc      	movs	r3, #252	@ 0xfc
 8002804:	75fb      	strb	r3, [r7, #23]
		break;
 8002806:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8002808:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800280c:	4618      	mov	r0, r3
 800280e:	371c      	adds	r7, #28
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b092      	sub	sp, #72	@ 0x48
 800281c:	af04      	add	r7, sp, #16
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	460b      	mov	r3, r1
 8002824:	72fb      	strb	r3, [r7, #11]
 8002826:	4613      	mov	r3, r2
 8002828:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53L1_LLDriverData_t *pdev =
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	633b      	str	r3, [r7, #48]	@ 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8002834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002836:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800283a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800283c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800283e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8002842:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8002844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002846:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800284a:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800284c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284e:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8002852:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8002854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002856:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800285a:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800285c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285e:	33a4      	adds	r3, #164	@ 0xa4
 8002860:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8002862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002864:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8002868:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800286a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286c:	7afa      	ldrb	r2, [r7, #11]
 800286e:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8002870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002872:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002874:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8002876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002878:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800287a:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800287c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002880:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8002882:	2103      	movs	r1, #3
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f001 fd76 	bl	8004376 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800288a:	7afb      	ldrb	r3, [r7, #11]
 800288c:	3b01      	subs	r3, #1
 800288e:	2b25      	cmp	r3, #37	@ 0x25
 8002890:	f200 810c 	bhi.w	8002aac <VL53L1_set_preset_mode+0x294>
 8002894:	a201      	add	r2, pc, #4	@ (adr r2, 800289c <VL53L1_set_preset_mode+0x84>)
 8002896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289a:	bf00      	nop
 800289c:	08002935 	.word	0x08002935
 80028a0:	08002951 	.word	0x08002951
 80028a4:	0800296d 	.word	0x0800296d
 80028a8:	08002989 	.word	0x08002989
 80028ac:	080029a5 	.word	0x080029a5
 80028b0:	080029c1 	.word	0x080029c1
 80028b4:	080029dd 	.word	0x080029dd
 80028b8:	080029f9 	.word	0x080029f9
 80028bc:	08002aad 	.word	0x08002aad
 80028c0:	08002aad 	.word	0x08002aad
 80028c4:	08002aad 	.word	0x08002aad
 80028c8:	08002aad 	.word	0x08002aad
 80028cc:	08002aad 	.word	0x08002aad
 80028d0:	08002aad 	.word	0x08002aad
 80028d4:	08002aad 	.word	0x08002aad
 80028d8:	08002aad 	.word	0x08002aad
 80028dc:	08002a15 	.word	0x08002a15
 80028e0:	08002a31 	.word	0x08002a31
 80028e4:	08002aad 	.word	0x08002aad
 80028e8:	08002aad 	.word	0x08002aad
 80028ec:	08002aad 	.word	0x08002aad
 80028f0:	08002aad 	.word	0x08002aad
 80028f4:	08002aad 	.word	0x08002aad
 80028f8:	08002aad 	.word	0x08002aad
 80028fc:	08002aad 	.word	0x08002aad
 8002900:	08002aad 	.word	0x08002aad
 8002904:	08002aad 	.word	0x08002aad
 8002908:	08002aad 	.word	0x08002aad
 800290c:	08002aad 	.word	0x08002aad
 8002910:	08002aad 	.word	0x08002aad
 8002914:	08002aad 	.word	0x08002aad
 8002918:	08002aad 	.word	0x08002aad
 800291c:	08002aad 	.word	0x08002aad
 8002920:	08002aad 	.word	0x08002aad
 8002924:	08002aad 	.word	0x08002aad
 8002928:	08002a4d 	.word	0x08002a4d
 800292c:	08002a6d 	.word	0x08002a6d
 8002930:	08002a8d 	.word	0x08002a8d

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002940:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002942:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002944:	f001 f999 	bl	8003c7a <VL53L1_preset_mode_standard_ranging>
 8002948:	4603      	mov	r3, r0
 800294a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800294e:	e0b1      	b.n	8002ab4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800295c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800295e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002960:	f001 faa9 	bl	8003eb6 <VL53L1_preset_mode_standard_ranging_short_range>
 8002964:	4603      	mov	r3, r0
 8002966:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800296a:	e0a3      	b.n	8002ab4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002978:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800297a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800297c:	f001 fadc 	bl	8003f38 <VL53L1_preset_mode_standard_ranging_long_range>
 8002980:	4603      	mov	r3, r0
 8002982:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8002986:	e095      	b.n	8002ab4 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	9301      	str	r3, [sp, #4]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002994:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002996:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002998:	f001 fb0f 	bl	8003fba <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800299c:	4603      	mov	r3, r0
 800299e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80029a2:	e087      	b.n	8002ab4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80029b4:	f001 fb26 	bl	8004004 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80029be:	e079      	b.n	8002ab4 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	9301      	str	r3, [sp, #4]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80029d0:	f001 fb3d 	bl	800404e <VL53L1_preset_mode_timed_ranging>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80029da:	e06b      	b.n	8002ab4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	9301      	str	r3, [sp, #4]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80029ec:	f001 fb69 	bl	80040c2 <VL53L1_preset_mode_timed_ranging_short_range>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80029f6:	e05d      	b.n	8002ab4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a08:	f001 fb95 	bl	8004136 <VL53L1_preset_mode_timed_ranging_long_range>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8002a12:	e04f      	b.n	8002ab4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a24:	f001 fc69 	bl	80042fa <VL53L1_preset_mode_olt>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8002a2e:	e041      	b.n	8002ab4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	9301      	str	r3, [sp, #4]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a40:	f001 fc25 	bl	800428e <VL53L1_preset_mode_singleshot_ranging>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8002a4a:	e033      	b.n	8002ab4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	9302      	str	r3, [sp, #8]
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a60:	f001 fbc9 	bl	80041f6 <VL53L1_preset_mode_low_power_auto_short_ranging>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8002a6a:	e023      	b.n	8002ab4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	9302      	str	r3, [sp, #8]
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	9301      	str	r3, [sp, #4]
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a80:	f001 fb93 	bl	80041aa <VL53L1_preset_mode_low_power_auto_ranging>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8002a8a:	e013      	b.n	8002ab4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	9302      	str	r3, [sp, #8]
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002aa0:	f001 fbcf 	bl	8004242 <VL53L1_preset_mode_low_power_auto_long_ranging>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8002aaa:	e003      	b.n	8002ab4 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8002aac:	23fc      	movs	r3, #252	@ 0xfc
 8002aae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 8002ab2:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8002ab4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 8002abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002abe:	893a      	ldrh	r2, [r7, #8]
 8002ac0:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac4:	893a      	ldrh	r2, [r7, #8]
 8002ac6:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 8002ac8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d108      	bne.n	8002ae2 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 8002ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ad2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f7ff fca2 	bl	8002420 <VL53L1_set_timeouts_us>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8002ae2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 8002aea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f7ff fc48 	bl	8002382 <VL53L1_set_inter_measurement_period_ms>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 8002af8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3738      	adds	r7, #56	@ 0x38
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	@ 0x1a6
	*plite_sigma =
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8002b20:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	887a      	ldrh	r2, [r7, #2]
 8002b48:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 8002b4c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	@ 0x1a8
	*plite_mincountrate =
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8002b78:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002b94:	2300      	movs	r3, #0
 8002b96:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	f8a3 21a8 	strh.w	r2, [r3, #424]	@ 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8002ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 8002be4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b0d0      	sub	sp, #320	@ 0x140
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002bfe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c02:	6018      	str	r0, [r3, #0]
 8002c04:	4608      	mov	r0, r1
 8002c06:	4611      	mov	r1, r2
 8002c08:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c0c:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8002c10:	4602      	mov	r2, r0
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c18:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002c1c:	460a      	mov	r2, r1
 8002c1e:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002c26:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c2a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8002c34:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002c38:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8002c3c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8002c40:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002c44:	3342      	adds	r3, #66	@ 0x42
 8002c46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8002c4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002c4e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002c52:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8002c56:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002c5a:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8002c5e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8002c62:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002c66:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8002c6a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8002c6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002c72:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8002c76:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8002c7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002c7e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002c82:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8002c86:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002c8a:	332c      	adds	r3, #44	@ 0x2c
 8002c8c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8002c90:	f107 030c 	add.w	r3, r7, #12
 8002c94:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	uint16_t i                          = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	uint16_t i2c_index                  = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 8002cb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002cb4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002cb8:	f2a2 123d 	subw	r2, r2, #317	@ 0x13d
 8002cbc:	7812      	ldrb	r2, [r2, #0]
 8002cbe:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8002cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc4:	791b      	ldrb	r3, [r3, #4]
 8002cc6:	b25b      	sxtb	r3, r3
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8002cce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cd2:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8002cd6:	f993 3000 	ldrsb.w	r3, [r3]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	b25b      	sxtb	r3, r3
 8002cde:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8002ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce4:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8002ce6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002cea:	f8b3 2142 	ldrh.w	r2, [r3, #322]	@ 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8002cee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002cf2:	f8a3 217c 	strh.w	r2, [r3, #380]	@ 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8002cf6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002cfa:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8002cfe:	2bff      	cmp	r3, #255	@ 0xff
 8002d00:	d104      	bne.n	8002d0c <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8002d02:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8002d0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002d10:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d139      	bne.n	8002d8c <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8002d18:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002d1c:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d133      	bne.n	8002d8c <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8002d24:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002d28:	f893 2186 	ldrb.w	r2, [r3, #390]	@ 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 8002d2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002d30:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8002d34:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 8002d3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002d42:	f893 31c5 	ldrb.w	r3, [r3, #453]	@ 0x1c5
 8002d46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10c      	bne.n	8002d68 <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 8002d4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002d52:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	@ 0x58
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 8002d5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002d62:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 8002d66:	e004      	b.n	8002d72 <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8002d68:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 8002d72:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d76:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d805      	bhi.n	8002d8c <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8002d80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d84:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002d88:	2205      	movs	r2, #5
 8002d8a:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8002d8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002d90:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d113      	bne.n	8002dc0 <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8002d98:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002d9c:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d10d      	bne.n	8002dc0 <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8002da4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002da8:	f893 22e7 	ldrb.w	r2, [r3, #743]	@ 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 8002dac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002db0:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8002db4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002db8:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002dbc:	2206      	movs	r2, #6
 8002dbe:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 8002dc0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002dc4:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	2b05      	cmp	r3, #5
 8002dce:	d827      	bhi.n	8002e20 <VL53L1_init_and_start_range+0x22c>
 8002dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd8 <VL53L1_init_and_start_range+0x1e4>)
 8002dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd6:	bf00      	nop
 8002dd8:	08002e19 	.word	0x08002e19
 8002ddc:	08002e11 	.word	0x08002e11
 8002de0:	08002e09 	.word	0x08002e09
 8002de4:	08002e01 	.word	0x08002e01
 8002de8:	08002df9 	.word	0x08002df9
 8002dec:	08002df1 	.word	0x08002df1
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8002df0:	2301      	movs	r3, #1
 8002df2:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8002df6:	e017      	b.n	8002e28 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8002df8:	230d      	movs	r3, #13
 8002dfa:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8002dfe:	e013      	b.n	8002e28 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8002e00:	2324      	movs	r3, #36	@ 0x24
 8002e02:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8002e06:	e00f      	b.n	8002e28 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8002e08:	2344      	movs	r3, #68	@ 0x44
 8002e0a:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8002e0e:	e00b      	b.n	8002e28 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8002e10:	235a      	movs	r3, #90	@ 0x5a
 8002e12:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8002e16:	e007      	b.n	8002e28 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8002e18:	2371      	movs	r3, #113	@ 0x71
 8002e1a:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8002e1e:	e003      	b.n	8002e28 <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8002e20:	2383      	movs	r3, #131	@ 0x83
 8002e22:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8002e26:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8002e28:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8002e2c:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 8002e30:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 8002e34:	f107 030c 	add.w	r3, r7, #12
 8002e38:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8002e42:	e00b      	b.n	8002e5c <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 8002e44:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	f8c7 2138 	str.w	r2, [r7, #312]	@ 0x138
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8002e52:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8002e56:	3301      	adds	r3, #1
 8002e58:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8002e5c:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8002e60:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d3ed      	bcc.n	8002e44 <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8002e68:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002e6c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b05      	cmp	r3, #5
 8002e74:	d917      	bls.n	8002ea6 <VL53L1_init_and_start_range+0x2b2>
 8002e76:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d113      	bne.n	8002ea6 <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8002e7e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8002e82:	f1c3 0301 	rsb	r3, r3, #1
 8002e86:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8002e8a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8002e8e:	f107 020c 	add.w	r2, r7, #12
 8002e92:	4413      	add	r3, r2
 8002e94:	461a      	mov	r2, r3
 8002e96:	210b      	movs	r1, #11
 8002e98:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8002e9c:	f002 f974 	bl	8005188 <VL53L1_i2c_encode_static_nvm_managed>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8002ea6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002eaa:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d917      	bls.n	8002ee4 <VL53L1_init_and_start_range+0x2f0>
 8002eb4:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d113      	bne.n	8002ee4 <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8002ebc:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8002ec0:	f1c3 030d 	rsb	r3, r3, #13
 8002ec4:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8002ec8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8002ecc:	f107 020c 	add.w	r2, r7, #12
 8002ed0:	4413      	add	r3, r2
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2117      	movs	r1, #23
 8002ed6:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8002eda:	f002 fa31 	bl	8005340 <VL53L1_i2c_encode_customer_nvm_managed>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8002ee4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ee8:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d917      	bls.n	8002f22 <VL53L1_init_and_start_range+0x32e>
 8002ef2:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d113      	bne.n	8002f22 <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8002efa:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8002efe:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8002f02:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8002f06:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_config(
 8002f0a:	f107 020c 	add.w	r2, r7, #12
 8002f0e:	4413      	add	r3, r2
 8002f10:	461a      	mov	r2, r3
 8002f12:	2120      	movs	r1, #32
 8002f14:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8002f18:	f002 fb50 	bl	80055bc <VL53L1_i2c_encode_static_config>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8002f22:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f26:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d917      	bls.n	8002f60 <VL53L1_init_and_start_range+0x36c>
 8002f30:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d113      	bne.n	8002f60 <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8002f38:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8002f3c:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8002f40:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8002f44:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_general_config(
 8002f48:	f107 020c 	add.w	r2, r7, #12
 8002f4c:	4413      	add	r3, r2
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2116      	movs	r1, #22
 8002f52:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8002f56:	f002 fc14 	bl	8005782 <VL53L1_i2c_encode_general_config>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8002f60:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f64:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d917      	bls.n	8002f9e <VL53L1_init_and_start_range+0x3aa>
 8002f6e:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d113      	bne.n	8002f9e <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8002f76:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8002f7a:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8002f7e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8002f82:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_timing_config(
 8002f86:	f107 020c 	add.w	r2, r7, #12
 8002f8a:	4413      	add	r3, r2
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	2117      	movs	r1, #23
 8002f90:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8002f94:	f002 fc79 	bl	800588a <VL53L1_i2c_encode_timing_config>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8002f9e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002fa2:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d036      	beq.n	800301a <VL53L1_init_and_start_range+0x426>
 8002fac:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d132      	bne.n	800301a <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8002fb4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8002fb8:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 8002fbc:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 8002fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc4:	791b      	ldrb	r3, [r3, #4]
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d017      	beq.n	8002ffe <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8002fce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002fd2:	789b      	ldrb	r3, [r3, #2]
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002fde:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8002fe0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002fe4:	789b      	ldrb	r3, [r3, #2]
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002ff0:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 8002ff2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ff6:	789a      	ldrb	r2, [r3, #2]
 8002ff8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002ffc:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8002ffe:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8003002:	f107 020c 	add.w	r2, r7, #12
 8003006:	4413      	add	r3, r2
 8003008:	461a      	mov	r2, r3
 800300a:	2112      	movs	r1, #18
 800300c:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8003010:	f002 fcbd 	bl	800598e <VL53L1_i2c_encode_dynamic_config>
 8003014:	4603      	mov	r3, r0
 8003016:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800301a:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800301e:	2b00      	cmp	r3, #0
 8003020:	d113      	bne.n	800304a <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 8003022:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8003026:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 800302a:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800302e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_system_control(
 8003032:	f107 020c 	add.w	r2, r7, #12
 8003036:	4413      	add	r3, r2
 8003038:	461a      	mov	r2, r3
 800303a:	2105      	movs	r1, #5
 800303c:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8003040:	f002 fd2a 	bl	8005a98 <VL53L1_i2c_encode_system_control>
 8003044:	4603      	mov	r3, r0
 8003046:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800304a:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10f      	bne.n	8003072 <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 8003052:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8003056:	f107 020c 	add.w	r2, r7, #12
 800305a:	f8b7 1134 	ldrh.w	r1, [r7, #308]	@ 0x134
 800305e:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8003062:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 8003066:	6800      	ldr	r0, [r0, #0]
 8003068:	f001 ffec 	bl	8005044 <VL53L1_WriteMulti>
 800306c:	4603      	mov	r3, r0
 800306e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 8003072:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800307a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800307e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	f001 f9a0 	bl	80043c8 <VL53L1_update_ll_driver_rd_state>
 8003088:	4603      	mov	r3, r0
 800308a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	if (status == VL53L1_ERROR_NONE)
 800308e:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8003096:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800309a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	f001 fa65 	bl	800456e <VL53L1_update_ll_driver_cfg_state>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	LOG_FUNCTION_END(status);

	return status;
 80030aa:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b0c8      	sub	sp, #288	@ 0x120
 80030bc:	af00      	add	r7, sp, #0
 80030be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80030c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80030c6:	6018      	str	r0, [r3, #0]
 80030c8:	460a      	mov	r2, r1
 80030ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80030ce:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80030d2:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80030da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80030de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 80030e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80030ec:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 80030f0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 80030f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80030f8:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80030fc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8003100:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003104:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8003108:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800310c:	2388      	movs	r3, #136	@ 0x88
 800310e:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800311e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003122:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d008      	beq.n	800313e <VL53L1_get_measurement_results+0x86>
 800312c:	2b02      	cmp	r3, #2
 800312e:	d10d      	bne.n	800314c <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8003130:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8003134:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 8003138:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800313c:	e00a      	b.n	8003154 <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800313e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8003142:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 8003146:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800314a:	e003      	b.n	8003154 <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 800314c:	232c      	movs	r3, #44	@ 0x2c
 800314e:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8003152:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8003154:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10f      	bne.n	800317c <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 800315c:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8003160:	f107 0208 	add.w	r2, r7, #8
 8003164:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 8003168:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 800316c:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 8003170:	6800      	ldr	r0, [r0, #0]
 8003172:	f001 ff93 	bl	800509c <VL53L1_ReadMulti>
 8003176:	4603      	mov	r3, r0
 8003178:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800317c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003180:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d917      	bls.n	80031ba <VL53L1_get_measurement_results+0x102>
 800318a:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800318e:	2b00      	cmp	r3, #0
 8003190:	d113      	bne.n	80031ba <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8003192:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8003196:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 800319a:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800319e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_debug_results(
 80031a2:	f107 0208 	add.w	r2, r7, #8
 80031a6:	4413      	add	r3, r2
 80031a8:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80031ac:	4619      	mov	r1, r3
 80031ae:	2038      	movs	r0, #56	@ 0x38
 80031b0:	f002 fe04 	bl	8005dbc <VL53L1_i2c_decode_debug_results>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 80031ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80031be:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d017      	beq.n	80031f8 <VL53L1_get_measurement_results+0x140>
 80031c8:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d113      	bne.n	80031f8 <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80031d0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80031d4:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 80031d8:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80031dc:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_core_results(
 80031e0:	f107 0208 	add.w	r2, r7, #8
 80031e4:	4413      	add	r3, r2
 80031e6:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80031ea:	4619      	mov	r1, r3
 80031ec:	2021      	movs	r0, #33	@ 0x21
 80031ee:	f002 fd84 	bl	8005cfa <VL53L1_i2c_decode_core_results>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 80031f8:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d110      	bne.n	8003222 <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8003206:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_system_results(
 800320a:	f107 0208 	add.w	r2, r7, #8
 800320e:	4413      	add	r3, r2
 8003210:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003214:	4619      	mov	r1, r3
 8003216:	202c      	movs	r0, #44	@ 0x2c
 8003218:	f002 fc79 	bl	8005b0e <VL53L1_i2c_decode_system_results>
 800321c:	4603      	mov	r3, r0
 800321e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8003222:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 8003226:	4618      	mov	r0, r3
 8003228:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	460b      	mov	r3, r1
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800323e:	2300      	movs	r3, #0
 8003240:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 800324c:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8003252:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800325a:	7afb      	ldrb	r3, [r7, #11]
 800325c:	4619      	mov	r1, r3
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f7ff ff2a 	bl	80030b8 <VL53L1_get_measurement_results>
 8003264:	4603      	mov	r3, r0
 8003266:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 8003268:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10c      	bne.n	800328a <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 8003276:	4618      	mov	r0, r3
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	f503 71e7 	add.w	r1, r3, #462	@ 0x1ce
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f000 f85d 	bl	8003344 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8003290:	2b01      	cmp	r3, #1
 8003292:	d11f      	bne.n	80032d4 <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 8003294:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10e      	bne.n	80032ba <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f001 fe31 	bl	8004f0e <VL53L1_low_power_auto_setup_manual_calibration>
 80032ac:	4603      	mov	r3, r0
 80032ae:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
 80032b8:	e00c      	b.n	80032d4 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 80032ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d108      	bne.n	80032d4 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d103      	bne.n	80032d4 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 80032e8:	2284      	movs	r2, #132	@ 0x84
 80032ea:	6939      	ldr	r1, [r7, #16]
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f008 f8e6 	bl	800b4be <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 80032f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d104      	bne.n	8003304 <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f001 f8ec 	bl	80044d8 <VL53L1_check_ll_driver_rd_state>
 8003300:	4603      	mov	r3, r0
 8003302:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8003304:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800331c:	2300      	movs	r3, #0
 800331e:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8003320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d107      	bne.n	8003338 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	2203      	movs	r2, #3
 800332c:	4619      	mov	r1, r3
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff fc60 	bl	8002bf4 <VL53L1_init_and_start_range>
 8003334:	4603      	mov	r3, r0
 8003336:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8003338:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8003344:	b480      	push	{r7}
 8003346:	b089      	sub	sp, #36	@ 0x24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	78da      	ldrb	r2, [r3, #3]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	3304      	adds	r3, #4
 800336a:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800336c:	2300      	movs	r3, #0
 800336e:	77fb      	strb	r3, [r7, #31]
 8003370:	e0d0      	b.n	8003514 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	7ffa      	ldrb	r2, [r7, #31]
 8003376:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2200      	movs	r2, #0
 800337c:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	78db      	ldrb	r3, [r3, #3]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	785b      	ldrb	r3, [r3, #1]
 800338a:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800338e:	2b09      	cmp	r3, #9
 8003390:	d104      	bne.n	800339c <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2213      	movs	r2, #19
 8003396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800339a:	e007      	b.n	80033ac <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	785b      	ldrb	r3, [r3, #1]
 80033a0:	f003 031f 	and.w	r3, r3, #31
 80033a4:	b2da      	uxtb	r2, r3
			pdata->range_status =
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		}

		switch (i) {
 80033ac:	7ffb      	ldrb	r3, [r7, #31]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d05d      	beq.n	8003472 <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 80033b6:	e0a7      	b.n	8003508 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	789b      	ldrb	r3, [r3, #2]
 80033bc:	2b07      	cmp	r3, #7
 80033be:	d104      	bne.n	80033ca <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	821a      	strh	r2, [r3, #16]
 80033c8:	e00c      	b.n	80033e4 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	789b      	ldrb	r3, [r3, #2]
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	d104      	bne.n	80033dc <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	821a      	strh	r2, [r3, #16]
 80033da:	e003      	b.n	80033e4 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	895b      	ldrh	r3, [r3, #10]
 8003400:	015b      	lsls	r3, r3, #5
 8003402:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800340a:	d302      	bcc.n	8003412 <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 800340c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003410:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	b29a      	uxth	r2, r3
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 8003426:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	fb02 f303 	mul.w	r3, r2, r3
 8003430:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003438:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	da01      	bge.n	8003444 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 8003440:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8003444:	12db      	asrs	r3, r3, #11
 8003446:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	b21a      	sxth	r2, r3
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	621a      	str	r2, [r3, #32]

			break;
 8003470:	e04a      	b.n	8003508 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003488:	85da      	strh	r2, [r3, #46]	@ 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	8bdb      	ldrh	r3, [r3, #30]
 8003496:	015b      	lsls	r3, r3, #5
 8003498:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034a0:	d302      	bcc.n	80034a8 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 80034a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034a6:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm =
 80034bc:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	fb02 f303 	mul.w	r3, r2, r3
 80034c6:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034ce:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	da01      	bge.n	80034da <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 80034d6:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80034da:	12db      	asrs	r3, r3, #11
 80034dc:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	b21a      	sxth	r2, r3
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	621a      	str	r2, [r3, #32]

			break;
 8003506:	bf00      	nop
		}

		pdata++;
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	3340      	adds	r3, #64	@ 0x40
 800350c:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800350e:	7ffb      	ldrb	r3, [r7, #31]
 8003510:	3301      	adds	r3, #1
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	7ffb      	ldrb	r3, [r7, #31]
 8003516:	2b01      	cmp	r3, #1
 8003518:	f67f af2b 	bls.w	8003372 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2200      	movs	r2, #0
 8003520:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	785b      	ldrb	r3, [r3, #1]
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	2b11      	cmp	r3, #17
 800352c:	bf8c      	ite	hi
 800352e:	2201      	movhi	r2, #1
 8003530:	2200      	movls	r2, #0
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	2a00      	cmp	r2, #0
 8003536:	d117      	bne.n	8003568 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
 8003538:	4a0e      	ldr	r2, [pc, #56]	@ (8003574 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 800353a:	fa22 f303 	lsr.w	r3, r2, r3
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	bf14      	ite	ne
 8003546:	2301      	movne	r3, #1
 8003548:	2300      	moveq	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00b      	beq.n	8003568 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	785b      	ldrb	r3, [r3, #1]
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	b2da      	uxtb	r2, r3
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	break;
 8003566:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8003568:	bf00      	nop
 800356a:	3724      	adds	r7, #36	@ 0x24
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	0002200e 	.word	0x0002200e

08003578 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	460b      	mov	r3, r1
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003586:	2300      	movs	r3, #0
 8003588:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800358e:	897b      	ldrh	r3, [r7, #10]
 8003590:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8003594:	2b38      	cmp	r3, #56	@ 0x38
 8003596:	f200 8204 	bhi.w	80039a2 <VL53L1_get_tuning_parm+0x42a>
 800359a:	a201      	add	r2, pc, #4	@ (adr r2, 80035a0 <VL53L1_get_tuning_parm+0x28>)
 800359c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a0:	08003685 	.word	0x08003685
 80035a4:	08003693 	.word	0x08003693
 80035a8:	080036a1 	.word	0x080036a1
 80035ac:	080036af 	.word	0x080036af
 80035b0:	080036bd 	.word	0x080036bd
 80035b4:	080036cb 	.word	0x080036cb
 80035b8:	080036d9 	.word	0x080036d9
 80035bc:	080036e7 	.word	0x080036e7
 80035c0:	080036f5 	.word	0x080036f5
 80035c4:	08003703 	.word	0x08003703
 80035c8:	08003711 	.word	0x08003711
 80035cc:	0800371f 	.word	0x0800371f
 80035d0:	0800372d 	.word	0x0800372d
 80035d4:	0800373b 	.word	0x0800373b
 80035d8:	08003749 	.word	0x08003749
 80035dc:	08003757 	.word	0x08003757
 80035e0:	08003765 	.word	0x08003765
 80035e4:	08003773 	.word	0x08003773
 80035e8:	08003781 	.word	0x08003781
 80035ec:	0800378f 	.word	0x0800378f
 80035f0:	0800379d 	.word	0x0800379d
 80035f4:	080037ab 	.word	0x080037ab
 80035f8:	080037b9 	.word	0x080037b9
 80035fc:	080037c7 	.word	0x080037c7
 8003600:	080037d5 	.word	0x080037d5
 8003604:	080037e3 	.word	0x080037e3
 8003608:	080037f1 	.word	0x080037f1
 800360c:	080037ff 	.word	0x080037ff
 8003610:	0800380d 	.word	0x0800380d
 8003614:	0800381b 	.word	0x0800381b
 8003618:	08003829 	.word	0x08003829
 800361c:	08003837 	.word	0x08003837
 8003620:	08003845 	.word	0x08003845
 8003624:	08003853 	.word	0x08003853
 8003628:	08003861 	.word	0x08003861
 800362c:	0800386f 	.word	0x0800386f
 8003630:	0800387d 	.word	0x0800387d
 8003634:	0800388b 	.word	0x0800388b
 8003638:	08003899 	.word	0x08003899
 800363c:	080038a7 	.word	0x080038a7
 8003640:	080038b5 	.word	0x080038b5
 8003644:	080038c3 	.word	0x080038c3
 8003648:	080038d1 	.word	0x080038d1
 800364c:	080038df 	.word	0x080038df
 8003650:	080038ed 	.word	0x080038ed
 8003654:	080038fb 	.word	0x080038fb
 8003658:	08003909 	.word	0x08003909
 800365c:	08003917 	.word	0x08003917
 8003660:	08003925 	.word	0x08003925
 8003664:	08003933 	.word	0x08003933
 8003668:	08003941 	.word	0x08003941
 800366c:	0800394f 	.word	0x0800394f
 8003670:	0800395d 	.word	0x0800395d
 8003674:	0800396b 	.word	0x0800396b
 8003678:	08003979 	.word	0x08003979
 800367c:	08003987 	.word	0x08003987
 8003680:	08003995 	.word	0x08003995

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800368a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	601a      	str	r2, [r3, #0]
	break;
 8003690:	e18e      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8003698:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	601a      	str	r2, [r3, #0]
	break;
 800369e:	e187      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 80036a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	601a      	str	r2, [r3, #0]
	break;
 80036ac:	e180      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80036b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	601a      	str	r2, [r3, #0]
	break;
 80036ba:	e179      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80036c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	601a      	str	r2, [r3, #0]
	break;
 80036c8:	e172      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 80036d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	601a      	str	r2, [r3, #0]
	break;
 80036d6:	e16b      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80036de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	601a      	str	r2, [r3, #0]
	break;
 80036e4:	e164      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 80036ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	601a      	str	r2, [r3, #0]
	break;
 80036f2:	e15d      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	@ 0xb6
 80036fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	601a      	str	r2, [r3, #0]
	break;
 8003700:	e156      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8003708:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	601a      	str	r2, [r3, #0]
	break;
 800370e:	e14f      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8003716:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	601a      	str	r2, [r3, #0]
	break;
 800371c:	e148      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8003724:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	601a      	str	r2, [r3, #0]
	break;
 800372a:	e141      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 8003732:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	601a      	str	r2, [r3, #0]
	break;
 8003738:	e13a      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	@ 0xc0
 8003740:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	601a      	str	r2, [r3, #0]
	break;
 8003746:	e133      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 800374e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	601a      	str	r2, [r3, #0]
	break;
 8003754:	e12c      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 800375c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	601a      	str	r2, [r3, #0]
	break;
 8003762:	e125      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f893 30c4 	ldrb.w	r3, [r3, #196]	@ 0xc4
 800376a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	601a      	str	r2, [r3, #0]
	break;
 8003770:	e11e      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 8003778:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	601a      	str	r2, [r3, #0]
	break;
 800377e:	e117      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8003786:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	601a      	str	r2, [r3, #0]
	break;
 800378c:	e110      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f893 30c7 	ldrb.w	r3, [r3, #199]	@ 0xc7
 8003794:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	601a      	str	r2, [r3, #0]
	break;
 800379a:	e109      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 80037a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	601a      	str	r2, [r3, #0]
	break;
 80037a8:	e102      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	@ 0x13e
 80037b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	601a      	str	r2, [r3, #0]
	break;
 80037b6:	e0fb      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 80037be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	601a      	str	r2, [r3, #0]
	break;
 80037c4:	e0f4      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f893 30ab 	ldrb.w	r3, [r3, #171]	@ 0xab
 80037cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	601a      	str	r2, [r3, #0]
	break;
 80037d2:	e0ed      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80037da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	601a      	str	r2, [r3, #0]
	break;
 80037e0:	e0e6      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80037e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	601a      	str	r2, [r3, #0]
	break;
 80037ee:	e0df      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 80037f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	601a      	str	r2, [r3, #0]
	break;
 80037fc:	e0d8      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 8003804:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	601a      	str	r2, [r3, #0]
	break;
 800380a:	e0d1      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f893 30c6 	ldrb.w	r3, [r3, #198]	@ 0xc6
 8003812:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	601a      	str	r2, [r3, #0]
	break;
 8003818:	e0ca      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8003820:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	601a      	str	r2, [r3, #0]
	break;
 8003826:	e0c3      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800382e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	601a      	str	r2, [r3, #0]
	break;
 8003834:	e0bc      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 800383c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	601a      	str	r2, [r3, #0]
	break;
 8003842:	e0b5      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800384a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	601a      	str	r2, [r3, #0]
	break;
 8003850:	e0ae      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 8003858:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	601a      	str	r2, [r3, #0]
	break;
 800385e:	e0a7      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8003866:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	601a      	str	r2, [r3, #0]
	break;
 800386c:	e0a0      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8003874:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	601a      	str	r2, [r3, #0]
	break;
 800387a:	e099      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8003882:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	601a      	str	r2, [r3, #0]
	break;
 8003888:	e092      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003890:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	601a      	str	r2, [r3, #0]
	break;
 8003896:	e08b      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800389e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	601a      	str	r2, [r3, #0]
	break;
 80038a4:	e084      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80038ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	601a      	str	r2, [r3, #0]
	break;
 80038b2:	e07d      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 80038ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	601a      	str	r2, [r3, #0]
	break;
 80038c0:	e076      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f893 3155 	ldrb.w	r3, [r3, #341]	@ 0x155
 80038c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	601a      	str	r2, [r3, #0]
	break;
 80038ce:	e06f      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f893 3156 	ldrb.w	r3, [r3, #342]	@ 0x156
 80038d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	601a      	str	r2, [r3, #0]
	break;
 80038dc:	e068      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f893 3121 	ldrb.w	r3, [r3, #289]	@ 0x121
 80038e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	601a      	str	r2, [r3, #0]
	break;
 80038ea:	e061      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 80038f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	601a      	str	r2, [r3, #0]
	break;
 80038f8:	e05a      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f8b3 3128 	ldrh.w	r3, [r3, #296]	@ 0x128
 8003900:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	601a      	str	r2, [r3, #0]
	break;
 8003906:	e053      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 800390e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	601a      	str	r2, [r3, #0]
	break;
 8003914:	e04c      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 800391c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	601a      	str	r2, [r3, #0]
	break;
 8003922:	e045      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800392a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	601a      	str	r2, [r3, #0]
	break;
 8003930:	e03e      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003938:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	601a      	str	r2, [r3, #0]
	break;
 800393e:	e037      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003946:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	601a      	str	r2, [r3, #0]
	break;
 800394c:	e030      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003954:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	601a      	str	r2, [r3, #0]
	break;
 800395a:	e029      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003962:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	601a      	str	r2, [r3, #0]
	break;
 8003968:	e022      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003970:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	601a      	str	r2, [r3, #0]
	break;
 8003976:	e01b      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 800397e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	601a      	str	r2, [r3, #0]
	break;
 8003984:	e014      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800398c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	601a      	str	r2, [r3, #0]
	break;
 8003992:	e00d      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800399a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	601a      	str	r2, [r3, #0]
	break;
 80039a0:	e006      	b.n	80039b0 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80039a8:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 80039aa:	23fc      	movs	r3, #252	@ 0xfc
 80039ac:	75fb      	strb	r3, [r7, #23]
	break;
 80039ae:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80039b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	371c      	adds	r7, #28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80039c8:	2300      	movs	r3, #0
 80039ca:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2208      	movs	r2, #8
 80039d0:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	220b      	movs	r2, #11
 80039d6:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80039de:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80039e6:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80039ee:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80039f6:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80039f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2212      	movs	r2, #18
 8003a1e:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	220f      	movs	r2, #15
 8003a24:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2202      	movs	r2, #2
 8003a2a:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8003a32:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	220c      	movs	r2, #12
 8003a38:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8003a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a54:	2300      	movs	r3, #0
 8003a56:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	895b      	ldrh	r3, [r3, #10]
 8003a5c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	895b      	ldrh	r3, [r3, #10]
 8003a7a:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2200      	movs	r2, #0
 8003a98:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2240      	movs	r2, #64	@ 0x40
 8003a9e:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10d      	bne.n	8003ac4 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d108      	bne.n	8003ac4 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d103      	bne.n	8003ac4 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	741a      	strb	r2, [r3, #16]
 8003ac2:	e002      	b.n	8003aca <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 8003aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d114      	bne.n	8003afc <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d110      	bne.n	8003afc <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	7d1b      	ldrb	r3, [r3, #20]
 8003aee:	f000 ffc9 	bl	8004a84 <VL53L1_calc_range_ignore_threshold>
 8003af2:	4603      	mov	r3, r0
 8003af4:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	82da      	strh	r2, [r3, #22]
 8003afa:	e002      	b.n	8003b02 <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2200      	movs	r2, #0
 8003b00:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 8003b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b085      	sub	sp, #20
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003b16:	2300      	movs	r3, #0
 8003b18:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8003b20:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b28:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8003b30:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8003b38:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2228      	movs	r2, #40	@ 0x28
 8003b44:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2209      	movs	r2, #9
 8003b4a:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8003b4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f248 0203 	movw	r2, #32771	@ 0x8003
 8003b6e:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f248 0201 	movw	r2, #32769	@ 0x8001
 8003b76:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f248 0241 	movw	r2, #32833	@ 0x8041
 8003b7e:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	220e      	movs	r2, #14
 8003b84:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	220a      	movs	r2, #10
 8003b8a:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2206      	movs	r2, #6
 8003b90:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	220e      	movs	r2, #14
 8003b96:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	220a      	movs	r2, #10
 8003b9c:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2206      	movs	r2, #6
 8003ba2:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2221      	movs	r2, #33	@ 0x21
 8003bae:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8003bc2:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8003bca:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8003bd2:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	22c0      	movs	r2, #192	@ 0xc0
 8003bd8:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	22c0      	movs	r2, #192	@ 0xc0
 8003bde:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	22c0      	movs	r2, #192	@ 0xc0
 8003be4:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2208      	movs	r2, #8
 8003bea:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2210      	movs	r2, #16
 8003bf0:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8003c20:	84da      	strh	r2, [r3, #38]	@ 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8003c28:	851a      	strh	r2, [r3, #40]	@ 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f248 0230 	movw	r2, #32816	@ 0x8030
 8003c30:	62da      	str	r2, [r3, #44]	@ 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c38:	631a      	str	r2, [r3, #48]	@ 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003c40:	635a      	str	r2, [r3, #52]	@ 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003c48:	639a      	str	r2, [r3, #56]	@ 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f24f 6218 	movw	r2, #63000	@ 0xf618
 8003c50:	641a      	str	r2, [r3, #64]	@ 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8003c58:	645a      	str	r2, [r3, #68]	@ 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8003c60:	63da      	str	r2, [r3, #60]	@ 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8003c68:	649a      	str	r2, [r3, #72]	@ 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8003c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b087      	sub	sp, #28
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	607a      	str	r2, [r7, #4]
 8003c86:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8003c92:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2211      	movs	r2, #17
 8003cd4:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2208      	movs	r2, #8
 8003cec:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf6:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	22ff      	movs	r2, #255	@ 0xff
 8003d2a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2e:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8003d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d36:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2200      	movs	r2, #0
 8003d58:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	220b      	movs	r2, #11
 8003d64:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8003d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d68:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2202      	movs	r2, #2
 8003d72:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	220d      	movs	r2, #13
 8003d78:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2200      	movs	r2, #0
 8003d86:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2200      	movs	r2, #0
 8003d92:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2200      	movs	r2, #0
 8003d98:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 8003da0:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2200      	movs	r2, #0
 8003da6:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2238      	movs	r2, #56	@ 0x38
 8003dac:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	22ff      	movs	r2, #255	@ 0xff
 8003db2:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2201      	movs	r2, #1
 8003db8:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	221a      	movs	r2, #26
 8003dc4:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	22cc      	movs	r2, #204	@ 0xcc
 8003ddc:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	220b      	movs	r2, #11
 8003de2:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	22f5      	movs	r2, #245	@ 0xf5
 8003dee:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2209      	movs	r2, #9
 8003df4:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8003df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df8:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2208      	movs	r2, #8
 8003e0a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2278      	movs	r2, #120	@ 0x78
 8003e10:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2200      	movs	r2, #0
 8003e28:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2200      	movs	r2, #0
 8003e34:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
	pdynamic->system__seed_config =
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	220b      	movs	r2, #11
 8003e44:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2209      	movs	r2, #9
 8003e4a:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 8003e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e56:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pdynamic->sd_config__first_order_select =
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
	pdynamic->sd_config__quantifier         =
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	22c7      	movs	r2, #199	@ 0xc7
 8003e7a:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	22ff      	movs	r2, #255	@ 0xff
 8003e80:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	22db      	movs	r2, #219	@ 0xdb
 8003e86:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	2200      	movs	r2, #0
 8003e92:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	2201      	movs	r2, #1
 8003e98:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	2221      	movs	r2, #33	@ 0x21
 8003ea4:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8003ea6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b088      	sub	sp, #32
 8003eba:	af02      	add	r7, sp, #8
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eca:	9301      	str	r3, [sp, #4]
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7ff fecf 	bl	8003c7a <VL53L1_preset_mode_standard_ranging>
 8003edc:	4603      	mov	r3, r0
 8003ede:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8003ee0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d121      	bne.n	8003f2c <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2207      	movs	r2, #7
 8003eec:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2205      	movs	r2, #5
 8003ef2:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8003efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efe:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2208      	movs	r2, #8
 8003f08:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2238      	movs	r2, #56	@ 0x38
 8003f0e:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	2207      	movs	r2, #7
 8003f14:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2205      	movs	r2, #5
 8003f1a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 8003f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f26:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8003f2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003f46:	2300      	movs	r3, #0
 8003f48:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4c:	9301      	str	r3, [sp, #4]
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f7ff fe8e 	bl	8003c7a <VL53L1_preset_mode_standard_ranging>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8003f62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d121      	bne.n	8003fae <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	220f      	movs	r2, #15
 8003f6e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	220d      	movs	r2, #13
 8003f74:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f80:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2208      	movs	r2, #8
 8003f8a:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	22b8      	movs	r2, #184	@ 0xb8
 8003f90:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	220f      	movs	r2, #15
 8003f96:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	220d      	movs	r2, #13
 8003f9c:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8003fae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b088      	sub	sp, #32
 8003fbe:	af02      	add	r7, sp, #8
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fce:	9301      	str	r3, [sp, #4]
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f7ff fe4d 	bl	8003c7a <VL53L1_preset_mode_standard_ranging>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8003fe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	223b      	movs	r2, #59	@ 0x3b
 8003ff6:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8003ff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004012:	2300      	movs	r3, #0
 8004014:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f7ff fe28 	bl	8003c7a <VL53L1_preset_mode_standard_ranging>
 800402a:	4603      	mov	r3, r0
 800402c:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800402e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d105      	bne.n	8004042 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2202      	movs	r2, #2
 800403a:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	225b      	movs	r2, #91	@ 0x5b
 8004040:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8004042:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b088      	sub	sp, #32
 8004052:	af02      	add	r7, sp, #8
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
 800405a:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800405c:	2300      	movs	r3, #0
 800405e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8004060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004062:	9301      	str	r3, [sp, #4]
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f7ff fe03 	bl	8003c7a <VL53L1_preset_mode_standard_ranging>
 8004074:	4603      	mov	r3, r0
 8004076:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004078:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d11a      	bne.n	80040b6 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2200      	movs	r2, #0
 8004084:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	22b1      	movs	r2, #177	@ 0xb1
 8004090:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	22d4      	movs	r2, #212	@ 0xd4
 800409c:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80040a4:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	2240      	movs	r2, #64	@ 0x40
 80040b4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80040b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b088      	sub	sp, #32
 80040c6:	af02      	add	r7, sp, #8
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	60b9      	str	r1, [r7, #8]
 80040cc:	607a      	str	r2, [r7, #4]
 80040ce:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80040d0:	2300      	movs	r3, #0
 80040d2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 80040d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68b9      	ldr	r1, [r7, #8]
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f7ff fee7 	bl	8003eb6 <VL53L1_preset_mode_standard_ranging_short_range>
 80040e8:	4603      	mov	r3, r0
 80040ea:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80040ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d11a      	bne.n	800412a <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2200      	movs	r2, #0
 80040f8:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2284      	movs	r2, #132	@ 0x84
 8004104:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	22b1      	movs	r2, #177	@ 0xb1
 8004110:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004118:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	2240      	movs	r2, #64	@ 0x40
 8004128:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800412a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b088      	sub	sp, #32
 800413a:	af02      	add	r7, sp, #8
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	607a      	str	r2, [r7, #4]
 8004142:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004144:	2300      	movs	r3, #0
 8004146:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	9301      	str	r3, [sp, #4]
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f7ff feee 	bl	8003f38 <VL53L1_preset_mode_standard_ranging_long_range>
 800415c:	4603      	mov	r3, r0
 800415e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004160:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d11a      	bne.n	800419e <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2200      	movs	r2, #0
 800416c:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2297      	movs	r2, #151	@ 0x97
 8004178:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	22b1      	movs	r2, #177	@ 0xb1
 8004184:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800418c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800418e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004190:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	2240      	movs	r2, #64	@ 0x40
 800419c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800419e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b088      	sub	sp, #32
 80041ae:	af02      	add	r7, sp, #8
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80041b8:	2300      	movs	r3, #0
 80041ba:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 80041bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f7ff ff3f 	bl	800404e <VL53L1_preset_mode_timed_ranging>
 80041d0:	4603      	mov	r3, r0
 80041d2:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80041d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d106      	bne.n	80041ea <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 80041dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041de:	6839      	ldr	r1, [r7, #0]
 80041e0:	68b8      	ldr	r0, [r7, #8]
 80041e2:	f000 fe7b 	bl	8004edc <VL53L1_config_low_power_auto_mode>
 80041e6:	4603      	mov	r3, r0
 80041e8:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 80041ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b088      	sub	sp, #32
 80041fa:	af02      	add	r7, sp, #8
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004204:	2300      	movs	r3, #0
 8004206:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	9301      	str	r3, [sp, #4]
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68b9      	ldr	r1, [r7, #8]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f7ff ff53 	bl	80040c2 <VL53L1_preset_mode_timed_ranging_short_range>
 800421c:	4603      	mov	r3, r0
 800421e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8004220:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d106      	bne.n	8004236 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8004228:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800422a:	6839      	ldr	r1, [r7, #0]
 800422c:	68b8      	ldr	r0, [r7, #8]
 800422e:	f000 fe55 	bl	8004edc <VL53L1_config_low_power_auto_mode>
 8004232:	4603      	mov	r3, r0
 8004234:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8004236:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b088      	sub	sp, #32
 8004246:	af02      	add	r7, sp, #8
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
 800424e:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004250:	2300      	movs	r3, #0
 8004252:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	68b9      	ldr	r1, [r7, #8]
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f7ff ff67 	bl	8004136 <VL53L1_preset_mode_timed_ranging_long_range>
 8004268:	4603      	mov	r3, r0
 800426a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800426c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d106      	bne.n	8004282 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8004274:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004276:	6839      	ldr	r1, [r7, #0]
 8004278:	68b8      	ldr	r0, [r7, #8]
 800427a:	f000 fe2f 	bl	8004edc <VL53L1_config_low_power_auto_mode>
 800427e:	4603      	mov	r3, r0
 8004280:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8004282:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b088      	sub	sp, #32
 8004292:	af02      	add	r7, sp, #8
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800429c:	2300      	movs	r3, #0
 800429e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 80042a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68b9      	ldr	r1, [r7, #8]
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f7ff fce3 	bl	8003c7a <VL53L1_preset_mode_standard_ranging>
 80042b4:	4603      	mov	r3, r0
 80042b6:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80042b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d116      	bne.n	80042ee <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2200      	movs	r2, #0
 80042c4:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	22b1      	movs	r2, #177	@ 0xb1
 80042d0:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	22d4      	movs	r2, #212	@ 0xd4
 80042dc:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	2210      	movs	r2, #16
 80042ec:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 80042ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b088      	sub	sp, #32
 80042fe:	af02      	add	r7, sp, #8
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]
 8004306:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004308:	2300      	movs	r3, #0
 800430a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	9301      	str	r3, [sp, #4]
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7ff fcad 	bl	8003c7a <VL53L1_preset_mode_standard_ranging>
 8004320:	4603      	mov	r3, r0
 8004322:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8004324:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d102      	bne.n	8004332 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	2201      	movs	r2, #1
 8004330:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 8004332:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800433e:	b480      	push	{r7}
 8004340:	b085      	sub	sp, #20
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2202      	movs	r2, #2
 8004356:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	220d      	movs	r2, #13
 800435e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f640 028e 	movw	r2, #2190	@ 0x88e
 8004368:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800436a:	bf00      	nop
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 8004376:	b480      	push	{r7}
 8004378:	b085      	sub	sp, #20
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	460b      	mov	r3, r1
 8004380:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	332c      	adds	r3, #44	@ 0x2c
 800438a:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	78fa      	ldrb	r2, [r7, #3]
 8004390:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2200      	movs	r2, #0
 8004396:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2202      	movs	r2, #2
 800439c:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2200      	movs	r2, #0
 80043a2:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	78fa      	ldrb	r2, [r7, #3]
 80043a8:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2200      	movs	r2, #0
 80043ae:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2202      	movs	r2, #2
 80043b4:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2200      	movs	r2, #0
 80043ba:	71da      	strb	r2, [r3, #7]

}
 80043bc:	bf00      	nop
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 80043d0:	2300      	movs	r3, #0
 80043d2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	332c      	adds	r3, #44	@ 0x2c
 80043dc:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 80043e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10c      	bne.n	8004406 <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2203      	movs	r2, #3
 80043f0:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2202      	movs	r2, #2
 80043fc:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	71da      	strb	r2, [r3, #7]
 8004404:	e060      	b.n	80044c8 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	795b      	ldrb	r3, [r3, #5]
 800440a:	2bff      	cmp	r3, #255	@ 0xff
 800440c:	d103      	bne.n	8004416 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2280      	movs	r2, #128	@ 0x80
 8004412:	715a      	strb	r2, [r3, #5]
 8004414:	e005      	b.n	8004422 <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	795b      	ldrb	r3, [r3, #5]
 800441a:	3301      	adds	r3, #1
 800441c:	b2da      	uxtb	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	799b      	ldrb	r3, [r3, #6]
 8004426:	f083 0302 	eor.w	r3, r3, #2
 800442a:	b2da      	uxtb	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	791b      	ldrb	r3, [r3, #4]
 8004434:	3b03      	subs	r3, #3
 8004436:	2b05      	cmp	r3, #5
 8004438:	d839      	bhi.n	80044ae <VL53L1_update_ll_driver_rd_state+0xe6>
 800443a:	a201      	add	r2, pc, #4	@ (adr r2, 8004440 <VL53L1_update_ll_driver_rd_state+0x78>)
 800443c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004440:	08004459 	.word	0x08004459
 8004444:	080044af 	.word	0x080044af
 8004448:	080044af 	.word	0x080044af
 800444c:	08004483 	.word	0x08004483
 8004450:	08004491 	.word	0x08004491
 8004454:	08004499 	.word	0x08004499

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f893 31c6 	ldrb.w	r3, [r3, #454]	@ 0x1c6
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	dd03      	ble.n	800446e <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2206      	movs	r2, #6
 800446a:	711a      	strb	r2, [r3, #4]
 800446c:	e002      	b.n	8004474 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2208      	movs	r2, #8
 8004472:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	71da      	strb	r2, [r3, #7]

		break;
 8004480:	e022      	b.n	80044c8 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2208      	movs	r2, #8
 800448c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800448e:	e01b      	b.n	80044c8 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2208      	movs	r2, #8
 8004494:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8004496:	e017      	b.n	80044c8 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	79db      	ldrb	r3, [r3, #7]
 800449c:	f083 0301 	eor.w	r3, r3, #1
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2208      	movs	r2, #8
 80044aa:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 80044ac:	e00c      	b.n	80044c8 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2203      	movs	r2, #3
 80044b2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2202      	movs	r2, #2
 80044be:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	71da      	strb	r2, [r3, #7]

		break;
 80044c6:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 80044c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	371c      	adds	r7, #28
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 80044d8:	b480      	push	{r7}
 80044da:	b089      	sub	sp, #36	@ 0x24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	332c      	adds	r3, #44	@ 0x2c
 80044ec:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 80044f4:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 80044f6:	2300      	movs	r3, #0
 80044f8:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 80044fe:	2300      	movs	r3, #0
 8004500:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	78db      	ldrb	r3, [r3, #3]
 8004510:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8004516:	111b      	asrs	r3, r3, #4
 8004518:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8004526:	f003 0320 	and.w	r3, r3, #32
 800452a:	2b00      	cmp	r3, #0
 800452c:	d017      	beq.n	800455e <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	791b      	ldrb	r3, [r3, #4]
 8004532:	2b06      	cmp	r3, #6
 8004534:	d105      	bne.n	8004542 <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	2b12      	cmp	r3, #18
 800453a:	d010      	beq.n	800455e <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800453c:	23ef      	movs	r3, #239	@ 0xef
 800453e:	77fb      	strb	r3, [r7, #31]
 8004540:	e00d      	b.n	800455e <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	795b      	ldrb	r3, [r3, #5]
 8004546:	7bba      	ldrb	r2, [r7, #14]
 8004548:	429a      	cmp	r2, r3
 800454a:	d001      	beq.n	8004550 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800454c:	23ee      	movs	r3, #238	@ 0xee
 800454e:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	799b      	ldrb	r3, [r3, #6]
 8004554:	7b7a      	ldrb	r2, [r7, #13]
 8004556:	429a      	cmp	r2, r3
 8004558:	d001      	beq.n	800455e <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800455a:	23ed      	movs	r3, #237	@ 0xed
 800455c:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800455e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3724      	adds	r7, #36	@ 0x24
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800456e:	b480      	push	{r7}
 8004570:	b087      	sub	sp, #28
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8004576:	2300      	movs	r3, #0
 8004578:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	332c      	adds	r3, #44	@ 0x2c
 8004582:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 800458a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10c      	bne.n	80045ac <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2203      	movs	r2, #3
 8004596:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2202      	movs	r2, #2
 80045a2:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	70da      	strb	r2, [r3, #3]
 80045aa:	e03e      	b.n	800462a <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	785b      	ldrb	r3, [r3, #1]
 80045b0:	2bff      	cmp	r3, #255	@ 0xff
 80045b2:	d103      	bne.n	80045bc <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2280      	movs	r2, #128	@ 0x80
 80045b8:	705a      	strb	r2, [r3, #1]
 80045ba:	e005      	b.n	80045c8 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	785b      	ldrb	r3, [r3, #1]
 80045c0:	3301      	adds	r3, #1
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	789b      	ldrb	r3, [r3, #2]
 80045cc:	f083 0302 	eor.w	r3, r3, #2
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d002      	beq.n	80045e4 <VL53L1_update_ll_driver_cfg_state+0x76>
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d00e      	beq.n	8004600 <VL53L1_update_ll_driver_cfg_state+0x92>
 80045e2:	e015      	b.n	8004610 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	78db      	ldrb	r3, [r3, #3]
 80045e8:	f083 0301 	eor.w	r3, r3, #1
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2201      	movs	r2, #1
 80045f6:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2204      	movs	r2, #4
 80045fc:	701a      	strb	r2, [r3, #0]
		break;
 80045fe:	e014      	b.n	800462a <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	78db      	ldrb	r3, [r3, #3]
 8004604:	f083 0301 	eor.w	r3, r3, #1
 8004608:	b2da      	uxtb	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	70da      	strb	r2, [r3, #3]

		break;
 800460e:	e00c      	b.n	800462a <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2203      	movs	r2, #3
 8004614:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2202      	movs	r2, #2
 8004620:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	70da      	strb	r2, [r3, #3]

		break;
 8004628:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800462a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800462e:	4618      	mov	r0, r3
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	7c1a      	ldrb	r2, [r3, #16]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	3301      	adds	r3, #1
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	7c52      	ldrb	r2, [r2, #17]
 8004654:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	3302      	adds	r3, #2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	7c92      	ldrb	r2, [r2, #18]
 800465e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	3303      	adds	r3, #3
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	7cd2      	ldrb	r2, [r2, #19]
 8004668:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	3304      	adds	r3, #4
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	7d12      	ldrb	r2, [r2, #20]
 8004672:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	3305      	adds	r3, #5
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	7d52      	ldrb	r2, [r2, #21]
 800467c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	3306      	adds	r3, #6
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	7d92      	ldrb	r2, [r2, #22]
 8004686:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	3307      	adds	r3, #7
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	7dd2      	ldrb	r2, [r2, #23]
 8004690:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	3308      	adds	r3, #8
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	7e12      	ldrb	r2, [r2, #24]
 800469a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	3309      	adds	r3, #9
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	7e52      	ldrb	r2, [r2, #25]
 80046a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	330a      	adds	r3, #10
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	7e92      	ldrb	r2, [r2, #26]
 80046ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	330b      	adds	r3, #11
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	7ed2      	ldrb	r2, [r2, #27]
 80046b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	330c      	adds	r3, #12
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	7f12      	ldrb	r2, [r2, #28]
 80046c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	330d      	adds	r3, #13
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	7f52      	ldrb	r2, [r2, #29]
 80046cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	330e      	adds	r3, #14
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	7f92      	ldrb	r2, [r2, #30]
 80046d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	330f      	adds	r3, #15
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	7fd2      	ldrb	r2, [r2, #31]
 80046e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	3310      	adds	r3, #16
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80046ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	3311      	adds	r3, #17
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 80046f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	3312      	adds	r3, #18
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8004704:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	3313      	adds	r3, #19
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8004710:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	3314      	adds	r3, #20
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800471c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	3315      	adds	r3, #21
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8004728:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	3316      	adds	r3, #22
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8004734:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	3317      	adds	r3, #23
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8004740:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	3318      	adds	r3, #24
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 800474c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	3319      	adds	r3, #25
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8004758:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	331a      	adds	r3, #26
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8004764:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	331b      	adds	r3, #27
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8004770:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	331c      	adds	r3, #28
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 800477c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	331d      	adds	r3, #29
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 8004788:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	331e      	adds	r3, #30
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8004794:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	331f      	adds	r3, #31
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 80047a0:	701a      	strb	r2, [r3, #0]
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b085      	sub	sp, #20
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	4603      	mov	r3, r0
 80047b6:	603a      	str	r2, [r7, #0]
 80047b8:	80fb      	strh	r3, [r7, #6]
 80047ba:	460b      	mov	r3, r1
 80047bc:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 80047be:	2300      	movs	r3, #0
 80047c0:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 80047c6:	88fb      	ldrh	r3, [r7, #6]
 80047c8:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 80047ca:	2300      	movs	r3, #0
 80047cc:	81fb      	strh	r3, [r7, #14]
 80047ce:	e00e      	b.n	80047ee <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 80047d0:	88ba      	ldrh	r2, [r7, #4]
 80047d2:	89fb      	ldrh	r3, [r7, #14]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	4413      	add	r3, r2
 80047dc:	89ba      	ldrh	r2, [r7, #12]
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 80047e2:	89bb      	ldrh	r3, [r7, #12]
 80047e4:	0a1b      	lsrs	r3, r3, #8
 80047e6:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 80047e8:	89fb      	ldrh	r3, [r7, #14]
 80047ea:	3301      	adds	r3, #1
 80047ec:	81fb      	strh	r3, [r7, #14]
 80047ee:	89fa      	ldrh	r2, [r7, #14]
 80047f0:	88bb      	ldrh	r3, [r7, #4]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d3ec      	bcc.n	80047d0 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 80047f6:	bf00      	nop
 80047f8:	bf00      	nop
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	6039      	str	r1, [r7, #0]
 800480e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 8004810:	2300      	movs	r3, #0
 8004812:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 8004814:	e00a      	b.n	800482c <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8004816:	89fb      	ldrh	r3, [r7, #14]
 8004818:	021b      	lsls	r3, r3, #8
 800481a:	b21a      	sxth	r2, r3
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	1c59      	adds	r1, r3, #1
 8004820:	6039      	str	r1, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	b21b      	sxth	r3, r3
 8004826:	4313      	orrs	r3, r2
 8004828:	b21b      	sxth	r3, r3
 800482a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800482c:	88fb      	ldrh	r3, [r7, #6]
 800482e:	1e5a      	subs	r2, r3, #1
 8004830:	80fa      	strh	r2, [r7, #6]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1ef      	bne.n	8004816 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 8004836:	89fb      	ldrh	r3, [r7, #14]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	603a      	str	r2, [r7, #0]
 800484e:	80fb      	strh	r3, [r7, #6]
 8004850:	460b      	mov	r3, r1
 8004852:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 8004858:	2300      	movs	r3, #0
 800485a:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800485c:	88fb      	ldrh	r3, [r7, #6]
 800485e:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8004860:	2300      	movs	r3, #0
 8004862:	81fb      	strh	r3, [r7, #14]
 8004864:	e00f      	b.n	8004886 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8004866:	88ba      	ldrh	r2, [r7, #4]
 8004868:	89fb      	ldrh	r3, [r7, #14]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	4413      	add	r3, r2
 8004872:	89ba      	ldrh	r2, [r7, #12]
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8004878:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800487c:	121b      	asrs	r3, r3, #8
 800487e:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8004880:	89fb      	ldrh	r3, [r7, #14]
 8004882:	3301      	adds	r3, #1
 8004884:	81fb      	strh	r3, [r7, #14]
 8004886:	89fa      	ldrh	r2, [r7, #14]
 8004888:	88bb      	ldrh	r3, [r7, #4]
 800488a:	429a      	cmp	r2, r3
 800488c:	d3eb      	bcc.n	8004866 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800488e:	bf00      	nop
 8004890:	bf00      	nop
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	6039      	str	r1, [r7, #0]
 80048a6:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 80048a8:	2300      	movs	r3, #0
 80048aa:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	b25b      	sxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	da0e      	bge.n	80048d4 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 80048b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80048ba:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 80048bc:	e00a      	b.n	80048d4 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 80048be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048c2:	021b      	lsls	r3, r3, #8
 80048c4:	b21a      	sxth	r2, r3
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	1c59      	adds	r1, r3, #1
 80048ca:	6039      	str	r1, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	b21b      	sxth	r3, r3
 80048d0:	4313      	orrs	r3, r2
 80048d2:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	1e5a      	subs	r2, r3, #1
 80048d8:	80fa      	strh	r2, [r7, #6]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1ef      	bne.n	80048be <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 80048de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b087      	sub	sp, #28
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	460b      	mov	r3, r1
 80048f8:	607a      	str	r2, [r7, #4]
 80048fa:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 8004908:	2300      	movs	r3, #0
 800490a:	82fb      	strh	r3, [r7, #22]
 800490c:	e00e      	b.n	800492c <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800490e:	897a      	ldrh	r2, [r7, #10]
 8004910:	8afb      	ldrh	r3, [r7, #22]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	4413      	add	r3, r2
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	0a1b      	lsrs	r3, r3, #8
 8004924:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 8004926:	8afb      	ldrh	r3, [r7, #22]
 8004928:	3301      	adds	r3, #1
 800492a:	82fb      	strh	r3, [r7, #22]
 800492c:	8afa      	ldrh	r2, [r7, #22]
 800492e:	897b      	ldrh	r3, [r7, #10]
 8004930:	429a      	cmp	r2, r3
 8004932:	d3ec      	bcc.n	800490e <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8004942:	b480      	push	{r7}
 8004944:	b085      	sub	sp, #20
 8004946:	af00      	add	r7, sp, #0
 8004948:	4603      	mov	r3, r0
 800494a:	6039      	str	r1, [r7, #0]
 800494c:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 8004952:	e007      	b.n	8004964 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	021a      	lsls	r2, r3, #8
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	1c59      	adds	r1, r3, #1
 800495c:	6039      	str	r1, [r7, #0]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	4313      	orrs	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8004964:	88fb      	ldrh	r3, [r7, #6]
 8004966:	1e5a      	subs	r2, r3, #1
 8004968:	80fa      	strh	r2, [r7, #6]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f2      	bne.n	8004954 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800496e:	68fb      	ldr	r3, [r7, #12]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	6039      	str	r1, [r7, #0]
 8004986:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	b25b      	sxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	da0b      	bge.n	80049ae <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 8004996:	f04f 33ff 	mov.w	r3, #4294967295
 800499a:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800499c:	e007      	b.n	80049ae <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	021a      	lsls	r2, r3, #8
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	1c59      	adds	r1, r3, #1
 80049a6:	6039      	str	r1, [r7, #0]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 80049ae:	88fb      	ldrh	r3, [r7, #6]
 80049b0:	1e5a      	subs	r2, r3, #1
 80049b2:	80fa      	strh	r2, [r7, #6]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f2      	bne.n	800499e <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 80049b8:	68fb      	ldr	r3, [r7, #12]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	460b      	mov	r3, r1
 80049d0:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80049d2:	2300      	movs	r3, #0
 80049d4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	78fa      	ldrb	r2, [r7, #3]
 80049de:	f883 21c8 	strb.w	r2, [r3, #456]	@ 0x1c8

	status = VL53L1_WrByte(
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f893 31c8 	ldrb.w	r3, [r3, #456]	@ 0x1c8
 80049e8:	461a      	mov	r2, r3
 80049ea:	2183      	movs	r1, #131	@ 0x83
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 fb81 	bl	80050f4 <VL53L1_WrByte>
 80049f2:	4603      	mov	r3, r0
 80049f4:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 80049f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 8004a0e:	2101      	movs	r1, #1
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff ffd8 	bl	80049c6 <VL53L1_set_powerforce_register>
 8004a16:	4603      	mov	r3, r0
 8004a18:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8004a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b086      	sub	sp, #24
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	460a      	mov	r2, r1
 8004a30:	80fb      	strh	r3, [r7, #6]
 8004a32:	4613      	mov	r3, r2
 8004a34:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 faa7 	bl	8004f98 <VL53L1_calc_pll_period_us>
 8004a4a:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 8004a4c:	797b      	ldrb	r3, [r7, #5]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fab6 	bl	8004fc0 <VL53L1_decode_vcsel_period>
 8004a54:	4603      	mov	r3, r0
 8004a56:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	4413      	add	r3, r2
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	099b      	lsrs	r3, r3, #6
 8004a68:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 8004a6a:	7cfa      	ldrb	r2, [r7, #19]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
 8004a72:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	099b      	lsrs	r3, r3, #6
 8004a78:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b089      	sub	sp, #36	@ 0x24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	4611      	mov	r1, r2
 8004a90:	461a      	mov	r2, r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	817b      	strh	r3, [r7, #10]
 8004a96:	460b      	mov	r3, r1
 8004a98:	813b      	strh	r3, [r7, #8]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	4a23      	ldr	r2, [pc, #140]	@ (8004b44 <VL53L1_calc_range_ignore_threshold+0xc0>)
 8004ab8:	fb82 1203 	smull	r1, r2, r2, r3
 8004abc:	1192      	asrs	r2, r2, #6
 8004abe:	17db      	asrs	r3, r3, #31
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 8004ac4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	da03      	bge.n	8004ad4 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8004acc:	897b      	ldrh	r3, [r7, #10]
 8004ace:	425b      	negs	r3, r3
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 8004ad4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	da03      	bge.n	8004ae4 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8004adc:	893b      	ldrh	r3, [r7, #8]
 8004ade:	425b      	negs	r3, r3
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8004ae4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004ae8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004aec:	4413      	add	r3, r2
 8004aee:	015b      	lsls	r3, r3, #5
 8004af0:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	4a13      	ldr	r2, [pc, #76]	@ (8004b44 <VL53L1_calc_range_ignore_threshold+0xc0>)
 8004af6:	fb82 1203 	smull	r1, r2, r2, r3
 8004afa:	1192      	asrs	r2, r2, #6
 8004afc:	17db      	asrs	r3, r3, #31
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4413      	add	r3, r2
 8004b08:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8004b0a:	79fa      	ldrb	r2, [r7, #7]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	fb02 f303 	mul.w	r3, r2, r3
 8004b12:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	3310      	adds	r3, #16
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	da00      	bge.n	8004b1e <VL53L1_calc_range_ignore_threshold+0x9a>
 8004b1c:	331f      	adds	r3, #31
 8004b1e:	115b      	asrs	r3, r3, #5
 8004b20:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b28:	db03      	blt.n	8004b32 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8004b2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b2e:	83fb      	strh	r3, [r7, #30]
 8004b30:	e001      	b.n	8004b36 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8004b36:	8bfb      	ldrh	r3, [r7, #30]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3724      	adds	r7, #36	@ 0x24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	10624dd3 	.word	0x10624dd3

08004b48 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	031a      	lsls	r2, r3, #12
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	085b      	lsrs	r3, r3, #1
 8004b5e:	441a      	add	r2, r3
	timeout_mclks   =
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b66:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8004b68:	68fb      	ldr	r3, [r7, #12]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 8004b88:	6839      	ldr	r1, [r7, #0]
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7ff ffdc 	bl	8004b48 <VL53L1_calc_timeout_mclks>
 8004b90:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 f860 	bl	8004c58 <VL53L1_encode_timeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8004b9c:	897b      	ldrh	r3, [r7, #10]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8004ba6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 8004bb6:	f04f 0000 	mov.w	r0, #0
 8004bba:	f04f 0100 	mov.w	r1, #0
 8004bbe:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	4688      	mov	r8, r1
 8004bc8:	4681      	mov	r9, r0
 8004bca:	6839      	ldr	r1, [r7, #0]
 8004bcc:	2000      	movs	r0, #0
 8004bce:	460c      	mov	r4, r1
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	fb04 f009 	mul.w	r0, r4, r9
 8004bd6:	fb08 f105 	mul.w	r1, r8, r5
 8004bda:	4401      	add	r1, r0
 8004bdc:	fba8 2304 	umull	r2, r3, r8, r4
 8004be0:	4419      	add	r1, r3
 8004be2:	460b      	mov	r3, r1
 8004be4:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004be8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 8004bec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bf0:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 8004bf4:	f143 0b00 	adc.w	fp, r3, #0
 8004bf8:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 8004bfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	0b02      	lsrs	r2, r0, #12
 8004c0a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8004c0e:	0b0b      	lsrs	r3, r1, #12
 8004c10:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 8004c18:	697b      	ldr	r3, [r7, #20]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	371c      	adds	r7, #28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004c24:	4770      	bx	lr

08004c26 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b084      	sub	sp, #16
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	6039      	str	r1, [r7, #0]
 8004c30:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 8004c3a:	88fb      	ldrh	r3, [r7, #6]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 f835 	bl	8004cac <VL53L1_decode_timeout>
 8004c42:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 8004c44:	6839      	ldr	r1, [r7, #0]
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff ffad 	bl	8004ba6 <VL53L1_calc_timeout_us>
 8004c4c:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8004c60:	2300      	movs	r3, #0
 8004c62:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d015      	beq.n	8004c9e <VL53L1_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3b01      	subs	r3, #1
 8004c76:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8004c78:	e005      	b.n	8004c86 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	085b      	lsrs	r3, r3, #1
 8004c7e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8004c80:	89fb      	ldrh	r3, [r7, #14]
 8004c82:	3301      	adds	r3, #1
 8004c84:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2bff      	cmp	r3, #255	@ 0xff
 8004c8a:	d8f6      	bhi.n	8004c7a <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8004c8c:	89fb      	ldrh	r3, [r7, #14]
 8004c8e:	021b      	lsls	r3, r3, #8
 8004c90:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8004c9a:	4413      	add	r3, r2
 8004c9c:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8004c9e:	8afb      	ldrh	r3, [r7, #22]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8004cba:	88fb      	ldrh	r3, [r7, #6]
 8004cbc:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8004cbe:	88fa      	ldrh	r2, [r7, #6]
 8004cc0:	0a12      	lsrs	r2, r2, #8
 8004cc2:	b292      	uxth	r2, r2
 8004cc4:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8004cca:	68fb      	ldr	r3, [r7, #12]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8004cf6:	887b      	ldrh	r3, [r7, #2]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004cfc:	23f1      	movs	r3, #241	@ 0xf1
 8004cfe:	77fb      	strb	r3, [r7, #31]
 8004d00:	e05d      	b.n	8004dbe <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8004d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d04:	799a      	ldrb	r2, [r3, #6]
 8004d06:	887b      	ldrh	r3, [r7, #2]
 8004d08:	4611      	mov	r1, r2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fe8b 	bl	8004a26 <VL53L1_calc_macro_period_us>
 8004d10:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 8004d12:	6979      	ldr	r1, [r7, #20]
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f7ff ff17 	bl	8004b48 <VL53L1_calc_timeout_mclks>
 8004d1a:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	2bff      	cmp	r3, #255	@ 0xff
 8004d20:	d901      	bls.n	8004d26 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8004d22:	23ff      	movs	r3, #255	@ 0xff
 8004d24:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8004d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2c:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 8004d2e:	6979      	ldr	r1, [r7, #20]
 8004d30:	68b8      	ldr	r0, [r7, #8]
 8004d32:	f7ff ff20 	bl	8004b76 <VL53L1_calc_encoded_timeout>
 8004d36:	4603      	mov	r3, r0
 8004d38:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8004d3a:	8a7b      	ldrh	r3, [r7, #18]
 8004d3c:	0a1b      	lsrs	r3, r3, #8
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8004d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d44:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8004d46:	8a7b      	ldrh	r3, [r7, #18]
 8004d48:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8004d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d4c:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 8004d4e:	6979      	ldr	r1, [r7, #20]
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff ff10 	bl	8004b76 <VL53L1_calc_encoded_timeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8004d5a:	8a7b      	ldrh	r3, [r7, #18]
 8004d5c:	0a1b      	lsrs	r3, r3, #8
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8004d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d64:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8004d66:	8a7b      	ldrh	r3, [r7, #18]
 8004d68:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8004d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d6c:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8004d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d70:	7a5a      	ldrb	r2, [r3, #9]
 8004d72:	887b      	ldrh	r3, [r7, #2]
 8004d74:	4611      	mov	r1, r2
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff fe55 	bl	8004a26 <VL53L1_calc_macro_period_us>
 8004d7c:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 8004d7e:	6979      	ldr	r1, [r7, #20]
 8004d80:	68b8      	ldr	r0, [r7, #8]
 8004d82:	f7ff fef8 	bl	8004b76 <VL53L1_calc_encoded_timeout>
 8004d86:	4603      	mov	r3, r0
 8004d88:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8004d8a:	8a7b      	ldrh	r3, [r7, #18]
 8004d8c:	0a1b      	lsrs	r3, r3, #8
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8004d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d94:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8004d96:	8a7b      	ldrh	r3, [r7, #18]
 8004d98:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8004d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9c:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 8004d9e:	6979      	ldr	r1, [r7, #20]
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7ff fee8 	bl	8004b76 <VL53L1_calc_encoded_timeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8004daa:	8a7b      	ldrh	r3, [r7, #18]
 8004dac:	0a1b      	lsrs	r3, r3, #8
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8004db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db4:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8004db6:	8a7b      	ldrh	r3, [r7, #18]
 8004db8:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8004dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dbc:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8004dbe:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3720      	adds	r7, #32
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	603a      	str	r2, [r7, #0]
 8004dd4:	71fb      	strb	r3, [r7, #7]
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	2b07      	cmp	r3, #7
 8004dde:	d90a      	bls.n	8004df6 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8004de0:	79bb      	ldrb	r3, [r7, #6]
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	3b71      	subs	r3, #113	@ 0x71
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 8004df4:	e00a      	b.n	8004e0c <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8004df6:	79bb      	ldrb	r3, [r7, #6]
 8004df8:	f1c3 030f 	rsb	r3, r3, #15
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	4413      	add	r3, r2
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	701a      	strb	r2, [r3, #0]
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
 8004e28:	091b      	lsrs	r3, r3, #4
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	701a      	strb	r2, [r3, #0]

}
 8004e3c:	bf00      	nop
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	603a      	str	r2, [r7, #0]
 8004e52:	71fb      	strb	r3, [r7, #7]
 8004e54:	460b      	mov	r3, r1
 8004e56:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8004e58:	79bb      	ldrb	r3, [r7, #6]
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	79fb      	ldrb	r3, [r7, #7]
 8004e60:	4413      	add	r3, r2
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	701a      	strb	r2, [r3, #0]

}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2203      	movs	r2, #3
 8004e88:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 8004ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	229b      	movs	r2, #155	@ 0x9b
 8004efc:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 8004efe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	371c      	adds	r7, #28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b085      	sub	sp, #20
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f893 2163 	ldrb.w	r2, [r3, #355]	@ 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 2160 	ldrb.w	r2, [r3, #352]	@ 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 3163 	ldrb.w	r3, [r3, #355]	@ 0x163
 8004f3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8004f5e:	4413      	add	r3, r2
 8004f60:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f893 22ae 	ldrb.w	r2, [r3, #686]	@ 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 22ea 	ldrb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f883 2187 	strb.w	r2, [r3, #391]	@ 0x187

	LOG_FUNCTION_END(status);

	return status;
 8004f88:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8004fa6:	88fb      	ldrh	r3, [r7, #6]
 8004fa8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004fac:	fb92 f3f3 	sdiv	r3, r2, r3
 8004fb0:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	4603      	mov	r3, r0
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	607a      	str	r2, [r7, #4]
 8004ff2:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 8004ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	da10      	bge.n	800501e <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	43db      	mvns	r3, r3
 8005000:	b2db      	uxtb	r3, r3
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	b2db      	uxtb	r3, r3
 8005008:	3308      	adds	r3, #8
 800500a:	b2da      	uxtb	r2, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	3b80      	subs	r3, #128	@ 0x80
 8005014:	10db      	asrs	r3, r3, #3
 8005016:	b2da      	uxtb	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800501c:	e00c      	b.n	8005038 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	b2da      	uxtb	r2, r3
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800502a:	7bfb      	ldrb	r3, [r7, #15]
 800502c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8005030:	10db      	asrs	r3, r3, #3
 8005032:	b2da      	uxtb	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	701a      	strb	r2, [r3, #0]
}
 8005038:	bf00      	nop
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <VL53L1_WriteMulti>:
/*
 * ----------------- COMMS FUNCTIONS -----------------
 */


VL53L1_Error VL53L1_WriteMulti(VL53L1_Dev_t *pdev, uint16_t reg, uint8_t *pdata, uint32_t count) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b08a      	sub	sp, #40	@ 0x28
 8005048:	af04      	add	r7, sp, #16
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	607a      	str	r2, [r7, #4]
 800504e:	603b      	str	r3, [r7, #0]
 8005050:	460b      	mov	r3, r1
 8005052:	817b      	strh	r3, [r7, #10]
	VL53L1_Error retvalue = VL53L1_ERROR_NONE;
 8005054:	2300      	movs	r3, #0
 8005056:	75fb      	strb	r3, [r7, #23]
	  if (HAL_I2C_Mem_Write(&hi2c3, pdev->i2c_slave_address << 1, reg, I2C_MEMADD_SIZE_16BIT, pdata, count, 1000) == HAL_OK) {
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f893 3398 	ldrb.w	r3, [r3, #920]	@ 0x398
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	b299      	uxth	r1, r3
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	b29b      	uxth	r3, r3
 8005066:	897a      	ldrh	r2, [r7, #10]
 8005068:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800506c:	9002      	str	r0, [sp, #8]
 800506e:	9301      	str	r3, [sp, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	2302      	movs	r3, #2
 8005076:	4808      	ldr	r0, [pc, #32]	@ (8005098 <VL53L1_WriteMulti+0x54>)
 8005078:	f001 ff86 	bl	8006f88 <HAL_I2C_Mem_Write>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d102      	bne.n	8005088 <VL53L1_WriteMulti+0x44>
        retvalue = VL53L1_ERROR_NONE;
 8005082:	2300      	movs	r3, #0
 8005084:	75fb      	strb	r3, [r7, #23]
 8005086:	e001      	b.n	800508c <VL53L1_WriteMulti+0x48>
    } else {
    	retvalue =  VL53L1_ERROR_CONTROL_INTERFACE;
 8005088:	23f3      	movs	r3, #243	@ 0xf3
 800508a:	75fb      	strb	r3, [r7, #23]
    }
    return retvalue;
 800508c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	200004f0 	.word	0x200004f0

0800509c <VL53L1_ReadMulti>:

VL53L1_Error VL53L1_ReadMulti(VL53L1_Dev_t *pdev, uint16_t reg, uint8_t *pdata, uint32_t count) {
 800509c:	b580      	push	{r7, lr}
 800509e:	b08a      	sub	sp, #40	@ 0x28
 80050a0:	af04      	add	r7, sp, #16
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	607a      	str	r2, [r7, #4]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	460b      	mov	r3, r1
 80050aa:	817b      	strh	r3, [r7, #10]
	VL53L1_Error retvalue = VL53L1_ERROR_NONE;
 80050ac:	2300      	movs	r3, #0
 80050ae:	75fb      	strb	r3, [r7, #23]
	if (HAL_I2C_Mem_Read(&hi2c3, pdev->i2c_slave_address << 1, reg, I2C_MEMADD_SIZE_16BIT, pdata, count, 1000) == HAL_OK) {
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f893 3398 	ldrb.w	r3, [r3, #920]	@ 0x398
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	b299      	uxth	r1, r3
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	897a      	ldrh	r2, [r7, #10]
 80050c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80050c4:	9002      	str	r0, [sp, #8]
 80050c6:	9301      	str	r3, [sp, #4]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	2302      	movs	r3, #2
 80050ce:	4808      	ldr	r0, [pc, #32]	@ (80050f0 <VL53L1_ReadMulti+0x54>)
 80050d0:	f002 f86e 	bl	80071b0 <HAL_I2C_Mem_Read>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d102      	bne.n	80050e0 <VL53L1_ReadMulti+0x44>
    	retvalue =  VL53L1_ERROR_NONE;
 80050da:	2300      	movs	r3, #0
 80050dc:	75fb      	strb	r3, [r7, #23]
 80050de:	e001      	b.n	80050e4 <VL53L1_ReadMulti+0x48>
    } else {
    	retvalue =  VL53L1_ERROR_CONTROL_INTERFACE;
 80050e0:	23f3      	movs	r3, #243	@ 0xf3
 80050e2:	75fb      	strb	r3, [r7, #23]
    }
    return  retvalue;
 80050e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	200004f0 	.word	0x200004f0

080050f4 <VL53L1_WrByte>:


VL53L1_Error VL53L1_WrByte(VL53L1_Dev_t *pdev, uint16_t reg, uint8_t data) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	460b      	mov	r3, r1
 80050fe:	807b      	strh	r3, [r7, #2]
 8005100:	4613      	mov	r3, r2
 8005102:	707b      	strb	r3, [r7, #1]
    return VL53L1_WriteMulti(pdev, reg, &data, 1);
 8005104:	1c7a      	adds	r2, r7, #1
 8005106:	8879      	ldrh	r1, [r7, #2]
 8005108:	2301      	movs	r3, #1
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7ff ff9a 	bl	8005044 <VL53L1_WriteMulti>
 8005110:	4603      	mov	r3, r0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <VL53L1_RdWord>:
VL53L1_Error VL53L3CX_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms) {
    HAL_Delay(wait_ms);
    return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_RdWord(VL53L1_Dev_t *pdev, uint16_t reg, uint16_t *pdata) {
 800511c:	b580      	push	{r7, lr}
 800511e:	b08a      	sub	sp, #40	@ 0x28
 8005120:	af04      	add	r7, sp, #16
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	460b      	mov	r3, r1
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	817b      	strh	r3, [r7, #10]
    VL53L1_Error retvalue = VL53L1_ERROR_NONE;
 800512a:	2300      	movs	r3, #0
 800512c:	75fb      	strb	r3, [r7, #23]
    uint8_t buffer[2];

    if (HAL_I2C_Mem_Read(&hi2c3, pdev->i2c_slave_address << 1, reg,
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f893 3398 	ldrb.w	r3, [r3, #920]	@ 0x398
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	b299      	uxth	r1, r3
 8005138:	897a      	ldrh	r2, [r7, #10]
 800513a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800513e:	9302      	str	r3, [sp, #8]
 8005140:	2302      	movs	r3, #2
 8005142:	9301      	str	r3, [sp, #4]
 8005144:	f107 0314 	add.w	r3, r7, #20
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	2302      	movs	r3, #2
 800514c:	480d      	ldr	r0, [pc, #52]	@ (8005184 <VL53L1_RdWord+0x68>)
 800514e:	f002 f82f 	bl	80071b0 <HAL_I2C_Mem_Read>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10c      	bne.n	8005172 <VL53L1_RdWord+0x56>
                         I2C_MEMADD_SIZE_16BIT, buffer, 2, 1000) == HAL_OK) {
        *pdata = ((uint16_t)buffer[0] << 8) | buffer[1];
 8005158:	7d3b      	ldrb	r3, [r7, #20]
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	b21a      	sxth	r2, r3
 800515e:	7d7b      	ldrb	r3, [r7, #21]
 8005160:	b21b      	sxth	r3, r3
 8005162:	4313      	orrs	r3, r2
 8005164:	b21b      	sxth	r3, r3
 8005166:	b29a      	uxth	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	801a      	strh	r2, [r3, #0]
        retvalue = VL53L1_ERROR_NONE;
 800516c:	2300      	movs	r3, #0
 800516e:	75fb      	strb	r3, [r7, #23]
 8005170:	e001      	b.n	8005176 <VL53L1_RdWord+0x5a>
    } else {
        retvalue = VL53L1_ERROR_CONTROL_INTERFACE;
 8005172:	23f3      	movs	r3, #243	@ 0xf3
 8005174:	75fb      	strb	r3, [r7, #23]
    }

    return retvalue;
 8005176:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	200004f0 	.word	0x200004f0

08005188 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	460b      	mov	r3, r1
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005196:	2300      	movs	r3, #0
 8005198:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800519a:	897b      	ldrh	r3, [r7, #10]
 800519c:	2b0a      	cmp	r3, #10
 800519e:	d802      	bhi.n	80051a6 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80051a0:	f06f 0309 	mvn.w	r3, #9
 80051a4:	e047      	b.n	8005236 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051ae:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 80051bc:	f002 020f 	and.w	r2, r2, #15
 80051c0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 80051c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 80051cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80051d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 80051dc:	f002 0203 	and.w	r2, r2, #3
 80051e0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80051e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 80051ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051f0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80051f2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	88d8      	ldrh	r0, [r3, #6]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3305      	adds	r3, #5
 80051fc:	461a      	mov	r2, r3
 80051fe:	2102      	movs	r1, #2
 8005200:	f7ff fad5 	bl	80047ae <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800520c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8005216:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8005220:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005224:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8005226:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8005230:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8005232:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b086      	sub	sp, #24
 8005242:	af00      	add	r7, sp, #0
 8005244:	4603      	mov	r3, r0
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	607a      	str	r2, [r7, #4]
 800524a:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800524c:	2300      	movs	r3, #0
 800524e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8005250:	89fb      	ldrh	r3, [r7, #14]
 8005252:	2b0a      	cmp	r3, #10
 8005254:	d802      	bhi.n	800525c <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005256:	f06f 0309 	mvn.w	r3, #9
 800525a:	e046      	b.n	80052ea <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005264:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	3301      	adds	r3, #1
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	3302      	adds	r3, #2
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005284:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	3303      	adds	r3, #3
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	f003 0303 	and.w	r3, r3, #3
 8005294:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	3304      	adds	r3, #4
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052a4:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	3305      	adds	r3, #5
 80052ae:	4619      	mov	r1, r3
 80052b0:	2002      	movs	r0, #2
 80052b2:	f7ff faa7 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 80052b6:	4603      	mov	r3, r0
 80052b8:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	79da      	ldrb	r2, [r3, #7]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	7a1a      	ldrb	r2, [r3, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	3309      	adds	r3, #9
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052d8:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	7a9a      	ldrb	r2, [r3, #10]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 80052e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b086      	sub	sp, #24
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80052fc:	2300      	movs	r3, #0
 80052fe:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8005300:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d108      	bne.n	800531a <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8005308:	f107 020c 	add.w	r2, r7, #12
 800530c:	230b      	movs	r3, #11
 800530e:	2101      	movs	r1, #1
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7ff fec3 	bl	800509c <VL53L1_ReadMulti>
 8005316:	4603      	mov	r3, r0
 8005318:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800531a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d108      	bne.n	8005334 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8005322:	f107 030c 	add.w	r3, r7, #12
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	4619      	mov	r1, r3
 800532a:	200b      	movs	r0, #11
 800532c:	f7ff ff87 	bl	800523e <VL53L1_i2c_decode_static_nvm_managed>
 8005330:	4603      	mov	r3, r0
 8005332:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8005334:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	460b      	mov	r3, r1
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800534e:	2300      	movs	r3, #0
 8005350:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8005352:	897b      	ldrh	r3, [r7, #10]
 8005354:	2b16      	cmp	r3, #22
 8005356:	d802      	bhi.n	800535e <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005358:	f06f 0309 	mvn.w	r3, #9
 800535c:	e076      	b.n	800544c <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800536e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8005378:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8005382:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800538c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8005396:	f002 020f 	and.w	r2, r2, #15
 800539a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800539c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 80053a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 80053b0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80053b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80053b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 80053c0:	f002 0203 	and.w	r2, r2, #3
 80053c4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80053c6:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8958      	ldrh	r0, [r3, #10]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3309      	adds	r3, #9
 80053d0:	461a      	mov	r2, r3
 80053d2:	2102      	movs	r1, #2
 80053d4:	f7ff f9eb 	bl	80047ae <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	330b      	adds	r3, #11
 80053e2:	461a      	mov	r2, r3
 80053e4:	2102      	movs	r1, #2
 80053e6:	f7ff fa2d 	bl	8004844 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	330d      	adds	r3, #13
 80053f4:	461a      	mov	r2, r3
 80053f6:	2102      	movs	r1, #2
 80053f8:	f7ff fa24 	bl	8004844 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8a18      	ldrh	r0, [r3, #16]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	330f      	adds	r3, #15
 8005404:	461a      	mov	r2, r3
 8005406:	2102      	movs	r1, #2
 8005408:	f7ff f9d1 	bl	80047ae <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8005412:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005416:	b218      	sxth	r0, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3311      	adds	r3, #17
 800541c:	461a      	mov	r2, r3
 800541e:	2102      	movs	r1, #2
 8005420:	f7ff fa10 	bl	8004844 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3313      	adds	r3, #19
 800542e:	461a      	mov	r2, r3
 8005430:	2102      	movs	r1, #2
 8005432:	f7ff fa07 	bl	8004844 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3315      	adds	r3, #21
 8005440:	461a      	mov	r2, r3
 8005442:	2102      	movs	r1, #2
 8005444:	f7ff f9fe 	bl	8004844 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8005448:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	4603      	mov	r3, r0
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005462:	2300      	movs	r3, #0
 8005464:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8005466:	89fb      	ldrh	r3, [r7, #14]
 8005468:	2b16      	cmp	r3, #22
 800546a:	d802      	bhi.n	8005472 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800546c:	f06f 0309 	mvn.w	r3, #9
 8005470:	e079      	b.n	8005566 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	785a      	ldrb	r2, [r3, #1]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	789a      	ldrb	r2, [r3, #2]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	78da      	ldrb	r2, [r3, #3]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	791a      	ldrb	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	3305      	adds	r3, #5
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	799a      	ldrb	r2, [r3, #6]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	3307      	adds	r3, #7
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054bc:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	3308      	adds	r3, #8
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	f003 0303 	and.w	r3, r3, #3
 80054cc:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	3309      	adds	r3, #9
 80054d6:	4619      	mov	r1, r3
 80054d8:	2002      	movs	r0, #2
 80054da:	f7ff f993 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 80054de:	4603      	mov	r3, r0
 80054e0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	330b      	adds	r3, #11
 80054ea:	4619      	mov	r1, r3
 80054ec:	2002      	movs	r0, #2
 80054ee:	f7ff f9d5 	bl	800489c <VL53L1_i2c_decode_int16_t>
 80054f2:	4603      	mov	r3, r0
 80054f4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	330d      	adds	r3, #13
 80054fe:	4619      	mov	r1, r3
 8005500:	2002      	movs	r0, #2
 8005502:	f7ff f9cb 	bl	800489c <VL53L1_i2c_decode_int16_t>
 8005506:	4603      	mov	r3, r0
 8005508:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	330f      	adds	r3, #15
 8005512:	4619      	mov	r1, r3
 8005514:	2002      	movs	r0, #2
 8005516:	f7ff f975 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 800551a:	4603      	mov	r3, r0
 800551c:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	3311      	adds	r3, #17
 8005526:	4619      	mov	r1, r3
 8005528:	2002      	movs	r0, #2
 800552a:	f7ff f9b7 	bl	800489c <VL53L1_i2c_decode_int16_t>
 800552e:	4603      	mov	r3, r0
 8005530:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005534:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	3313      	adds	r3, #19
 800553e:	4619      	mov	r1, r3
 8005540:	2002      	movs	r0, #2
 8005542:	f7ff f9ab 	bl	800489c <VL53L1_i2c_decode_int16_t>
 8005546:	4603      	mov	r3, r0
 8005548:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	3315      	adds	r3, #21
 8005552:	4619      	mov	r1, r3
 8005554:	2002      	movs	r0, #2
 8005556:	f7ff f9a1 	bl	800489c <VL53L1_i2c_decode_int16_t>
 800555a:	4603      	mov	r3, r0
 800555c:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8005562:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b088      	sub	sp, #32
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005578:	2300      	movs	r3, #0
 800557a:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800557c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d108      	bne.n	8005596 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8005584:	f107 0208 	add.w	r2, r7, #8
 8005588:	2317      	movs	r3, #23
 800558a:	210d      	movs	r1, #13
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff fd85 	bl	800509c <VL53L1_ReadMulti>
 8005592:	4603      	mov	r3, r0
 8005594:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8005596:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d108      	bne.n	80055b0 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800559e:	f107 0308 	add.w	r3, r7, #8
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	4619      	mov	r1, r3
 80055a6:	2017      	movs	r0, #23
 80055a8:	f7ff ff54 	bl	8005454 <VL53L1_i2c_decode_customer_nvm_managed>
 80055ac:	4603      	mov	r3, r0
 80055ae:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80055b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3720      	adds	r7, #32
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	460b      	mov	r3, r1
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80055ca:	2300      	movs	r3, #0
 80055cc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 80055ce:	897b      	ldrh	r3, [r7, #10]
 80055d0:	2b1f      	cmp	r3, #31
 80055d2:	d802      	bhi.n	80055da <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80055d4:	f06f 0309 	mvn.w	r3, #9
 80055d8:	e0cf      	b.n	800577a <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	2102      	movs	r1, #2
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff f8e3 	bl	80047ae <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 80055f0:	f002 0201 	and.w	r2, r2, #1
 80055f4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80055f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8005600:	f002 020f 	and.w	r2, r2, #15
 8005604:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8005606:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8005610:	f002 020f 	and.w	r2, r2, #15
 8005614:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8005616:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8005620:	f002 021f 	and.w	r2, r2, #31
 8005624:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8005626:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8005630:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005634:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8005636:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8005640:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005644:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8005646:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 8005650:	f002 0201 	and.w	r2, r2, #1
 8005654:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8005656:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 8005660:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800566a:	f002 0201 	and.w	r2, r2, #1
 800566e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8005670:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800567a:	f002 0203 	and.w	r2, r2, #3
 800567e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8005680:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800568a:	f002 021f 	and.w	r2, r2, #31
 800568e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8005690:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800569a:	f002 0203 	and.w	r2, r2, #3
 800569e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80056a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 80056aa:	f002 0203 	and.w	r2, r2, #3
 80056ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 80056b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 80056ba:	f002 0207 	and.w	r2, r2, #7
 80056be:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 80056c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 80056ca:	f002 021f 	and.w	r2, r2, #31
 80056ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 80056d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 80056da:	f002 0201 	and.w	r2, r2, #1
 80056de:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 80056e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80056ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80056f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80056fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8005708:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8005712:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800571c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8b18      	ldrh	r0, [r3, #24]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3318      	adds	r3, #24
 8005726:	461a      	mov	r2, r3
 8005728:	2102      	movs	r1, #2
 800572a:	f7ff f840 	bl	80047ae <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8005736:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8005740:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800574a:	f002 020f 	and.w	r2, r2, #15
 800574e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8005750:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800575a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8005764:	f002 020f 	and.w	r2, r2, #15
 8005768:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800576a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8005774:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8005776:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b086      	sub	sp, #24
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	460b      	mov	r3, r1
 800578c:	607a      	str	r2, [r7, #4]
 800578e:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005790:	2300      	movs	r3, #0
 8005792:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8005794:	897b      	ldrh	r3, [r7, #10]
 8005796:	2b15      	cmp	r3, #21
 8005798:	d802      	bhi.n	80057a0 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800579a:	f06f 0309 	mvn.w	r3, #9
 800579e:	e070      	b.n	8005882 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80057b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80057ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 80057c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80057ca:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 80057d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d4:	b298      	uxth	r0, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3304      	adds	r3, #4
 80057da:	461a      	mov	r2, r3
 80057dc:	2102      	movs	r1, #2
 80057de:	f7fe ffe6 	bl	80047ae <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 80057ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057ee:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80057f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 80057fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8005804:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800580e:	f002 0201 	and.w	r2, r2, #1
 8005812:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8005814:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800581e:	f002 0207 	and.w	r2, r2, #7
 8005822:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8005824:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8998      	ldrh	r0, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	330c      	adds	r3, #12
 800582e:	461a      	mov	r2, r3
 8005830:	2102      	movs	r1, #2
 8005832:	f7fe ffbc 	bl	80047ae <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	89d8      	ldrh	r0, [r3, #14]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	330e      	adds	r3, #14
 800583e:	461a      	mov	r2, r3
 8005840:	2102      	movs	r1, #2
 8005842:	f7fe ffb4 	bl	80047ae <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8a18      	ldrh	r0, [r3, #16]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3310      	adds	r3, #16
 800584e:	461a      	mov	r2, r3
 8005850:	2102      	movs	r1, #2
 8005852:	f7fe ffac 	bl	80047ae <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800585e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8005868:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8005872:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800587c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800587e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b086      	sub	sp, #24
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	460b      	mov	r3, r1
 8005894:	607a      	str	r2, [r7, #4]
 8005896:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005898:	2300      	movs	r3, #0
 800589a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800589c:	897b      	ldrh	r3, [r7, #10]
 800589e:	2b16      	cmp	r3, #22
 80058a0:	d802      	bhi.n	80058a8 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80058a2:	f06f 0309 	mvn.w	r3, #9
 80058a6:	e06e      	b.n	8005986 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	f003 030f 	and.w	r3, r3, #15
 80058b0:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80058be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 80058c8:	f002 020f 	and.w	r2, r2, #15
 80058cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80058ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80058d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 80058e2:	f002 020f 	and.w	r2, r2, #15
 80058e6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80058e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 80058f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 80058fc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005900:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8005902:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800590c:	f002 020f 	and.w	r2, r2, #15
 8005910:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8005912:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800591c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8005926:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800592a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800592c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8958      	ldrh	r0, [r3, #10]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	330a      	adds	r3, #10
 8005936:	461a      	mov	r2, r3
 8005938:	2102      	movs	r1, #2
 800593a:	f7fe ff38 	bl	80047ae <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8998      	ldrh	r0, [r3, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	330c      	adds	r3, #12
 8005946:	461a      	mov	r2, r3
 8005948:	2102      	movs	r1, #2
 800594a:	f7fe ff30 	bl	80047ae <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8005956:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8005960:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6918      	ldr	r0, [r3, #16]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3312      	adds	r3, #18
 800596a:	461a      	mov	r2, r3
 800596c:	2104      	movs	r1, #4
 800596e:	f7fe ffbe 	bl	80048ee <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800597a:	f002 0201 	and.w	r2, r2, #1
 800597e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8005980:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8005982:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b086      	sub	sp, #24
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	460b      	mov	r3, r1
 8005998:	607a      	str	r2, [r7, #4]
 800599a:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800599c:	2300      	movs	r3, #0
 800599e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 80059a0:	897b      	ldrh	r3, [r7, #10]
 80059a2:	2b11      	cmp	r3, #17
 80059a4:	d802      	bhi.n	80059ac <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80059a6:	f06f 0309 	mvn.w	r3, #9
 80059aa:	e071      	b.n	8005a90 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	f003 0303 	and.w	r3, r3, #3
 80059b4:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8858      	ldrh	r0, [r3, #2]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	3301      	adds	r3, #1
 80059c2:	461a      	mov	r2, r3
 80059c4:	2102      	movs	r1, #2
 80059c6:	f7fe fef2 	bl	80047ae <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8898      	ldrh	r0, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3303      	adds	r3, #3
 80059d2:	461a      	mov	r2, r3
 80059d4:	2102      	movs	r1, #2
 80059d6:	f7fe feea 	bl	80047ae <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80059e2:	f002 0201 	and.w	r2, r2, #1
 80059e6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80059e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 80059f2:	f002 0207 	and.w	r2, r2, #7
 80059f6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80059f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8005a02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8005a0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8005a16:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a1a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8005a1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8005a26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a2a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8005a2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8005a36:	f002 0203 	and.w	r2, r2, #3
 8005a3a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8005a3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8005a46:	f002 0203 	and.w	r2, r2, #3
 8005a4a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8005a4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8005a56:	f002 020f 	and.w	r2, r2, #15
 8005a5a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8005a5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8005a66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8005a70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8005a7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8005a84:	f002 0203 	and.w	r2, r2, #3
 8005a88:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8005a8a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8005a8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 8005aaa:	897b      	ldrh	r3, [r7, #10]
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d802      	bhi.n	8005ab6 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005ab0:	f06f 0309 	mvn.w	r3, #9
 8005ab4:	e025      	b.n	8005b02 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8005acc:	f002 0201 	and.w	r2, r2, #1
 8005ad0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8005ad2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8005adc:	f002 0201 	and.w	r2, r2, #1
 8005ae0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8005ae2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8005aec:	f002 0203 	and.w	r2, r2, #3
 8005af0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8005af2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8005afc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8005afe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b086      	sub	sp, #24
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	4603      	mov	r3, r0
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	607a      	str	r2, [r7, #4]
 8005b1a:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 8005b20:	89fb      	ldrh	r3, [r7, #14]
 8005b22:	2b2b      	cmp	r3, #43	@ 0x2b
 8005b24:	d802      	bhi.n	8005b2c <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005b26:	f06f 0309 	mvn.w	r3, #9
 8005b2a:	e0e2      	b.n	8005cf2 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b34:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	785a      	ldrb	r2, [r3, #1]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	3302      	adds	r3, #2
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	f003 030f 	and.w	r3, r3, #15
 8005b4c:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	78da      	ldrb	r2, [r3, #3]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4619      	mov	r1, r3
 8005b60:	2002      	movs	r0, #2
 8005b62:	f7fe fe4f 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005b66:	4603      	mov	r3, r0
 8005b68:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	3306      	adds	r3, #6
 8005b72:	4619      	mov	r1, r3
 8005b74:	2002      	movs	r0, #2
 8005b76:	f7fe fe45 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	3308      	adds	r3, #8
 8005b86:	4619      	mov	r1, r3
 8005b88:	2002      	movs	r0, #2
 8005b8a:	f7fe fe3b 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	330a      	adds	r3, #10
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	2002      	movs	r0, #2
 8005b9e:	f7fe fe31 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	330c      	adds	r3, #12
 8005bae:	4619      	mov	r1, r3
 8005bb0:	2002      	movs	r0, #2
 8005bb2:	f7fe fe27 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	330e      	adds	r3, #14
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	2002      	movs	r0, #2
 8005bc6:	f7fe fe1d 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	3310      	adds	r3, #16
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	2002      	movs	r0, #2
 8005bda:	f7fe fe13 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005bde:	4603      	mov	r3, r0
 8005be0:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	3312      	adds	r3, #18
 8005bea:	4619      	mov	r1, r3
 8005bec:	2002      	movs	r0, #2
 8005bee:	f7fe fe09 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	3314      	adds	r3, #20
 8005bfe:	4619      	mov	r1, r3
 8005c00:	2002      	movs	r0, #2
 8005c02:	f7fe fdff 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005c06:	4603      	mov	r3, r0
 8005c08:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	3316      	adds	r3, #22
 8005c12:	4619      	mov	r1, r3
 8005c14:	2002      	movs	r0, #2
 8005c16:	f7fe fdf5 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	3318      	adds	r3, #24
 8005c26:	4619      	mov	r1, r3
 8005c28:	2002      	movs	r0, #2
 8005c2a:	f7fe fdeb 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	331a      	adds	r3, #26
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	2002      	movs	r0, #2
 8005c3e:	f7fe fde1 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005c42:	4603      	mov	r3, r0
 8005c44:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	331c      	adds	r3, #28
 8005c4e:	4619      	mov	r1, r3
 8005c50:	2002      	movs	r0, #2
 8005c52:	f7fe fdd7 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005c56:	4603      	mov	r3, r0
 8005c58:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	331e      	adds	r3, #30
 8005c62:	4619      	mov	r1, r3
 8005c64:	2002      	movs	r0, #2
 8005c66:	f7fe fdcd 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	3320      	adds	r3, #32
 8005c76:	4619      	mov	r1, r3
 8005c78:	2002      	movs	r0, #2
 8005c7a:	f7fe fdc3 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	3322      	adds	r3, #34	@ 0x22
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	2002      	movs	r0, #2
 8005c8e:	f7fe fdb9 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005c92:	4603      	mov	r3, r0
 8005c94:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	3324      	adds	r3, #36	@ 0x24
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	2002      	movs	r0, #2
 8005ca2:	f7fe fdaf 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	3326      	adds	r3, #38	@ 0x26
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	2002      	movs	r0, #2
 8005cb6:	f7fe fda5 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	3328      	adds	r3, #40	@ 0x28
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	2002      	movs	r0, #2
 8005cca:	f7fe fd9b 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8005cee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3718      	adds	r7, #24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b086      	sub	sp, #24
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	4603      	mov	r3, r0
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	607a      	str	r2, [r7, #4]
 8005d06:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 8005d0c:	89fb      	ldrh	r3, [r7, #14]
 8005d0e:	2b20      	cmp	r3, #32
 8005d10:	d802      	bhi.n	8005d18 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005d12:	f06f 0309 	mvn.w	r3, #9
 8005d16:	e04d      	b.n	8005db4 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	2004      	movs	r0, #4
 8005d1c:	f7fe fe11 	bl	8004942 <VL53L1_i2c_decode_uint32_t>
 8005d20:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	3304      	adds	r3, #4
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	2004      	movs	r0, #4
 8005d2e:	f7fe fe08 	bl	8004942 <VL53L1_i2c_decode_uint32_t>
 8005d32:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	2004      	movs	r0, #4
 8005d40:	f7fe fe1c 	bl	800497c <VL53L1_i2c_decode_int32_t>
 8005d44:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	330c      	adds	r3, #12
 8005d4e:	4619      	mov	r1, r3
 8005d50:	2004      	movs	r0, #4
 8005d52:	f7fe fdf6 	bl	8004942 <VL53L1_i2c_decode_uint32_t>
 8005d56:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	3310      	adds	r3, #16
 8005d60:	4619      	mov	r1, r3
 8005d62:	2004      	movs	r0, #4
 8005d64:	f7fe fded 	bl	8004942 <VL53L1_i2c_decode_uint32_t>
 8005d68:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	3314      	adds	r3, #20
 8005d72:	4619      	mov	r1, r3
 8005d74:	2004      	movs	r0, #4
 8005d76:	f7fe fde4 	bl	8004942 <VL53L1_i2c_decode_uint32_t>
 8005d7a:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	3318      	adds	r3, #24
 8005d84:	4619      	mov	r1, r3
 8005d86:	2004      	movs	r0, #4
 8005d88:	f7fe fdf8 	bl	800497c <VL53L1_i2c_decode_int32_t>
 8005d8c:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	331c      	adds	r3, #28
 8005d96:	4619      	mov	r1, r3
 8005d98:	2004      	movs	r0, #4
 8005d9a:	f7fe fdd2 	bl	8004942 <VL53L1_i2c_decode_uint32_t>
 8005d9e:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8005db0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8005dce:	89fb      	ldrh	r3, [r7, #14]
 8005dd0:	2b37      	cmp	r3, #55	@ 0x37
 8005dd2:	d802      	bhi.n	8005dda <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005dd4:	f06f 0309 	mvn.w	r3, #9
 8005dd8:	e15e      	b.n	8006098 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8005dda:	68b9      	ldr	r1, [r7, #8]
 8005ddc:	2002      	movs	r0, #2
 8005dde:	f7fe fd11 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005de2:	4603      	mov	r3, r0
 8005de4:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	3302      	adds	r3, #2
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005df4:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	3303      	adds	r3, #3
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e04:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	f003 0303 	and.w	r3, r3, #3
 8005e14:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	3305      	adds	r3, #5
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	3306      	adds	r3, #6
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e34:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	3307      	adds	r3, #7
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e44:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	4619      	mov	r1, r3
 8005e50:	2002      	movs	r0, #2
 8005e52:	f7fe fcd7 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e5c:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	330a      	adds	r3, #10
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	f003 0303 	and.w	r3, r3, #3
 8005e6c:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	330b      	adds	r3, #11
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	f003 0303 	and.w	r3, r3, #3
 8005e7c:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	330c      	adds	r3, #12
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	330d      	adds	r3, #13
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	330e      	adds	r3, #14
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	330f      	adds	r3, #15
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	f003 0303 	and.w	r3, r3, #3
 8005ebc:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	7c1a      	ldrb	r2, [r3, #16]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	7c5a      	ldrb	r2, [r3, #17]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	3312      	adds	r3, #18
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	2002      	movs	r0, #2
 8005eda:	f7fe fc93 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ee4:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	3316      	adds	r3, #22
 8005eee:	4619      	mov	r1, r3
 8005ef0:	2002      	movs	r0, #2
 8005ef2:	f7fe fc87 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	3318      	adds	r3, #24
 8005f02:	4619      	mov	r1, r3
 8005f04:	2002      	movs	r0, #2
 8005f06:	f7fe fc7d 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	331a      	adds	r3, #26
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	331b      	adds	r3, #27
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	7f1a      	ldrb	r2, [r3, #28]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	7f5a      	ldrb	r2, [r3, #29]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	331e      	adds	r3, #30
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f4c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	331f      	adds	r3, #31
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f5c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	3320      	adds	r3, #32
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	f003 0303 	and.w	r3, r3, #3
 8005f6c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	3321      	adds	r3, #33	@ 0x21
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	3325      	adds	r3, #37	@ 0x25
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	3326      	adds	r3, #38	@ 0x26
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	3327      	adds	r3, #39	@ 0x27
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	f003 031f 	and.w	r3, r3, #31
 8005fd4:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	3328      	adds	r3, #40	@ 0x28
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	f003 031f 	and.w	r3, r3, #31
 8005fe6:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	3329      	adds	r3, #41	@ 0x29
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	332a      	adds	r3, #42	@ 0x2a
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	332b      	adds	r3, #43	@ 0x2b
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	332c      	adds	r3, #44	@ 0x2c
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	f003 0303 	and.w	r3, r3, #3
 800602e:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	332d      	adds	r3, #45	@ 0x2d
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006040:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	332e      	adds	r3, #46	@ 0x2e
 800604c:	4619      	mov	r1, r3
 800604e:	2004      	movs	r0, #4
 8006050:	f7fe fc77 	bl	8004942 <VL53L1_i2c_decode_uint32_t>
 8006054:	4603      	mov	r3, r0
 8006056:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	3332      	adds	r3, #50	@ 0x32
 8006062:	4619      	mov	r1, r3
 8006064:	2004      	movs	r0, #4
 8006066:	f7fe fc6c 	bl	8004942 <VL53L1_i2c_decode_uint32_t>
 800606a:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	3336      	adds	r3, #54	@ 0x36
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	3337      	adds	r3, #55	@ 0x37
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 8006094:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	4603      	mov	r3, r0
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80060ae:	2300      	movs	r3, #0
 80060b0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 80060b2:	89fb      	ldrh	r3, [r7, #14]
 80060b4:	2b30      	cmp	r3, #48	@ 0x30
 80060b6:	d802      	bhi.n	80060be <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80060b8:	f06f 0309 	mvn.w	r3, #9
 80060bc:	e112      	b.n	80062e4 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	785a      	ldrb	r2, [r3, #1]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	789a      	ldrb	r2, [r3, #2]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	3303      	adds	r3, #3
 80060da:	4619      	mov	r1, r3
 80060dc:	2002      	movs	r0, #2
 80060de:	f7fe fb91 	bl	8004804 <VL53L1_i2c_decode_uint16_t>
 80060e2:	4603      	mov	r3, r0
 80060e4:	461a      	mov	r2, r3
	pdata->identification__module_id =
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	3305      	adds	r3, #5
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060f4:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	3306      	adds	r3, #6
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	f003 0307 	and.w	r3, r3, #7
 8006104:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	3307      	adds	r3, #7
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	f003 0307 	and.w	r3, r3, #7
 8006114:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	3308      	adds	r3, #8
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006124:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	3309      	adds	r3, #9
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006134:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	330a      	adds	r3, #10
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	330b      	adds	r3, #11
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006154:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	330c      	adds	r3, #12
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	330d      	adds	r3, #13
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006174:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	330e      	adds	r3, #14
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006184:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	7bda      	ldrb	r2, [r3, #15]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	7c1a      	ldrb	r2, [r3, #16]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	7c5a      	ldrb	r2, [r3, #17]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	7c9a      	ldrb	r2, [r3, #18]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	7cda      	ldrb	r2, [r3, #19]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	7d1a      	ldrb	r2, [r3, #20]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	7d5a      	ldrb	r2, [r3, #21]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	7d9a      	ldrb	r2, [r3, #22]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	7dda      	ldrb	r2, [r3, #23]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	7e1a      	ldrb	r2, [r3, #24]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	7e5a      	ldrb	r2, [r3, #25]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	7e9a      	ldrb	r2, [r3, #26]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	7eda      	ldrb	r2, [r3, #27]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	7f1a      	ldrb	r2, [r3, #28]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	7f5a      	ldrb	r2, [r3, #29]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	7f9a      	ldrb	r2, [r3, #30]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	7fda      	ldrb	r2, [r3, #31]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f893 2020 	ldrb.w	r2, [r3, #32]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80062e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b090      	sub	sp, #64	@ 0x40
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80062f6:	2300      	movs	r3, #0
 80062f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80062fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10a      	bne.n	800631a <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 8006304:	f107 020c 	add.w	r2, r7, #12
 8006308:	2331      	movs	r3, #49	@ 0x31
 800630a:	f240 110f 	movw	r1, #271	@ 0x10f
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7fe fec4 	bl	800509c <VL53L1_ReadMulti>
 8006314:	4603      	mov	r3, r0
 8006316:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800631a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800631e:	2b00      	cmp	r3, #0
 8006320:	d109      	bne.n	8006336 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 8006322:	f107 030c 	add.w	r3, r7, #12
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	4619      	mov	r1, r3
 800632a:	2031      	movs	r0, #49	@ 0x31
 800632c:	f7ff feb8 	bl	80060a0 <VL53L1_i2c_decode_nvm_copy_data>
 8006330:	4603      	mov	r3, r0
 8006332:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8006336:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800633a:	4618      	mov	r0, r3
 800633c:	3740      	adds	r7, #64	@ 0x40
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8006342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006346:	3304      	adds	r3, #4

08006348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800634a:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800634c:	d3f9      	bcc.n	8006342 <CopyDataInit>
  bx lr
 800634e:	4770      	bx	lr

08006350 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8006350:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8006352:	3004      	adds	r0, #4

08006354 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8006354:	4288      	cmp	r0, r1
  bcc FillZerobss
 8006356:	d3fb      	bcc.n	8006350 <FillZerobss>
  bx lr
 8006358:	4770      	bx	lr
	...

0800635c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800635c:	480c      	ldr	r0, [pc, #48]	@ (8006390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800635e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006360:	f7fa fe08 	bl	8000f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8006364:	480b      	ldr	r0, [pc, #44]	@ (8006394 <LoopForever+0x6>)
 8006366:	490c      	ldr	r1, [pc, #48]	@ (8006398 <LoopForever+0xa>)
 8006368:	4a0c      	ldr	r2, [pc, #48]	@ (800639c <LoopForever+0xe>)
 800636a:	2300      	movs	r3, #0
 800636c:	f7ff ffec 	bl	8006348 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8006370:	480b      	ldr	r0, [pc, #44]	@ (80063a0 <LoopForever+0x12>)
 8006372:	490c      	ldr	r1, [pc, #48]	@ (80063a4 <LoopForever+0x16>)
 8006374:	4a0c      	ldr	r2, [pc, #48]	@ (80063a8 <LoopForever+0x1a>)
 8006376:	2300      	movs	r3, #0
 8006378:	f7ff ffe6 	bl	8006348 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800637c:	480b      	ldr	r0, [pc, #44]	@ (80063ac <LoopForever+0x1e>)
 800637e:	490c      	ldr	r1, [pc, #48]	@ (80063b0 <LoopForever+0x22>)
 8006380:	2300      	movs	r3, #0
 8006382:	f7ff ffe7 	bl	8006354 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006386:	f005 f873 	bl	800b470 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800638a:	f7fa fa15 	bl	80007b8 <main>

0800638e <LoopForever>:

LoopForever:
  b LoopForever
 800638e:	e7fe      	b.n	800638e <LoopForever>
  ldr   r0, =_estack
 8006390:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8006394:	20000008 	.word	0x20000008
 8006398:	200000c0 	.word	0x200000c0
 800639c:	0800c0e0 	.word	0x0800c0e0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80063a0:	20030000 	.word	0x20030000
 80063a4:	20030000 	.word	0x20030000
 80063a8:	0800c198 	.word	0x0800c198
  INIT_BSS _sbss, _ebss
 80063ac:	200000c0 	.word	0x200000c0
 80063b0:	200007e0 	.word	0x200007e0

080063b4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80063b4:	e7fe      	b.n	80063b4 <ADC1_IRQHandler>

080063b6 <LL_AHB2_GRP1_EnableClock>:
{
 80063b6:	b480      	push	{r7}
 80063b8:	b085      	sub	sp, #20
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80063be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80063ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4013      	ands	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80063da:	68fb      	ldr	r3, [r7, #12]
}
 80063dc:	bf00      	nop
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <LL_APB2_GRP1_EnableClock>:
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80063f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80063f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006404:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4013      	ands	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800640c:	68fb      	ldr	r3, [r7, #12]
}
 800640e:	bf00      	nop
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
	...

0800641c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af00      	add	r7, sp, #0
 8006422:	4603      	mov	r3, r0
 8006424:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8006426:	f107 030c 	add.w	r3, r7, #12
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	605a      	str	r2, [r3, #4]
 8006430:	609a      	str	r2, [r3, #8]
 8006432:	60da      	str	r2, [r3, #12]
 8006434:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8006436:	2002      	movs	r0, #2
 8006438:	f7ff ffbd 	bl	80063b6 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 800643c:	79fb      	ldrb	r3, [r7, #7]
 800643e:	4a12      	ldr	r2, [pc, #72]	@ (8006488 <BSP_LED_Init+0x6c>)
 8006440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006444:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006446:	2301      	movs	r3, #1
 8006448:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800644a:	2300      	movs	r3, #0
 800644c:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800644e:	2302      	movs	r3, #2
 8006450:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8006452:	79fb      	ldrb	r3, [r7, #7]
 8006454:	4a0d      	ldr	r2, [pc, #52]	@ (800648c <BSP_LED_Init+0x70>)
 8006456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800645a:	f107 020c 	add.w	r2, r7, #12
 800645e:	4611      	mov	r1, r2
 8006460:	4618      	mov	r0, r3
 8006462:	f000 fb4b 	bl	8006afc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8006466:	79fb      	ldrb	r3, [r7, #7]
 8006468:	4a08      	ldr	r2, [pc, #32]	@ (800648c <BSP_LED_Init+0x70>)
 800646a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800646e:	79fb      	ldrb	r3, [r7, #7]
 8006470:	4a05      	ldr	r2, [pc, #20]	@ (8006488 <BSP_LED_Init+0x6c>)
 8006472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006476:	2200      	movs	r2, #0
 8006478:	4619      	mov	r1, r3
 800647a:	f000 fcaf 	bl	8006ddc <HAL_GPIO_WritePin>
}
 800647e:	bf00      	nop
 8006480:	3720      	adds	r7, #32
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	0800c070 	.word	0x0800c070
 800648c:	20000040 	.word	0x20000040

08006490 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af00      	add	r7, sp, #0
 8006496:	4603      	mov	r3, r0
 8006498:	460a      	mov	r2, r1
 800649a:	71fb      	strb	r3, [r7, #7]
 800649c:	4613      	mov	r3, r2
 800649e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 80064a0:	f107 030c 	add.w	r3, r7, #12
 80064a4:	2200      	movs	r2, #0
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	605a      	str	r2, [r3, #4]
 80064aa:	609a      	str	r2, [r3, #8]
 80064ac:	60da      	str	r2, [r3, #12]
 80064ae:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80064b0:	79fb      	ldrb	r3, [r7, #7]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <BSP_PB_Init+0x2e>
 80064b6:	2004      	movs	r0, #4
 80064b8:	f7ff ff7d 	bl	80063b6 <LL_AHB2_GRP1_EnableClock>
 80064bc:	e00c      	b.n	80064d8 <BSP_PB_Init+0x48>
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d103      	bne.n	80064cc <BSP_PB_Init+0x3c>
 80064c4:	2008      	movs	r0, #8
 80064c6:	f7ff ff76 	bl	80063b6 <LL_AHB2_GRP1_EnableClock>
 80064ca:	e005      	b.n	80064d8 <BSP_PB_Init+0x48>
 80064cc:	79fb      	ldrb	r3, [r7, #7]
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d102      	bne.n	80064d8 <BSP_PB_Init+0x48>
 80064d2:	2008      	movs	r0, #8
 80064d4:	f7ff ff6f 	bl	80063b6 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80064d8:	79bb      	ldrb	r3, [r7, #6]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d117      	bne.n	800650e <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80064de:	79fb      	ldrb	r3, [r7, #7]
 80064e0:	4a20      	ldr	r2, [pc, #128]	@ (8006564 <BSP_PB_Init+0xd4>)
 80064e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064e6:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80064e8:	2300      	movs	r3, #0
 80064ea:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80064ec:	2301      	movs	r3, #1
 80064ee:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80064f0:	2302      	movs	r3, #2
 80064f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80064f4:	79fb      	ldrb	r3, [r7, #7]
 80064f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006568 <BSP_PB_Init+0xd8>)
 80064f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064fc:	f107 020c 	add.w	r2, r7, #12
 8006500:	4611      	mov	r1, r2
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fafa 	bl	8006afc <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8006508:	2001      	movs	r0, #1
 800650a:	f000 f965 	bl	80067d8 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800650e:	79bb      	ldrb	r3, [r7, #6]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d123      	bne.n	800655c <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	4a13      	ldr	r2, [pc, #76]	@ (8006564 <BSP_PB_Init+0xd4>)
 8006518:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800651c:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800651e:	2301      	movs	r3, #1
 8006520:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8006522:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006526:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8006528:	79fb      	ldrb	r3, [r7, #7]
 800652a:	4a0f      	ldr	r2, [pc, #60]	@ (8006568 <BSP_PB_Init+0xd8>)
 800652c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006530:	f107 020c 	add.w	r2, r7, #12
 8006534:	4611      	mov	r1, r2
 8006536:	4618      	mov	r0, r3
 8006538:	f000 fae0 	bl	8006afc <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800653c:	79fb      	ldrb	r3, [r7, #7]
 800653e:	4a0b      	ldr	r2, [pc, #44]	@ (800656c <BSP_PB_Init+0xdc>)
 8006540:	5cd3      	ldrb	r3, [r2, r3]
 8006542:	b25b      	sxtb	r3, r3
 8006544:	2200      	movs	r2, #0
 8006546:	210f      	movs	r1, #15
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fa44 	bl	80069d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800654e:	79fb      	ldrb	r3, [r7, #7]
 8006550:	4a06      	ldr	r2, [pc, #24]	@ (800656c <BSP_PB_Init+0xdc>)
 8006552:	5cd3      	ldrb	r3, [r2, r3]
 8006554:	b25b      	sxtb	r3, r3
 8006556:	4618      	mov	r0, r3
 8006558:	f000 fa57 	bl	8006a0a <HAL_NVIC_EnableIRQ>
  }
}
 800655c:	bf00      	nop
 800655e:	3720      	adds	r7, #32
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	0800c078 	.word	0x0800c078
 8006568:	2000004c 	.word	0x2000004c
 800656c:	0800c080 	.word	0x0800c080

08006570 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	4603      	mov	r3, r0
 8006578:	6039      	str	r1, [r7, #0]
 800657a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800657c:	2300      	movs	r3, #0
 800657e:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8006580:	79fb      	ldrb	r3, [r7, #7]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d903      	bls.n	800658e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006586:	f06f 0301 	mvn.w	r3, #1
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	e018      	b.n	80065c0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	2294      	movs	r2, #148	@ 0x94
 8006592:	fb02 f303 	mul.w	r3, r2, r3
 8006596:	4a0d      	ldr	r2, [pc, #52]	@ (80065cc <BSP_COM_Init+0x5c>)
 8006598:	4413      	add	r3, r2
 800659a:	4618      	mov	r0, r3
 800659c:	f000 f866 	bl	800666c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80065a0:	79fb      	ldrb	r3, [r7, #7]
 80065a2:	2294      	movs	r2, #148	@ 0x94
 80065a4:	fb02 f303 	mul.w	r3, r2, r3
 80065a8:	4a08      	ldr	r2, [pc, #32]	@ (80065cc <BSP_COM_Init+0x5c>)
 80065aa:	4413      	add	r3, r2
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 f80e 	bl	80065d0 <MX_LPUART1_Init>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80065ba:	f06f 0303 	mvn.w	r3, #3
 80065be:	e000      	b.n	80065c2 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 80065c0:	68fb      	ldr	r3, [r7, #12]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	200005f8 	.word	0x200005f8

080065d0 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80065da:	4b15      	ldr	r3, [pc, #84]	@ (8006630 <MX_LPUART1_Init+0x60>)
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	220c      	movs	r2, #12
 80065ee:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	895b      	ldrh	r3, [r3, #10]
 80065f4:	461a      	mov	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	891b      	ldrh	r3, [r3, #8]
 8006606:	461a      	mov	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	899b      	ldrh	r3, [r3, #12]
 8006610:	461a      	mov	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800661c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f003 ff84 	bl	800a52c <HAL_UART_Init>
 8006624:	4603      	mov	r3, r0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20000058 	.word	0x20000058

08006634 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800663c:	4b09      	ldr	r3, [pc, #36]	@ (8006664 <__io_putchar+0x30>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	461a      	mov	r2, r3
 8006642:	2394      	movs	r3, #148	@ 0x94
 8006644:	fb02 f303 	mul.w	r3, r2, r3
 8006648:	4a07      	ldr	r2, [pc, #28]	@ (8006668 <__io_putchar+0x34>)
 800664a:	1898      	adds	r0, r3, r2
 800664c:	1d39      	adds	r1, r7, #4
 800664e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006652:	2201      	movs	r2, #1
 8006654:	f003 ffc4 	bl	800a5e0 <HAL_UART_Transmit>
  return ch;
 8006658:	687b      	ldr	r3, [r7, #4]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	2000068c 	.word	0x2000068c
 8006668:	200005f8 	.word	0x200005f8

0800666c <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b088      	sub	sp, #32
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8006674:	2002      	movs	r0, #2
 8006676:	f7ff fe9e 	bl	80063b6 <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 800667a:	2002      	movs	r0, #2
 800667c:	f7ff fe9b 	bl	80063b6 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8006680:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006684:	f7ff feb0 	bl	80063e8 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8006688:	2340      	movs	r3, #64	@ 0x40
 800668a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800668c:	2302      	movs	r3, #2
 800668e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8006690:	2302      	movs	r3, #2
 8006692:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006694:	2301      	movs	r3, #1
 8006696:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8006698:	2307      	movs	r3, #7
 800669a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800669c:	f107 030c 	add.w	r3, r7, #12
 80066a0:	4619      	mov	r1, r3
 80066a2:	4809      	ldr	r0, [pc, #36]	@ (80066c8 <COM1_MspInit+0x5c>)
 80066a4:	f000 fa2a 	bl	8006afc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80066a8:	2380      	movs	r3, #128	@ 0x80
 80066aa:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80066ac:	2302      	movs	r3, #2
 80066ae:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80066b0:	2307      	movs	r3, #7
 80066b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80066b4:	f107 030c 	add.w	r3, r7, #12
 80066b8:	4619      	mov	r1, r3
 80066ba:	4803      	ldr	r0, [pc, #12]	@ (80066c8 <COM1_MspInit+0x5c>)
 80066bc:	f000 fa1e 	bl	8006afc <HAL_GPIO_Init>
}
 80066c0:	bf00      	nop
 80066c2:	3720      	adds	r7, #32
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	48000400 	.word	0x48000400

080066cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006708 <HAL_Init+0x3c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a0b      	ldr	r2, [pc, #44]	@ (8006708 <HAL_Init+0x3c>)
 80066dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066e0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80066e2:	2003      	movs	r0, #3
 80066e4:	f000 f96c 	bl	80069c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80066e8:	2000      	movs	r0, #0
 80066ea:	f000 f80f 	bl	800670c <HAL_InitTick>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	71fb      	strb	r3, [r7, #7]
 80066f8:	e001      	b.n	80066fe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80066fa:	f7fa fa86 	bl	8000c0a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80066fe:	79fb      	ldrb	r3, [r7, #7]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	58004000 	.word	0x58004000

0800670c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006714:	2300      	movs	r3, #0
 8006716:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8006718:	4b17      	ldr	r3, [pc, #92]	@ (8006778 <HAL_InitTick+0x6c>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d024      	beq.n	800676a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006720:	f002 fa6e 	bl	8008c00 <HAL_RCC_GetHCLKFreq>
 8006724:	4602      	mov	r2, r0
 8006726:	4b14      	ldr	r3, [pc, #80]	@ (8006778 <HAL_InitTick+0x6c>)
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	4619      	mov	r1, r3
 800672c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006730:	fbb3 f3f1 	udiv	r3, r3, r1
 8006734:	fbb2 f3f3 	udiv	r3, r2, r3
 8006738:	4618      	mov	r0, r3
 800673a:	f000 f974 	bl	8006a26 <HAL_SYSTICK_Config>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10f      	bne.n	8006764 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b0f      	cmp	r3, #15
 8006748:	d809      	bhi.n	800675e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800674a:	2200      	movs	r2, #0
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	f04f 30ff 	mov.w	r0, #4294967295
 8006752:	f000 f940 	bl	80069d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006756:	4a09      	ldr	r2, [pc, #36]	@ (800677c <HAL_InitTick+0x70>)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6013      	str	r3, [r2, #0]
 800675c:	e007      	b.n	800676e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	73fb      	strb	r3, [r7, #15]
 8006762:	e004      	b.n	800676e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	73fb      	strb	r3, [r7, #15]
 8006768:	e001      	b.n	800676e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800676e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20000060 	.word	0x20000060
 800677c:	2000005c 	.word	0x2000005c

08006780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006784:	4b06      	ldr	r3, [pc, #24]	@ (80067a0 <HAL_IncTick+0x20>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	461a      	mov	r2, r3
 800678a:	4b06      	ldr	r3, [pc, #24]	@ (80067a4 <HAL_IncTick+0x24>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4413      	add	r3, r2
 8006790:	4a04      	ldr	r2, [pc, #16]	@ (80067a4 <HAL_IncTick+0x24>)
 8006792:	6013      	str	r3, [r2, #0]
}
 8006794:	bf00      	nop
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	20000060 	.word	0x20000060
 80067a4:	20000690 	.word	0x20000690

080067a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
  return uwTick;
 80067ac:	4b03      	ldr	r3, [pc, #12]	@ (80067bc <HAL_GetTick+0x14>)
 80067ae:	681b      	ldr	r3, [r3, #0]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	20000690 	.word	0x20000690

080067c0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80067c0:	b480      	push	{r7}
 80067c2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80067c4:	4b03      	ldr	r3, [pc, #12]	@ (80067d4 <HAL_GetTickPrio+0x14>)
 80067c6:	681b      	ldr	r3, [r3, #0]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	2000005c 	.word	0x2000005c

080067d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067e0:	f7ff ffe2 	bl	80067a8 <HAL_GetTick>
 80067e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f0:	d005      	beq.n	80067fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80067f2:	4b0a      	ldr	r3, [pc, #40]	@ (800681c <HAL_Delay+0x44>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4413      	add	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80067fe:	bf00      	nop
 8006800:	f7ff ffd2 	bl	80067a8 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	429a      	cmp	r2, r3
 800680e:	d8f7      	bhi.n	8006800 <HAL_Delay+0x28>
  {
  }
}
 8006810:	bf00      	nop
 8006812:	bf00      	nop
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000060 	.word	0x20000060

08006820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006830:	4b0c      	ldr	r3, [pc, #48]	@ (8006864 <__NVIC_SetPriorityGrouping+0x44>)
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800683c:	4013      	ands	r3, r2
 800683e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006848:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800684c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006852:	4a04      	ldr	r2, [pc, #16]	@ (8006864 <__NVIC_SetPriorityGrouping+0x44>)
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	60d3      	str	r3, [r2, #12]
}
 8006858:	bf00      	nop
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	e000ed00 	.word	0xe000ed00

08006868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006868:	b480      	push	{r7}
 800686a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800686c:	4b04      	ldr	r3, [pc, #16]	@ (8006880 <__NVIC_GetPriorityGrouping+0x18>)
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	0a1b      	lsrs	r3, r3, #8
 8006872:	f003 0307 	and.w	r3, r3, #7
}
 8006876:	4618      	mov	r0, r3
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	e000ed00 	.word	0xe000ed00

08006884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	4603      	mov	r3, r0
 800688c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800688e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006892:	2b00      	cmp	r3, #0
 8006894:	db0b      	blt.n	80068ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006896:	79fb      	ldrb	r3, [r7, #7]
 8006898:	f003 021f 	and.w	r2, r3, #31
 800689c:	4907      	ldr	r1, [pc, #28]	@ (80068bc <__NVIC_EnableIRQ+0x38>)
 800689e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068a2:	095b      	lsrs	r3, r3, #5
 80068a4:	2001      	movs	r0, #1
 80068a6:	fa00 f202 	lsl.w	r2, r0, r2
 80068aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	e000e100 	.word	0xe000e100

080068c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	4603      	mov	r3, r0
 80068c8:	6039      	str	r1, [r7, #0]
 80068ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	db0a      	blt.n	80068ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	490c      	ldr	r1, [pc, #48]	@ (800690c <__NVIC_SetPriority+0x4c>)
 80068da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068de:	0112      	lsls	r2, r2, #4
 80068e0:	b2d2      	uxtb	r2, r2
 80068e2:	440b      	add	r3, r1
 80068e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068e8:	e00a      	b.n	8006900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	4908      	ldr	r1, [pc, #32]	@ (8006910 <__NVIC_SetPriority+0x50>)
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	f003 030f 	and.w	r3, r3, #15
 80068f6:	3b04      	subs	r3, #4
 80068f8:	0112      	lsls	r2, r2, #4
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	440b      	add	r3, r1
 80068fe:	761a      	strb	r2, [r3, #24]
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	e000e100 	.word	0xe000e100
 8006910:	e000ed00 	.word	0xe000ed00

08006914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006914:	b480      	push	{r7}
 8006916:	b089      	sub	sp, #36	@ 0x24
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f003 0307 	and.w	r3, r3, #7
 8006926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	f1c3 0307 	rsb	r3, r3, #7
 800692e:	2b04      	cmp	r3, #4
 8006930:	bf28      	it	cs
 8006932:	2304      	movcs	r3, #4
 8006934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	3304      	adds	r3, #4
 800693a:	2b06      	cmp	r3, #6
 800693c:	d902      	bls.n	8006944 <NVIC_EncodePriority+0x30>
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	3b03      	subs	r3, #3
 8006942:	e000      	b.n	8006946 <NVIC_EncodePriority+0x32>
 8006944:	2300      	movs	r3, #0
 8006946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006948:	f04f 32ff 	mov.w	r2, #4294967295
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	fa02 f303 	lsl.w	r3, r2, r3
 8006952:	43da      	mvns	r2, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	401a      	ands	r2, r3
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800695c:	f04f 31ff 	mov.w	r1, #4294967295
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	fa01 f303 	lsl.w	r3, r1, r3
 8006966:	43d9      	mvns	r1, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800696c:	4313      	orrs	r3, r2
         );
}
 800696e:	4618      	mov	r0, r3
 8006970:	3724      	adds	r7, #36	@ 0x24
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
	...

0800697c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3b01      	subs	r3, #1
 8006988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800698c:	d301      	bcc.n	8006992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800698e:	2301      	movs	r3, #1
 8006990:	e00f      	b.n	80069b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006992:	4a0a      	ldr	r2, [pc, #40]	@ (80069bc <SysTick_Config+0x40>)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3b01      	subs	r3, #1
 8006998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800699a:	210f      	movs	r1, #15
 800699c:	f04f 30ff 	mov.w	r0, #4294967295
 80069a0:	f7ff ff8e 	bl	80068c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80069a4:	4b05      	ldr	r3, [pc, #20]	@ (80069bc <SysTick_Config+0x40>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80069aa:	4b04      	ldr	r3, [pc, #16]	@ (80069bc <SysTick_Config+0x40>)
 80069ac:	2207      	movs	r2, #7
 80069ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	e000e010 	.word	0xe000e010

080069c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7ff ff29 	bl	8006820 <__NVIC_SetPriorityGrouping>
}
 80069ce:	bf00      	nop
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b086      	sub	sp, #24
 80069da:	af00      	add	r7, sp, #0
 80069dc:	4603      	mov	r3, r0
 80069de:	60b9      	str	r1, [r7, #8]
 80069e0:	607a      	str	r2, [r7, #4]
 80069e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80069e4:	f7ff ff40 	bl	8006868 <__NVIC_GetPriorityGrouping>
 80069e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	68b9      	ldr	r1, [r7, #8]
 80069ee:	6978      	ldr	r0, [r7, #20]
 80069f0:	f7ff ff90 	bl	8006914 <NVIC_EncodePriority>
 80069f4:	4602      	mov	r2, r0
 80069f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069fa:	4611      	mov	r1, r2
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7ff ff5f 	bl	80068c0 <__NVIC_SetPriority>
}
 8006a02:	bf00      	nop
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b082      	sub	sp, #8
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	4603      	mov	r3, r0
 8006a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7ff ff33 	bl	8006884 <__NVIC_EnableIRQ>
}
 8006a1e:	bf00      	nop
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b082      	sub	sp, #8
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7ff ffa4 	bl	800697c <SysTick_Config>
 8006a34:	4603      	mov	r3, r0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b084      	sub	sp, #16
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d005      	beq.n	8006a62 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2204      	movs	r2, #4
 8006a5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	73fb      	strb	r3, [r7, #15]
 8006a60:	e047      	b.n	8006af2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 020e 	bic.w	r2, r2, #14
 8006a70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 0201 	bic.w	r2, r2, #1
 8006a80:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a96:	f003 021c 	and.w	r2, r3, #28
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8006aa4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006aae:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00c      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ac6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006ad0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	4798      	blx	r3
    }
  }
  return status;
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006b06:	2300      	movs	r3, #0
 8006b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b0a:	e14c      	b.n	8006da6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	2101      	movs	r1, #1
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	fa01 f303 	lsl.w	r3, r1, r3
 8006b18:	4013      	ands	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 813e 	beq.w	8006da0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d005      	beq.n	8006b3c <HAL_GPIO_Init+0x40>
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f003 0303 	and.w	r3, r3, #3
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d130      	bne.n	8006b9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	2203      	movs	r2, #3
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	43db      	mvns	r3, r3
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	4013      	ands	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	68da      	ldr	r2, [r3, #12]
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b72:	2201      	movs	r2, #1
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7a:	43db      	mvns	r3, r3
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4013      	ands	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	091b      	lsrs	r3, r3, #4
 8006b88:	f003 0201 	and.w	r2, r3, #1
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d017      	beq.n	8006bda <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	2203      	movs	r2, #3
 8006bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bba:	43db      	mvns	r3, r3
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	689a      	ldr	r2, [r3, #8]
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	fa02 f303 	lsl.w	r3, r2, r3
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f003 0303 	and.w	r3, r3, #3
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d123      	bne.n	8006c2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	08da      	lsrs	r2, r3, #3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3208      	adds	r2, #8
 8006bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f003 0307 	and.w	r3, r3, #7
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	220f      	movs	r2, #15
 8006bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006c02:	43db      	mvns	r3, r3
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4013      	ands	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	691a      	ldr	r2, [r3, #16]
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	08da      	lsrs	r2, r3, #3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3208      	adds	r2, #8
 8006c28:	6939      	ldr	r1, [r7, #16]
 8006c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	2203      	movs	r2, #3
 8006c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3e:	43db      	mvns	r3, r3
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4013      	ands	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f003 0203 	and.w	r2, r3, #3
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	fa02 f303 	lsl.w	r3, r2, r3
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 8098 	beq.w	8006da0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8006c70:	4a54      	ldr	r2, [pc, #336]	@ (8006dc4 <HAL_GPIO_Init+0x2c8>)
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	089b      	lsrs	r3, r3, #2
 8006c76:	3302      	adds	r3, #2
 8006c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f003 0303 	and.w	r3, r3, #3
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	220f      	movs	r2, #15
 8006c88:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8c:	43db      	mvns	r3, r3
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	4013      	ands	r3, r2
 8006c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006c9a:	d019      	beq.n	8006cd0 <HAL_GPIO_Init+0x1d4>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a4a      	ldr	r2, [pc, #296]	@ (8006dc8 <HAL_GPIO_Init+0x2cc>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d013      	beq.n	8006ccc <HAL_GPIO_Init+0x1d0>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a49      	ldr	r2, [pc, #292]	@ (8006dcc <HAL_GPIO_Init+0x2d0>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d00d      	beq.n	8006cc8 <HAL_GPIO_Init+0x1cc>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a48      	ldr	r2, [pc, #288]	@ (8006dd0 <HAL_GPIO_Init+0x2d4>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d007      	beq.n	8006cc4 <HAL_GPIO_Init+0x1c8>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a47      	ldr	r2, [pc, #284]	@ (8006dd4 <HAL_GPIO_Init+0x2d8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d101      	bne.n	8006cc0 <HAL_GPIO_Init+0x1c4>
 8006cbc:	2304      	movs	r3, #4
 8006cbe:	e008      	b.n	8006cd2 <HAL_GPIO_Init+0x1d6>
 8006cc0:	2307      	movs	r3, #7
 8006cc2:	e006      	b.n	8006cd2 <HAL_GPIO_Init+0x1d6>
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e004      	b.n	8006cd2 <HAL_GPIO_Init+0x1d6>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e002      	b.n	8006cd2 <HAL_GPIO_Init+0x1d6>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e000      	b.n	8006cd2 <HAL_GPIO_Init+0x1d6>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	f002 0203 	and.w	r2, r2, #3
 8006cd8:	0092      	lsls	r2, r2, #2
 8006cda:	4093      	lsls	r3, r2
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006ce2:	4938      	ldr	r1, [pc, #224]	@ (8006dc4 <HAL_GPIO_Init+0x2c8>)
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	089b      	lsrs	r3, r3, #2
 8006ce8:	3302      	adds	r3, #2
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cf0:	4b39      	ldr	r3, [pc, #228]	@ (8006dd8 <HAL_GPIO_Init+0x2dc>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	43db      	mvns	r3, r3
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006d14:	4a30      	ldr	r2, [pc, #192]	@ (8006dd8 <HAL_GPIO_Init+0x2dc>)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006dd8 <HAL_GPIO_Init+0x2dc>)
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	43db      	mvns	r3, r3
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	4013      	ands	r3, r2
 8006d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006d3e:	4a26      	ldr	r2, [pc, #152]	@ (8006dd8 <HAL_GPIO_Init+0x2dc>)
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006d44:	4b24      	ldr	r3, [pc, #144]	@ (8006dd8 <HAL_GPIO_Init+0x2dc>)
 8006d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	43db      	mvns	r3, r3
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	4013      	ands	r3, r2
 8006d54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8006dd8 <HAL_GPIO_Init+0x2dc>)
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8006d72:	4b19      	ldr	r3, [pc, #100]	@ (8006dd8 <HAL_GPIO_Init+0x2dc>)
 8006d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	43db      	mvns	r3, r3
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	4013      	ands	r3, r2
 8006d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d003      	beq.n	8006d98 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006d98:	4a0f      	ldr	r2, [pc, #60]	@ (8006dd8 <HAL_GPIO_Init+0x2dc>)
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	3301      	adds	r3, #1
 8006da4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	fa22 f303 	lsr.w	r3, r2, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f47f aeab 	bne.w	8006b0c <HAL_GPIO_Init+0x10>
  }
}
 8006db6:	bf00      	nop
 8006db8:	bf00      	nop
 8006dba:	371c      	adds	r7, #28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	40010000 	.word	0x40010000
 8006dc8:	48000400 	.word	0x48000400
 8006dcc:	48000800 	.word	0x48000800
 8006dd0:	48000c00 	.word	0x48000c00
 8006dd4:	48001000 	.word	0x48001000
 8006dd8:	58000800 	.word	0x58000800

08006ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	807b      	strh	r3, [r7, #2]
 8006de8:	4613      	mov	r3, r2
 8006dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006dec:	787b      	ldrb	r3, [r7, #1]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006df2:	887a      	ldrh	r2, [r7, #2]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006df8:	e002      	b.n	8006e00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006dfa:	887a      	ldrh	r2, [r7, #2]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	4603      	mov	r3, r0
 8006e14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006e16:	4b08      	ldr	r3, [pc, #32]	@ (8006e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	88fb      	ldrh	r3, [r7, #6]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d006      	beq.n	8006e30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e22:	4a05      	ldr	r2, [pc, #20]	@ (8006e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e24:	88fb      	ldrh	r3, [r7, #6]
 8006e26:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e28:	88fb      	ldrh	r3, [r7, #6]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 f806 	bl	8006e3c <HAL_GPIO_EXTI_Callback>
  }
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	58000800 	.word	0x58000800

08006e3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	4603      	mov	r3, r0
 8006e44:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006e46:	bf00      	nop
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b082      	sub	sp, #8
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e08d      	b.n	8006f80 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d106      	bne.n	8006e7e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7f9 fecd 	bl	8000c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2224      	movs	r2, #36	@ 0x24
 8006e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 0201 	bic.w	r2, r2, #1
 8006e94:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006ea2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689a      	ldr	r2, [r3, #8]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006eb2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d107      	bne.n	8006ecc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ec8:	609a      	str	r2, [r3, #8]
 8006eca:	e006      	b.n	8006eda <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006ed8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d108      	bne.n	8006ef4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ef0:	605a      	str	r2, [r3, #4]
 8006ef2:	e007      	b.n	8006f04 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f02:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6812      	ldr	r2, [r2, #0]
 8006f0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006f12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f16:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68da      	ldr	r2, [r3, #12]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f26:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69d9      	ldr	r1, [r3, #28]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a1a      	ldr	r2, [r3, #32]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f042 0201 	orr.w	r2, r2, #1
 8006f60:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b088      	sub	sp, #32
 8006f8c:	af02      	add	r7, sp, #8
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	4608      	mov	r0, r1
 8006f92:	4611      	mov	r1, r2
 8006f94:	461a      	mov	r2, r3
 8006f96:	4603      	mov	r3, r0
 8006f98:	817b      	strh	r3, [r7, #10]
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	813b      	strh	r3, [r7, #8]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	f040 80f9 	bne.w	80071a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <HAL_I2C_Mem_Write+0x34>
 8006fb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d105      	bne.n	8006fc8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fc2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e0ed      	b.n	80071a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d101      	bne.n	8006fd6 <HAL_I2C_Mem_Write+0x4e>
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	e0e6      	b.n	80071a4 <HAL_I2C_Mem_Write+0x21c>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006fde:	f7ff fbe3 	bl	80067a8 <HAL_GetTick>
 8006fe2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	2319      	movs	r3, #25
 8006fea:	2201      	movs	r2, #1
 8006fec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 fac3 	bl	800757c <I2C_WaitOnFlagUntilTimeout>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e0d1      	b.n	80071a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2221      	movs	r2, #33	@ 0x21
 8007004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2240      	movs	r2, #64	@ 0x40
 800700c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a3a      	ldr	r2, [r7, #32]
 800701a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007020:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007028:	88f8      	ldrh	r0, [r7, #6]
 800702a:	893a      	ldrh	r2, [r7, #8]
 800702c:	8979      	ldrh	r1, [r7, #10]
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	9301      	str	r3, [sp, #4]
 8007032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	4603      	mov	r3, r0
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 f9d3 	bl	80073e4 <I2C_RequestMemoryWrite>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d005      	beq.n	8007050 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e0a9      	b.n	80071a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007054:	b29b      	uxth	r3, r3
 8007056:	2bff      	cmp	r3, #255	@ 0xff
 8007058:	d90e      	bls.n	8007078 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	22ff      	movs	r2, #255	@ 0xff
 800705e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007064:	b2da      	uxtb	r2, r3
 8007066:	8979      	ldrh	r1, [r7, #10]
 8007068:	2300      	movs	r3, #0
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 fc47 	bl	8007904 <I2C_TransferConfig>
 8007076:	e00f      	b.n	8007098 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800707c:	b29a      	uxth	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007086:	b2da      	uxtb	r2, r3
 8007088:	8979      	ldrh	r1, [r7, #10]
 800708a:	2300      	movs	r3, #0
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f000 fc36 	bl	8007904 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 fac6 	bl	800762e <I2C_WaitOnTXISFlagUntilTimeout>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e07b      	b.n	80071a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b0:	781a      	ldrb	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070d4:	3b01      	subs	r3, #1
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d034      	beq.n	8007150 <HAL_I2C_Mem_Write+0x1c8>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d130      	bne.n	8007150 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f4:	2200      	movs	r2, #0
 80070f6:	2180      	movs	r1, #128	@ 0x80
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f000 fa3f 	bl	800757c <I2C_WaitOnFlagUntilTimeout>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d001      	beq.n	8007108 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e04d      	b.n	80071a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800710c:	b29b      	uxth	r3, r3
 800710e:	2bff      	cmp	r3, #255	@ 0xff
 8007110:	d90e      	bls.n	8007130 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	22ff      	movs	r2, #255	@ 0xff
 8007116:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800711c:	b2da      	uxtb	r2, r3
 800711e:	8979      	ldrh	r1, [r7, #10]
 8007120:	2300      	movs	r3, #0
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 fbeb 	bl	8007904 <I2C_TransferConfig>
 800712e:	e00f      	b.n	8007150 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007134:	b29a      	uxth	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800713e:	b2da      	uxtb	r2, r3
 8007140:	8979      	ldrh	r1, [r7, #10]
 8007142:	2300      	movs	r3, #0
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 fbda 	bl	8007904 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007154:	b29b      	uxth	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d19e      	bne.n	8007098 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 faac 	bl	80076bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d001      	beq.n	800716e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e01a      	b.n	80071a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2220      	movs	r2, #32
 8007174:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6859      	ldr	r1, [r3, #4]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	4b0a      	ldr	r3, [pc, #40]	@ (80071ac <HAL_I2C_Mem_Write+0x224>)
 8007182:	400b      	ands	r3, r1
 8007184:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2220      	movs	r2, #32
 800718a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	e000      	b.n	80071a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80071a2:	2302      	movs	r3, #2
  }
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	fe00e800 	.word	0xfe00e800

080071b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af02      	add	r7, sp, #8
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	4608      	mov	r0, r1
 80071ba:	4611      	mov	r1, r2
 80071bc:	461a      	mov	r2, r3
 80071be:	4603      	mov	r3, r0
 80071c0:	817b      	strh	r3, [r7, #10]
 80071c2:	460b      	mov	r3, r1
 80071c4:	813b      	strh	r3, [r7, #8]
 80071c6:	4613      	mov	r3, r2
 80071c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b20      	cmp	r3, #32
 80071d4:	f040 80fd 	bne.w	80073d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d002      	beq.n	80071e4 <HAL_I2C_Mem_Read+0x34>
 80071de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d105      	bne.n	80071f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e0f1      	b.n	80073d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d101      	bne.n	80071fe <HAL_I2C_Mem_Read+0x4e>
 80071fa:	2302      	movs	r3, #2
 80071fc:	e0ea      	b.n	80073d4 <HAL_I2C_Mem_Read+0x224>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007206:	f7ff facf 	bl	80067a8 <HAL_GetTick>
 800720a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	2319      	movs	r3, #25
 8007212:	2201      	movs	r2, #1
 8007214:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 f9af 	bl	800757c <I2C_WaitOnFlagUntilTimeout>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e0d5      	b.n	80073d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2222      	movs	r2, #34	@ 0x22
 800722c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2240      	movs	r2, #64	@ 0x40
 8007234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6a3a      	ldr	r2, [r7, #32]
 8007242:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007248:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007250:	88f8      	ldrh	r0, [r7, #6]
 8007252:	893a      	ldrh	r2, [r7, #8]
 8007254:	8979      	ldrh	r1, [r7, #10]
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	9301      	str	r3, [sp, #4]
 800725a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	4603      	mov	r3, r0
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 f913 	bl	800748c <I2C_RequestMemoryRead>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d005      	beq.n	8007278 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e0ad      	b.n	80073d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800727c:	b29b      	uxth	r3, r3
 800727e:	2bff      	cmp	r3, #255	@ 0xff
 8007280:	d90e      	bls.n	80072a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	22ff      	movs	r2, #255	@ 0xff
 8007286:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800728c:	b2da      	uxtb	r2, r3
 800728e:	8979      	ldrh	r1, [r7, #10]
 8007290:	4b52      	ldr	r3, [pc, #328]	@ (80073dc <HAL_I2C_Mem_Read+0x22c>)
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 fb33 	bl	8007904 <I2C_TransferConfig>
 800729e:	e00f      	b.n	80072c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	8979      	ldrh	r1, [r7, #10]
 80072b2:	4b4a      	ldr	r3, [pc, #296]	@ (80073dc <HAL_I2C_Mem_Read+0x22c>)
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 fb22 	bl	8007904 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c6:	2200      	movs	r2, #0
 80072c8:	2104      	movs	r1, #4
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 f956 	bl	800757c <I2C_WaitOnFlagUntilTimeout>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d001      	beq.n	80072da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e07c      	b.n	80073d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e4:	b2d2      	uxtb	r2, r2
 80072e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072f6:	3b01      	subs	r3, #1
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007302:	b29b      	uxth	r3, r3
 8007304:	3b01      	subs	r3, #1
 8007306:	b29a      	uxth	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007310:	b29b      	uxth	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d034      	beq.n	8007380 <HAL_I2C_Mem_Read+0x1d0>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800731a:	2b00      	cmp	r3, #0
 800731c:	d130      	bne.n	8007380 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007324:	2200      	movs	r2, #0
 8007326:	2180      	movs	r1, #128	@ 0x80
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 f927 	bl	800757c <I2C_WaitOnFlagUntilTimeout>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e04d      	b.n	80073d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800733c:	b29b      	uxth	r3, r3
 800733e:	2bff      	cmp	r3, #255	@ 0xff
 8007340:	d90e      	bls.n	8007360 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	22ff      	movs	r2, #255	@ 0xff
 8007346:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800734c:	b2da      	uxtb	r2, r3
 800734e:	8979      	ldrh	r1, [r7, #10]
 8007350:	2300      	movs	r3, #0
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 fad3 	bl	8007904 <I2C_TransferConfig>
 800735e:	e00f      	b.n	8007380 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007364:	b29a      	uxth	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800736e:	b2da      	uxtb	r2, r3
 8007370:	8979      	ldrh	r1, [r7, #10]
 8007372:	2300      	movs	r3, #0
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f000 fac2 	bl	8007904 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007384:	b29b      	uxth	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d19a      	bne.n	80072c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 f994 	bl	80076bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e01a      	b.n	80073d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2220      	movs	r2, #32
 80073a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6859      	ldr	r1, [r3, #4]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	4b0b      	ldr	r3, [pc, #44]	@ (80073e0 <HAL_I2C_Mem_Read+0x230>)
 80073b2:	400b      	ands	r3, r1
 80073b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2220      	movs	r2, #32
 80073ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	e000      	b.n	80073d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80073d2:	2302      	movs	r3, #2
  }
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	80002400 	.word	0x80002400
 80073e0:	fe00e800 	.word	0xfe00e800

080073e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af02      	add	r7, sp, #8
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	4608      	mov	r0, r1
 80073ee:	4611      	mov	r1, r2
 80073f0:	461a      	mov	r2, r3
 80073f2:	4603      	mov	r3, r0
 80073f4:	817b      	strh	r3, [r7, #10]
 80073f6:	460b      	mov	r3, r1
 80073f8:	813b      	strh	r3, [r7, #8]
 80073fa:	4613      	mov	r3, r2
 80073fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80073fe:	88fb      	ldrh	r3, [r7, #6]
 8007400:	b2da      	uxtb	r2, r3
 8007402:	8979      	ldrh	r1, [r7, #10]
 8007404:	4b20      	ldr	r3, [pc, #128]	@ (8007488 <I2C_RequestMemoryWrite+0xa4>)
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 fa79 	bl	8007904 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007412:	69fa      	ldr	r2, [r7, #28]
 8007414:	69b9      	ldr	r1, [r7, #24]
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 f909 	bl	800762e <I2C_WaitOnTXISFlagUntilTimeout>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e02c      	b.n	8007480 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007426:	88fb      	ldrh	r3, [r7, #6]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d105      	bne.n	8007438 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800742c:	893b      	ldrh	r3, [r7, #8]
 800742e:	b2da      	uxtb	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	629a      	str	r2, [r3, #40]	@ 0x28
 8007436:	e015      	b.n	8007464 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007438:	893b      	ldrh	r3, [r7, #8]
 800743a:	0a1b      	lsrs	r3, r3, #8
 800743c:	b29b      	uxth	r3, r3
 800743e:	b2da      	uxtb	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007446:	69fa      	ldr	r2, [r7, #28]
 8007448:	69b9      	ldr	r1, [r7, #24]
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f000 f8ef 	bl	800762e <I2C_WaitOnTXISFlagUntilTimeout>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e012      	b.n	8007480 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800745a:	893b      	ldrh	r3, [r7, #8]
 800745c:	b2da      	uxtb	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	2200      	movs	r2, #0
 800746c:	2180      	movs	r1, #128	@ 0x80
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 f884 	bl	800757c <I2C_WaitOnFlagUntilTimeout>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e000      	b.n	8007480 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	80002000 	.word	0x80002000

0800748c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af02      	add	r7, sp, #8
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	4608      	mov	r0, r1
 8007496:	4611      	mov	r1, r2
 8007498:	461a      	mov	r2, r3
 800749a:	4603      	mov	r3, r0
 800749c:	817b      	strh	r3, [r7, #10]
 800749e:	460b      	mov	r3, r1
 80074a0:	813b      	strh	r3, [r7, #8]
 80074a2:	4613      	mov	r3, r2
 80074a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80074a6:	88fb      	ldrh	r3, [r7, #6]
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	8979      	ldrh	r1, [r7, #10]
 80074ac:	4b20      	ldr	r3, [pc, #128]	@ (8007530 <I2C_RequestMemoryRead+0xa4>)
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	2300      	movs	r3, #0
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 fa26 	bl	8007904 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074b8:	69fa      	ldr	r2, [r7, #28]
 80074ba:	69b9      	ldr	r1, [r7, #24]
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f8b6 	bl	800762e <I2C_WaitOnTXISFlagUntilTimeout>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e02c      	b.n	8007526 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074cc:	88fb      	ldrh	r3, [r7, #6]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d105      	bne.n	80074de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80074d2:	893b      	ldrh	r3, [r7, #8]
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	629a      	str	r2, [r3, #40]	@ 0x28
 80074dc:	e015      	b.n	800750a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80074de:	893b      	ldrh	r3, [r7, #8]
 80074e0:	0a1b      	lsrs	r3, r3, #8
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074ec:	69fa      	ldr	r2, [r7, #28]
 80074ee:	69b9      	ldr	r1, [r7, #24]
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f000 f89c 	bl	800762e <I2C_WaitOnTXISFlagUntilTimeout>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e012      	b.n	8007526 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007500:	893b      	ldrh	r3, [r7, #8]
 8007502:	b2da      	uxtb	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	2200      	movs	r2, #0
 8007512:	2140      	movs	r1, #64	@ 0x40
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 f831 	bl	800757c <I2C_WaitOnFlagUntilTimeout>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e000      	b.n	8007526 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	80002000 	.word	0x80002000

08007534 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b02      	cmp	r3, #2
 8007548:	d103      	bne.n	8007552 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2200      	movs	r2, #0
 8007550:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	2b01      	cmp	r3, #1
 800755e:	d007      	beq.n	8007570 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	699a      	ldr	r2, [r3, #24]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f042 0201 	orr.w	r2, r2, #1
 800756e:	619a      	str	r2, [r3, #24]
  }
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	603b      	str	r3, [r7, #0]
 8007588:	4613      	mov	r3, r2
 800758a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800758c:	e03b      	b.n	8007606 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 f8d6 	bl	8007744 <I2C_IsErrorOccurred>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e041      	b.n	8007626 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a8:	d02d      	beq.n	8007606 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075aa:	f7ff f8fd 	bl	80067a8 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d302      	bcc.n	80075c0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d122      	bne.n	8007606 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	699a      	ldr	r2, [r3, #24]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	4013      	ands	r3, r2
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	bf0c      	ite	eq
 80075d0:	2301      	moveq	r3, #1
 80075d2:	2300      	movne	r3, #0
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	461a      	mov	r2, r3
 80075d8:	79fb      	ldrb	r3, [r7, #7]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d113      	bne.n	8007606 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075e2:	f043 0220 	orr.w	r2, r3, #32
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e00f      	b.n	8007626 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	699a      	ldr	r2, [r3, #24]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	4013      	ands	r3, r2
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	429a      	cmp	r2, r3
 8007614:	bf0c      	ite	eq
 8007616:	2301      	moveq	r3, #1
 8007618:	2300      	movne	r3, #0
 800761a:	b2db      	uxtb	r3, r3
 800761c:	461a      	mov	r2, r3
 800761e:	79fb      	ldrb	r3, [r7, #7]
 8007620:	429a      	cmp	r2, r3
 8007622:	d0b4      	beq.n	800758e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800763a:	e033      	b.n	80076a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	68b9      	ldr	r1, [r7, #8]
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 f87f 	bl	8007744 <I2C_IsErrorOccurred>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e031      	b.n	80076b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007656:	d025      	beq.n	80076a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007658:	f7ff f8a6 	bl	80067a8 <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	429a      	cmp	r2, r3
 8007666:	d302      	bcc.n	800766e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d11a      	bne.n	80076a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	2b02      	cmp	r3, #2
 800767a:	d013      	beq.n	80076a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007680:	f043 0220 	orr.w	r2, r3, #32
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2220      	movs	r2, #32
 800768c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e007      	b.n	80076b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d1c4      	bne.n	800763c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076c8:	e02f      	b.n	800772a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	68b9      	ldr	r1, [r7, #8]
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 f838 	bl	8007744 <I2C_IsErrorOccurred>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e02d      	b.n	800773a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076de:	f7ff f863 	bl	80067a8 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d302      	bcc.n	80076f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d11a      	bne.n	800772a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	f003 0320 	and.w	r3, r3, #32
 80076fe:	2b20      	cmp	r3, #32
 8007700:	d013      	beq.n	800772a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007706:	f043 0220 	orr.w	r2, r3, #32
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2220      	movs	r2, #32
 8007712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e007      	b.n	800773a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	f003 0320 	and.w	r3, r3, #32
 8007734:	2b20      	cmp	r3, #32
 8007736:	d1c8      	bne.n	80076ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
	...

08007744 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08a      	sub	sp, #40	@ 0x28
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	f003 0310 	and.w	r3, r3, #16
 800776c:	2b00      	cmp	r3, #0
 800776e:	d068      	beq.n	8007842 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2210      	movs	r2, #16
 8007776:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007778:	e049      	b.n	800780e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007780:	d045      	beq.n	800780e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007782:	f7ff f811 	bl	80067a8 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	429a      	cmp	r2, r3
 8007790:	d302      	bcc.n	8007798 <I2C_IsErrorOccurred+0x54>
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d13a      	bne.n	800780e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80077aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077ba:	d121      	bne.n	8007800 <I2C_IsErrorOccurred+0xbc>
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077c2:	d01d      	beq.n	8007800 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80077c4:	7cfb      	ldrb	r3, [r7, #19]
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	d01a      	beq.n	8007800 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80077da:	f7fe ffe5 	bl	80067a8 <HAL_GetTick>
 80077de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077e0:	e00e      	b.n	8007800 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80077e2:	f7fe ffe1 	bl	80067a8 <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	2b19      	cmp	r3, #25
 80077ee:	d907      	bls.n	8007800 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	f043 0320 	orr.w	r3, r3, #32
 80077f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80077fe:	e006      	b.n	800780e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	f003 0320 	and.w	r3, r3, #32
 800780a:	2b20      	cmp	r3, #32
 800780c:	d1e9      	bne.n	80077e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	f003 0320 	and.w	r3, r3, #32
 8007818:	2b20      	cmp	r3, #32
 800781a:	d003      	beq.n	8007824 <I2C_IsErrorOccurred+0xe0>
 800781c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0aa      	beq.n	800777a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007824:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007828:	2b00      	cmp	r3, #0
 800782a:	d103      	bne.n	8007834 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2220      	movs	r2, #32
 8007832:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007834:	6a3b      	ldr	r3, [r7, #32]
 8007836:	f043 0304 	orr.w	r3, r3, #4
 800783a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00b      	beq.n	800786c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	f043 0301 	orr.w	r3, r3, #1
 800785a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007864:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00b      	beq.n	800788e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	f043 0308 	orr.w	r3, r3, #8
 800787c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007886:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00b      	beq.n	80078b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	f043 0302 	orr.w	r3, r3, #2
 800789e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80078b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d01c      	beq.n	80078f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f7ff fe3b 	bl	8007534 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	6859      	ldr	r1, [r3, #4]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007900 <I2C_IsErrorOccurred+0x1bc>)
 80078ca:	400b      	ands	r3, r1
 80078cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	431a      	orrs	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2220      	movs	r2, #32
 80078de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80078f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3728      	adds	r7, #40	@ 0x28
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	fe00e800 	.word	0xfe00e800

08007904 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	607b      	str	r3, [r7, #4]
 800790e:	460b      	mov	r3, r1
 8007910:	817b      	strh	r3, [r7, #10]
 8007912:	4613      	mov	r3, r2
 8007914:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007916:	897b      	ldrh	r3, [r7, #10]
 8007918:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800791c:	7a7b      	ldrb	r3, [r7, #9]
 800791e:	041b      	lsls	r3, r3, #16
 8007920:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007924:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	4313      	orrs	r3, r2
 800792e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007932:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	0d5b      	lsrs	r3, r3, #21
 800793e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007942:	4b08      	ldr	r3, [pc, #32]	@ (8007964 <I2C_TransferConfig+0x60>)
 8007944:	430b      	orrs	r3, r1
 8007946:	43db      	mvns	r3, r3
 8007948:	ea02 0103 	and.w	r1, r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	430a      	orrs	r2, r1
 8007954:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007956:	bf00      	nop
 8007958:	371c      	adds	r7, #28
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	03ff63ff 	.word	0x03ff63ff

08007968 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b20      	cmp	r3, #32
 800797c:	d138      	bne.n	80079f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007984:	2b01      	cmp	r3, #1
 8007986:	d101      	bne.n	800798c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007988:	2302      	movs	r3, #2
 800798a:	e032      	b.n	80079f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2224      	movs	r2, #36	@ 0x24
 8007998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0201 	bic.w	r2, r2, #1
 80079aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80079ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6819      	ldr	r1, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f042 0201 	orr.w	r2, r2, #1
 80079da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2220      	movs	r2, #32
 80079e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	e000      	b.n	80079f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80079f0:	2302      	movs	r3, #2
  }
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b085      	sub	sp, #20
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	d139      	bne.n	8007a88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d101      	bne.n	8007a22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e033      	b.n	8007a8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2224      	movs	r2, #36	@ 0x24
 8007a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f022 0201 	bic.w	r2, r2, #1
 8007a40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007a50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	021b      	lsls	r3, r3, #8
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f042 0201 	orr.w	r2, r2, #1
 8007a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2220      	movs	r2, #32
 8007a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	e000      	b.n	8007a8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007a88:	2302      	movs	r3, #2
  }
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
	...

08007a98 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a9c:	4b05      	ldr	r3, [pc, #20]	@ (8007ab4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a04      	ldr	r2, [pc, #16]	@ (8007ab4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007aa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007aa6:	6013      	str	r3, [r2, #0]
}
 8007aa8:	bf00      	nop
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	58000400 	.word	0x58000400

08007ab8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007abc:	4b04      	ldr	r3, [pc, #16]	@ (8007ad0 <HAL_PWREx_GetVoltageRange+0x18>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	58000400 	.word	0x58000400

08007ad4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007ad8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ae2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ae6:	d101      	bne.n	8007aec <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e000      	b.n	8007aee <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8007af8:	b480      	push	{r7}
 8007afa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007afc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b0a:	6013      	str	r3, [r2, #0]
}
 8007b0c:	bf00      	nop
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8007b16:	b480      	push	{r7}
 8007b18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b28:	6013      	str	r3, [r2, #0]
}
 8007b2a:	bf00      	nop
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8007b34:	b480      	push	{r7}
 8007b36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007b38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b46:	d101      	bne.n	8007b4c <LL_RCC_HSE_IsReady+0x18>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e000      	b.n	8007b4e <LL_RCC_HSE_IsReady+0x1a>
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b6a:	6013      	str	r3, [r2, #0]
}
 8007b6c:	bf00      	nop
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8007b76:	b480      	push	{r7}
 8007b78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b88:	6013      	str	r3, [r2, #0]
}
 8007b8a:	bf00      	nop
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8007b94:	b480      	push	{r7}
 8007b96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ba6:	d101      	bne.n	8007bac <LL_RCC_HSI_IsReady+0x18>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e000      	b.n	8007bae <LL_RCC_HSI_IsReady+0x1a>
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007bc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	061b      	lsls	r3, r3, #24
 8007bce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	604b      	str	r3, [r1, #4]
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8007be2:	b480      	push	{r7}
 8007be4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007bee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007bf2:	f043 0301 	orr.w	r3, r3, #1
 8007bf6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8007bfa:	bf00      	nop
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8007c04:	b480      	push	{r7}
 8007c06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c14:	f023 0301 	bic.w	r3, r3, #1
 8007c18:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8007c1c:	bf00      	nop
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8007c26:	b480      	push	{r7}
 8007c28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8007c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c32:	f003 0302 	and.w	r3, r3, #2
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d101      	bne.n	8007c3e <LL_RCC_HSI48_IsReady+0x18>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e000      	b.n	8007c40 <LL_RCC_HSI48_IsReady+0x1a>
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c5a:	f043 0301 	orr.w	r3, r3, #1
 8007c5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007c62:	bf00      	nop
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007c70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c7c:	f023 0301 	bic.w	r3, r3, #1
 8007c80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007c84:	bf00      	nop
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007c92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c9e:	f043 0304 	orr.w	r3, r3, #4
 8007ca2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007ca6:	bf00      	nop
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007cb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007cc0:	f023 0304 	bic.w	r3, r3, #4
 8007cc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007cc8:	bf00      	nop
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cde:	f003 0302 	and.w	r3, r3, #2
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d101      	bne.n	8007cea <LL_RCC_LSE_IsReady+0x18>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e000      	b.n	8007cec <LL_RCC_LSE_IsReady+0x1a>
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d06:	f043 0301 	orr.w	r3, r3, #1
 8007d0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007d0e:	bf00      	nop
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d28:	f023 0301 	bic.w	r3, r3, #1
 8007d2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007d30:	bf00      	nop
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8007d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d101      	bne.n	8007d52 <LL_RCC_LSI1_IsReady+0x18>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e000      	b.n	8007d54 <LL_RCC_LSI1_IsReady+0x1a>
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d6e:	f043 0304 	orr.w	r3, r3, #4
 8007d72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007d76:	bf00      	nop
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8007d80:	b480      	push	{r7}
 8007d82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d90:	f023 0304 	bic.w	r3, r3, #4
 8007d94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007d98:	bf00      	nop
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8007da2:	b480      	push	{r7}
 8007da4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007dae:	f003 0308 	and.w	r3, r3, #8
 8007db2:	2b08      	cmp	r3, #8
 8007db4:	d101      	bne.n	8007dba <LL_RCC_LSI2_IsReady+0x18>
 8007db6:	2301      	movs	r3, #1
 8007db8:	e000      	b.n	8007dbc <LL_RCC_LSI2_IsReady+0x1a>
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8007dce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007dd6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	021b      	lsls	r3, r3, #8
 8007dde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007de2:	4313      	orrs	r3, r2
 8007de4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8007df4:	b480      	push	{r7}
 8007df6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e02:	f043 0301 	orr.w	r3, r3, #1
 8007e06:	6013      	str	r3, [r2, #0]
}
 8007e08:	bf00      	nop
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8007e12:	b480      	push	{r7}
 8007e14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e20:	f023 0301 	bic.w	r3, r3, #1
 8007e24:	6013      	str	r3, [r2, #0]
}
 8007e26:	bf00      	nop
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8007e30:	b480      	push	{r7}
 8007e32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007e34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0302 	and.w	r3, r3, #2
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d101      	bne.n	8007e46 <LL_RCC_MSI_IsReady+0x16>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e000      	b.n	8007e48 <LL_RCC_MSI_IsReady+0x18>
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b083      	sub	sp, #12
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8007e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007e64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	600b      	str	r3, [r1, #0]
}
 8007e6e:	bf00      	nop
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007e80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e8a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2bb0      	cmp	r3, #176	@ 0xb0
 8007e90:	d901      	bls.n	8007e96 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8007e92:	23b0      	movs	r3, #176	@ 0xb0
 8007e94:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8007e96:	687b      	ldr	r3, [r7, #4]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007eac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	021b      	lsls	r3, r3, #8
 8007eba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	604b      	str	r3, [r1, #4]
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	f023 0203 	bic.w	r2, r3, #3
 8007ee0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	608b      	str	r3, [r1, #8]
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007efa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f003 030c 	and.w	r3, r3, #12
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr

08007f0e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b083      	sub	sp, #12
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	608b      	str	r3, [r1, #8]
}
 8007f2a:	bf00      	nop
 8007f2c:	370c      	adds	r7, #12
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8007f36:	b480      	push	{r7}
 8007f38:	b083      	sub	sp, #12
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8007f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f42:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007f46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8007f56:	bf00      	nop
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b083      	sub	sp, #12
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007f6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007f72:	f023 020f 	bic.w	r2, r3, #15
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	091b      	lsrs	r3, r3, #4
 8007f7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007f98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007fa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	608b      	str	r3, [r1, #8]
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007fca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	608b      	str	r3, [r1, #8]
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007fe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008000:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008004:	011b      	lsls	r3, r3, #4
 8008006:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800800a:	4618      	mov	r0, r3
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008014:	b480      	push	{r7}
 8008016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8008022:	4618      	mov	r0, r3
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800802c:	b480      	push	{r7}
 800802e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800803a:	4618      	mov	r0, r3
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8008044:	b480      	push	{r7}
 8008046:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008052:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008056:	6013      	str	r3, [r2, #0]
}
 8008058:	bf00      	nop
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8008062:	b480      	push	{r7}
 8008064:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008070:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008074:	6013      	str	r3, [r2, #0]
}
 8008076:	bf00      	nop
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8008080:	b480      	push	{r7}
 8008082:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800808e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008092:	d101      	bne.n	8008098 <LL_RCC_PLL_IsReady+0x18>
 8008094:	2301      	movs	r3, #1
 8008096:	e000      	b.n	800809a <LL_RCC_PLL_IsReady+0x1a>
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80080a4:	b480      	push	{r7}
 80080a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80080a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	0a1b      	lsrs	r3, r3, #8
 80080b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80080be:	b480      	push	{r7}
 80080c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80080c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80080d6:	b480      	push	{r7}
 80080d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80080da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80080ee:	b480      	push	{r7}
 80080f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80080f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	f003 0303 	and.w	r3, r3, #3
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8008106:	b480      	push	{r7}
 8008108:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800810a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008118:	d101      	bne.n	800811e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800811a:	2301      	movs	r3, #1
 800811c:	e000      	b.n	8008120 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800812a:	b480      	push	{r7}
 800812c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800812e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008132:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800813a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800813e:	d101      	bne.n	8008144 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8008140:	2301      	movs	r3, #1
 8008142:	e000      	b.n	8008146 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8008150:	b480      	push	{r7}
 8008152:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008154:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008158:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800815c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008164:	d101      	bne.n	800816a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008166:	2301      	movs	r3, #1
 8008168:	e000      	b.n	800816c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8008176:	b480      	push	{r7}
 8008178:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800817a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008184:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008188:	d101      	bne.n	800818e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800818a:	2301      	movs	r3, #1
 800818c:	e000      	b.n	8008190 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800819a:	b480      	push	{r7}
 800819c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800819e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80081a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081ac:	d101      	bne.n	80081b2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80081ae:	2301      	movs	r3, #1
 80081b0:	e000      	b.n	80081b4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
	...

080081c0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081c0:	b590      	push	{r4, r7, lr}
 80081c2:	b08d      	sub	sp, #52	@ 0x34
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e363      	b.n	800889a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0320 	and.w	r3, r3, #32
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 808d 	beq.w	80082fa <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081e0:	f7ff fe89 	bl	8007ef6 <LL_RCC_GetSysClkSource>
 80081e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80081e6:	f7ff ff82 	bl	80080ee <LL_RCC_PLL_GetMainSource>
 80081ea:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80081ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d005      	beq.n	80081fe <HAL_RCC_OscConfig+0x3e>
 80081f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f4:	2b0c      	cmp	r3, #12
 80081f6:	d147      	bne.n	8008288 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80081f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d144      	bne.n	8008288 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e347      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800820e:	f7ff fe34 	bl	8007e7a <LL_RCC_MSI_GetRange>
 8008212:	4603      	mov	r3, r0
 8008214:	429c      	cmp	r4, r3
 8008216:	d914      	bls.n	8008242 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800821c:	4618      	mov	r0, r3
 800821e:	f000 fd2f 	bl	8008c80 <RCC_SetFlashLatencyFromMSIRange>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e336      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008230:	4618      	mov	r0, r3
 8008232:	f7ff fe0e 	bl	8007e52 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff fe32 	bl	8007ea4 <LL_RCC_MSI_SetCalibTrimming>
 8008240:	e013      	b.n	800826a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008246:	4618      	mov	r0, r3
 8008248:	f7ff fe03 	bl	8007e52 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff fe27 	bl	8007ea4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825a:	4618      	mov	r0, r3
 800825c:	f000 fd10 	bl	8008c80 <RCC_SetFlashLatencyFromMSIRange>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e317      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800826a:	f000 fcc9 	bl	8008c00 <HAL_RCC_GetHCLKFreq>
 800826e:	4603      	mov	r3, r0
 8008270:	4aa4      	ldr	r2, [pc, #656]	@ (8008504 <HAL_RCC_OscConfig+0x344>)
 8008272:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008274:	4ba4      	ldr	r3, [pc, #656]	@ (8008508 <HAL_RCC_OscConfig+0x348>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4618      	mov	r0, r3
 800827a:	f7fe fa47 	bl	800670c <HAL_InitTick>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d039      	beq.n	80082f8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e308      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d01e      	beq.n	80082ce <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008290:	f7ff fdb0 	bl	8007df4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008294:	f7fe fa88 	bl	80067a8 <HAL_GetTick>
 8008298:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800829a:	e008      	b.n	80082ae <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800829c:	f7fe fa84 	bl	80067a8 <HAL_GetTick>
 80082a0:	4602      	mov	r2, r0
 80082a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d901      	bls.n	80082ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e2f5      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80082ae:	f7ff fdbf 	bl	8007e30 <LL_RCC_MSI_IsReady>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d0f1      	beq.n	800829c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082bc:	4618      	mov	r0, r3
 80082be:	f7ff fdc8 	bl	8007e52 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7ff fdec 	bl	8007ea4 <LL_RCC_MSI_SetCalibTrimming>
 80082cc:	e015      	b.n	80082fa <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80082ce:	f7ff fda0 	bl	8007e12 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80082d2:	f7fe fa69 	bl	80067a8 <HAL_GetTick>
 80082d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80082d8:	e008      	b.n	80082ec <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80082da:	f7fe fa65 	bl	80067a8 <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d901      	bls.n	80082ec <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e2d6      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80082ec:	f7ff fda0 	bl	8007e30 <LL_RCC_MSI_IsReady>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1f1      	bne.n	80082da <HAL_RCC_OscConfig+0x11a>
 80082f6:	e000      	b.n	80082fa <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80082f8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	2b00      	cmp	r3, #0
 8008304:	d047      	beq.n	8008396 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008306:	f7ff fdf6 	bl	8007ef6 <LL_RCC_GetSysClkSource>
 800830a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800830c:	f7ff feef 	bl	80080ee <LL_RCC_PLL_GetMainSource>
 8008310:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	2b08      	cmp	r3, #8
 8008316:	d005      	beq.n	8008324 <HAL_RCC_OscConfig+0x164>
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	2b0c      	cmp	r3, #12
 800831c:	d108      	bne.n	8008330 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	2b03      	cmp	r3, #3
 8008322:	d105      	bne.n	8008330 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d134      	bne.n	8008396 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e2b4      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008338:	d102      	bne.n	8008340 <HAL_RCC_OscConfig+0x180>
 800833a:	f7ff fbdd 	bl	8007af8 <LL_RCC_HSE_Enable>
 800833e:	e001      	b.n	8008344 <HAL_RCC_OscConfig+0x184>
 8008340:	f7ff fbe9 	bl	8007b16 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d012      	beq.n	8008372 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800834c:	f7fe fa2c 	bl	80067a8 <HAL_GetTick>
 8008350:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8008352:	e008      	b.n	8008366 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008354:	f7fe fa28 	bl	80067a8 <HAL_GetTick>
 8008358:	4602      	mov	r2, r0
 800835a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	2b64      	cmp	r3, #100	@ 0x64
 8008360:	d901      	bls.n	8008366 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e299      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008366:	f7ff fbe5 	bl	8007b34 <LL_RCC_HSE_IsReady>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d0f1      	beq.n	8008354 <HAL_RCC_OscConfig+0x194>
 8008370:	e011      	b.n	8008396 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008372:	f7fe fa19 	bl	80067a8 <HAL_GetTick>
 8008376:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008378:	e008      	b.n	800838c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800837a:	f7fe fa15 	bl	80067a8 <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	2b64      	cmp	r3, #100	@ 0x64
 8008386:	d901      	bls.n	800838c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e286      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800838c:	f7ff fbd2 	bl	8007b34 <LL_RCC_HSE_IsReady>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1f1      	bne.n	800837a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0302 	and.w	r3, r3, #2
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d04c      	beq.n	800843c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083a2:	f7ff fda8 	bl	8007ef6 <LL_RCC_GetSysClkSource>
 80083a6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083a8:	f7ff fea1 	bl	80080ee <LL_RCC_PLL_GetMainSource>
 80083ac:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	2b04      	cmp	r3, #4
 80083b2:	d005      	beq.n	80083c0 <HAL_RCC_OscConfig+0x200>
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	2b0c      	cmp	r3, #12
 80083b8:	d10e      	bne.n	80083d8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d10b      	bne.n	80083d8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d101      	bne.n	80083cc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e266      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff fbf1 	bl	8007bb8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80083d6:	e031      	b.n	800843c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d019      	beq.n	8008414 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083e0:	f7ff fbba 	bl	8007b58 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e4:	f7fe f9e0 	bl	80067a8 <HAL_GetTick>
 80083e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80083ea:	e008      	b.n	80083fe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083ec:	f7fe f9dc 	bl	80067a8 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d901      	bls.n	80083fe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e24d      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80083fe:	f7ff fbc9 	bl	8007b94 <LL_RCC_HSI_IsReady>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d0f1      	beq.n	80083ec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	4618      	mov	r0, r3
 800840e:	f7ff fbd3 	bl	8007bb8 <LL_RCC_HSI_SetCalibTrimming>
 8008412:	e013      	b.n	800843c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008414:	f7ff fbaf 	bl	8007b76 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008418:	f7fe f9c6 	bl	80067a8 <HAL_GetTick>
 800841c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800841e:	e008      	b.n	8008432 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008420:	f7fe f9c2 	bl	80067a8 <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	2b02      	cmp	r3, #2
 800842c:	d901      	bls.n	8008432 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e233      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008432:	f7ff fbaf 	bl	8007b94 <LL_RCC_HSI_IsReady>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1f1      	bne.n	8008420 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0308 	and.w	r3, r3, #8
 8008444:	2b00      	cmp	r3, #0
 8008446:	d106      	bne.n	8008456 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 80a3 	beq.w	800859c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d076      	beq.n	800854c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0310 	and.w	r3, r3, #16
 8008466:	2b00      	cmp	r3, #0
 8008468:	d046      	beq.n	80084f8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800846a:	f7ff fc66 	bl	8007d3a <LL_RCC_LSI1_IsReady>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d113      	bne.n	800849c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8008474:	f7ff fc3f 	bl	8007cf6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008478:	f7fe f996 	bl	80067a8 <HAL_GetTick>
 800847c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800847e:	e008      	b.n	8008492 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008480:	f7fe f992 	bl	80067a8 <HAL_GetTick>
 8008484:	4602      	mov	r2, r0
 8008486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	2b02      	cmp	r3, #2
 800848c:	d901      	bls.n	8008492 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e203      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008492:	f7ff fc52 	bl	8007d3a <LL_RCC_LSI1_IsReady>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d0f1      	beq.n	8008480 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800849c:	f7ff fc5f 	bl	8007d5e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084a0:	f7fe f982 	bl	80067a8 <HAL_GetTick>
 80084a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80084a6:	e008      	b.n	80084ba <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80084a8:	f7fe f97e 	bl	80067a8 <HAL_GetTick>
 80084ac:	4602      	mov	r2, r0
 80084ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d901      	bls.n	80084ba <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e1ef      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80084ba:	f7ff fc72 	bl	8007da2 <LL_RCC_LSI2_IsReady>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0f1      	beq.n	80084a8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7ff fc7c 	bl	8007dc6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80084ce:	f7ff fc23 	bl	8007d18 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d2:	f7fe f969 	bl	80067a8 <HAL_GetTick>
 80084d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80084d8:	e008      	b.n	80084ec <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80084da:	f7fe f965 	bl	80067a8 <HAL_GetTick>
 80084de:	4602      	mov	r2, r0
 80084e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d901      	bls.n	80084ec <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e1d6      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80084ec:	f7ff fc25 	bl	8007d3a <LL_RCC_LSI1_IsReady>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1f1      	bne.n	80084da <HAL_RCC_OscConfig+0x31a>
 80084f6:	e051      	b.n	800859c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80084f8:	f7ff fbfd 	bl	8007cf6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084fc:	f7fe f954 	bl	80067a8 <HAL_GetTick>
 8008500:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008502:	e00c      	b.n	800851e <HAL_RCC_OscConfig+0x35e>
 8008504:	2000000c 	.word	0x2000000c
 8008508:	2000005c 	.word	0x2000005c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800850c:	f7fe f94c 	bl	80067a8 <HAL_GetTick>
 8008510:	4602      	mov	r2, r0
 8008512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	2b02      	cmp	r3, #2
 8008518:	d901      	bls.n	800851e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e1bd      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800851e:	f7ff fc0c 	bl	8007d3a <LL_RCC_LSI1_IsReady>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0f1      	beq.n	800850c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8008528:	f7ff fc2a 	bl	8007d80 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800852c:	e008      	b.n	8008540 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800852e:	f7fe f93b 	bl	80067a8 <HAL_GetTick>
 8008532:	4602      	mov	r2, r0
 8008534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	2b03      	cmp	r3, #3
 800853a:	d901      	bls.n	8008540 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e1ac      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008540:	f7ff fc2f 	bl	8007da2 <LL_RCC_LSI2_IsReady>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1f1      	bne.n	800852e <HAL_RCC_OscConfig+0x36e>
 800854a:	e027      	b.n	800859c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800854c:	f7ff fc18 	bl	8007d80 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008550:	f7fe f92a 	bl	80067a8 <HAL_GetTick>
 8008554:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008556:	e008      	b.n	800856a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008558:	f7fe f926 	bl	80067a8 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	2b03      	cmp	r3, #3
 8008564:	d901      	bls.n	800856a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e197      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800856a:	f7ff fc1a 	bl	8007da2 <LL_RCC_LSI2_IsReady>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1f1      	bne.n	8008558 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8008574:	f7ff fbd0 	bl	8007d18 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008578:	f7fe f916 	bl	80067a8 <HAL_GetTick>
 800857c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800857e:	e008      	b.n	8008592 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008580:	f7fe f912 	bl	80067a8 <HAL_GetTick>
 8008584:	4602      	mov	r2, r0
 8008586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	2b02      	cmp	r3, #2
 800858c:	d901      	bls.n	8008592 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e183      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008592:	f7ff fbd2 	bl	8007d3a <LL_RCC_LSI1_IsReady>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1f1      	bne.n	8008580 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0304 	and.w	r3, r3, #4
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d05b      	beq.n	8008660 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085a8:	4ba7      	ldr	r3, [pc, #668]	@ (8008848 <HAL_RCC_OscConfig+0x688>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d114      	bne.n	80085de <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80085b4:	f7ff fa70 	bl	8007a98 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085b8:	f7fe f8f6 	bl	80067a8 <HAL_GetTick>
 80085bc:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085be:	e008      	b.n	80085d2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085c0:	f7fe f8f2 	bl	80067a8 <HAL_GetTick>
 80085c4:	4602      	mov	r2, r0
 80085c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d901      	bls.n	80085d2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e163      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085d2:	4b9d      	ldr	r3, [pc, #628]	@ (8008848 <HAL_RCC_OscConfig+0x688>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d0f0      	beq.n	80085c0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d102      	bne.n	80085ec <HAL_RCC_OscConfig+0x42c>
 80085e6:	f7ff fb30 	bl	8007c4a <LL_RCC_LSE_Enable>
 80085ea:	e00c      	b.n	8008606 <HAL_RCC_OscConfig+0x446>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	2b05      	cmp	r3, #5
 80085f2:	d104      	bne.n	80085fe <HAL_RCC_OscConfig+0x43e>
 80085f4:	f7ff fb4b 	bl	8007c8e <LL_RCC_LSE_EnableBypass>
 80085f8:	f7ff fb27 	bl	8007c4a <LL_RCC_LSE_Enable>
 80085fc:	e003      	b.n	8008606 <HAL_RCC_OscConfig+0x446>
 80085fe:	f7ff fb35 	bl	8007c6c <LL_RCC_LSE_Disable>
 8008602:	f7ff fb55 	bl	8007cb0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d014      	beq.n	8008638 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800860e:	f7fe f8cb 	bl	80067a8 <HAL_GetTick>
 8008612:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008614:	e00a      	b.n	800862c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008616:	f7fe f8c7 	bl	80067a8 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008624:	4293      	cmp	r3, r2
 8008626:	d901      	bls.n	800862c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e136      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800862c:	f7ff fb51 	bl	8007cd2 <LL_RCC_LSE_IsReady>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d0ef      	beq.n	8008616 <HAL_RCC_OscConfig+0x456>
 8008636:	e013      	b.n	8008660 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008638:	f7fe f8b6 	bl	80067a8 <HAL_GetTick>
 800863c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800863e:	e00a      	b.n	8008656 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008640:	f7fe f8b2 	bl	80067a8 <HAL_GetTick>
 8008644:	4602      	mov	r2, r0
 8008646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800864e:	4293      	cmp	r3, r2
 8008650:	d901      	bls.n	8008656 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e121      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008656:	f7ff fb3c 	bl	8007cd2 <LL_RCC_LSE_IsReady>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1ef      	bne.n	8008640 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008668:	2b00      	cmp	r3, #0
 800866a:	d02c      	beq.n	80086c6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008670:	2b00      	cmp	r3, #0
 8008672:	d014      	beq.n	800869e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008674:	f7ff fab5 	bl	8007be2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008678:	f7fe f896 	bl	80067a8 <HAL_GetTick>
 800867c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800867e:	e008      	b.n	8008692 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008680:	f7fe f892 	bl	80067a8 <HAL_GetTick>
 8008684:	4602      	mov	r2, r0
 8008686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	2b02      	cmp	r3, #2
 800868c:	d901      	bls.n	8008692 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e103      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008692:	f7ff fac8 	bl	8007c26 <LL_RCC_HSI48_IsReady>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d0f1      	beq.n	8008680 <HAL_RCC_OscConfig+0x4c0>
 800869c:	e013      	b.n	80086c6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800869e:	f7ff fab1 	bl	8007c04 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086a2:	f7fe f881 	bl	80067a8 <HAL_GetTick>
 80086a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80086a8:	e008      	b.n	80086bc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086aa:	f7fe f87d 	bl	80067a8 <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d901      	bls.n	80086bc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e0ee      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80086bc:	f7ff fab3 	bl	8007c26 <LL_RCC_HSI48_IsReady>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1f1      	bne.n	80086aa <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f000 80e4 	beq.w	8008898 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086d0:	f7ff fc11 	bl	8007ef6 <LL_RCC_GetSysClkSource>
 80086d4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80086d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	f040 80b4 	bne.w	8008850 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f003 0203 	and.w	r2, r3, #3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d123      	bne.n	800873e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008700:	429a      	cmp	r2, r3
 8008702:	d11c      	bne.n	800873e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	0a1b      	lsrs	r3, r3, #8
 8008708:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008710:	429a      	cmp	r2, r3
 8008712:	d114      	bne.n	800873e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800871e:	429a      	cmp	r2, r3
 8008720:	d10d      	bne.n	800873e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800872c:	429a      	cmp	r2, r3
 800872e:	d106      	bne.n	800873e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800873a:	429a      	cmp	r2, r3
 800873c:	d05d      	beq.n	80087fa <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	2b0c      	cmp	r3, #12
 8008742:	d058      	beq.n	80087f6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e0a1      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008756:	f7ff fc84 	bl	8008062 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800875a:	f7fe f825 	bl	80067a8 <HAL_GetTick>
 800875e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008760:	e008      	b.n	8008774 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008762:	f7fe f821 	bl	80067a8 <HAL_GetTick>
 8008766:	4602      	mov	r2, r0
 8008768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	2b02      	cmp	r3, #2
 800876e:	d901      	bls.n	8008774 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e092      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008774:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1ef      	bne.n	8008762 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008786:	68da      	ldr	r2, [r3, #12]
 8008788:	4b30      	ldr	r3, [pc, #192]	@ (800884c <HAL_RCC_OscConfig+0x68c>)
 800878a:	4013      	ands	r3, r2
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008794:	4311      	orrs	r1, r2
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800879a:	0212      	lsls	r2, r2, #8
 800879c:	4311      	orrs	r1, r2
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80087a2:	4311      	orrs	r1, r2
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80087a8:	4311      	orrs	r1, r2
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80087ae:	430a      	orrs	r2, r1
 80087b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80087b4:	4313      	orrs	r3, r2
 80087b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80087b8:	f7ff fc44 	bl	8008044 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80087bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80087c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80087cc:	f7fd ffec 	bl	80067a8 <HAL_GetTick>
 80087d0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087d2:	e008      	b.n	80087e6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087d4:	f7fd ffe8 	bl	80067a8 <HAL_GetTick>
 80087d8:	4602      	mov	r2, r0
 80087da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d901      	bls.n	80087e6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e059      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d0ef      	beq.n	80087d4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80087f4:	e050      	b.n	8008898 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e04f      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d147      	bne.n	8008898 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008808:	f7ff fc1c 	bl	8008044 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800880c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800881a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800881c:	f7fd ffc4 	bl	80067a8 <HAL_GetTick>
 8008820:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008822:	e008      	b.n	8008836 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008824:	f7fd ffc0 	bl	80067a8 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b02      	cmp	r3, #2
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e031      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008836:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d0ef      	beq.n	8008824 <HAL_RCC_OscConfig+0x664>
 8008844:	e028      	b.n	8008898 <HAL_RCC_OscConfig+0x6d8>
 8008846:	bf00      	nop
 8008848:	58000400 	.word	0x58000400
 800884c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	2b0c      	cmp	r3, #12
 8008854:	d01e      	beq.n	8008894 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008856:	f7ff fc04 	bl	8008062 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800885a:	f7fd ffa5 	bl	80067a8 <HAL_GetTick>
 800885e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008860:	e008      	b.n	8008874 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008862:	f7fd ffa1 	bl	80067a8 <HAL_GetTick>
 8008866:	4602      	mov	r2, r0
 8008868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	2b02      	cmp	r3, #2
 800886e:	d901      	bls.n	8008874 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e012      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008874:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1ef      	bne.n	8008862 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008886:	68da      	ldr	r2, [r3, #12]
 8008888:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800888c:	4b05      	ldr	r3, [pc, #20]	@ (80088a4 <HAL_RCC_OscConfig+0x6e4>)
 800888e:	4013      	ands	r3, r2
 8008890:	60cb      	str	r3, [r1, #12]
 8008892:	e001      	b.n	8008898 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e000      	b.n	800889a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3734      	adds	r7, #52	@ 0x34
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd90      	pop	{r4, r7, pc}
 80088a2:	bf00      	nop
 80088a4:	eefefffc 	.word	0xeefefffc

080088a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d101      	bne.n	80088bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e12d      	b.n	8008b18 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088bc:	4b98      	ldr	r3, [pc, #608]	@ (8008b20 <HAL_RCC_ClockConfig+0x278>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0307 	and.w	r3, r3, #7
 80088c4:	683a      	ldr	r2, [r7, #0]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d91b      	bls.n	8008902 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088ca:	4b95      	ldr	r3, [pc, #596]	@ (8008b20 <HAL_RCC_ClockConfig+0x278>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f023 0207 	bic.w	r2, r3, #7
 80088d2:	4993      	ldr	r1, [pc, #588]	@ (8008b20 <HAL_RCC_ClockConfig+0x278>)
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088da:	f7fd ff65 	bl	80067a8 <HAL_GetTick>
 80088de:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088e0:	e008      	b.n	80088f4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80088e2:	f7fd ff61 	bl	80067a8 <HAL_GetTick>
 80088e6:	4602      	mov	r2, r0
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d901      	bls.n	80088f4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e111      	b.n	8008b18 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088f4:	4b8a      	ldr	r3, [pc, #552]	@ (8008b20 <HAL_RCC_ClockConfig+0x278>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0307 	and.w	r3, r3, #7
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d1ef      	bne.n	80088e2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	2b00      	cmp	r3, #0
 800890c:	d016      	beq.n	800893c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff fafb 	bl	8007f0e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008918:	f7fd ff46 	bl	80067a8 <HAL_GetTick>
 800891c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800891e:	e008      	b.n	8008932 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008920:	f7fd ff42 	bl	80067a8 <HAL_GetTick>
 8008924:	4602      	mov	r2, r0
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	2b02      	cmp	r3, #2
 800892c:	d901      	bls.n	8008932 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e0f2      	b.n	8008b18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008932:	f7ff fbe8 	bl	8008106 <LL_RCC_IsActiveFlag_HPRE>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d0f1      	beq.n	8008920 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0320 	and.w	r3, r3, #32
 8008944:	2b00      	cmp	r3, #0
 8008946:	d016      	beq.n	8008976 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff faf2 	bl	8007f36 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008952:	f7fd ff29 	bl	80067a8 <HAL_GetTick>
 8008956:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008958:	e008      	b.n	800896c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800895a:	f7fd ff25 	bl	80067a8 <HAL_GetTick>
 800895e:	4602      	mov	r2, r0
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	2b02      	cmp	r3, #2
 8008966:	d901      	bls.n	800896c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e0d5      	b.n	8008b18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800896c:	f7ff fbdd 	bl	800812a <LL_RCC_IsActiveFlag_C2HPRE>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d0f1      	beq.n	800895a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800897e:	2b00      	cmp	r3, #0
 8008980:	d016      	beq.n	80089b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	4618      	mov	r0, r3
 8008988:	f7ff faeb 	bl	8007f62 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800898c:	f7fd ff0c 	bl	80067a8 <HAL_GetTick>
 8008990:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008992:	e008      	b.n	80089a6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008994:	f7fd ff08 	bl	80067a8 <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d901      	bls.n	80089a6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e0b8      	b.n	8008b18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80089a6:	f7ff fbd3 	bl	8008150 <LL_RCC_IsActiveFlag_SHDHPRE>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d0f1      	beq.n	8008994 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d016      	beq.n	80089ea <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7ff fae5 	bl	8007f90 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80089c6:	f7fd feef 	bl	80067a8 <HAL_GetTick>
 80089ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80089cc:	e008      	b.n	80089e0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80089ce:	f7fd feeb 	bl	80067a8 <HAL_GetTick>
 80089d2:	4602      	mov	r2, r0
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d901      	bls.n	80089e0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e09b      	b.n	8008b18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80089e0:	f7ff fbc9 	bl	8008176 <LL_RCC_IsActiveFlag_PPRE1>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0f1      	beq.n	80089ce <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0308 	and.w	r3, r3, #8
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d017      	beq.n	8008a26 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	00db      	lsls	r3, r3, #3
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7ff fadb 	bl	8007fb8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008a02:	f7fd fed1 	bl	80067a8 <HAL_GetTick>
 8008a06:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008a08:	e008      	b.n	8008a1c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008a0a:	f7fd fecd 	bl	80067a8 <HAL_GetTick>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d901      	bls.n	8008a1c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	e07d      	b.n	8008b18 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008a1c:	f7ff fbbd 	bl	800819a <LL_RCC_IsActiveFlag_PPRE2>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d0f1      	beq.n	8008a0a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d043      	beq.n	8008aba <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d106      	bne.n	8008a48 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008a3a:	f7ff f87b 	bl	8007b34 <LL_RCC_HSE_IsReady>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d11e      	bne.n	8008a82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e067      	b.n	8008b18 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d106      	bne.n	8008a5e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008a50:	f7ff fb16 	bl	8008080 <LL_RCC_PLL_IsReady>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d113      	bne.n	8008a82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e05c      	b.n	8008b18 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d106      	bne.n	8008a74 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008a66:	f7ff f9e3 	bl	8007e30 <LL_RCC_MSI_IsReady>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d108      	bne.n	8008a82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e051      	b.n	8008b18 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008a74:	f7ff f88e 	bl	8007b94 <LL_RCC_HSI_IsReady>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d101      	bne.n	8008a82 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e04a      	b.n	8008b18 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7ff fa21 	bl	8007ece <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a8c:	f7fd fe8c 	bl	80067a8 <HAL_GetTick>
 8008a90:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a92:	e00a      	b.n	8008aaa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a94:	f7fd fe88 	bl	80067a8 <HAL_GetTick>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d901      	bls.n	8008aaa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e036      	b.n	8008b18 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aaa:	f7ff fa24 	bl	8007ef6 <LL_RCC_GetSysClkSource>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d1ec      	bne.n	8008a94 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008aba:	4b19      	ldr	r3, [pc, #100]	@ (8008b20 <HAL_RCC_ClockConfig+0x278>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0307 	and.w	r3, r3, #7
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d21b      	bcs.n	8008b00 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ac8:	4b15      	ldr	r3, [pc, #84]	@ (8008b20 <HAL_RCC_ClockConfig+0x278>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f023 0207 	bic.w	r2, r3, #7
 8008ad0:	4913      	ldr	r1, [pc, #76]	@ (8008b20 <HAL_RCC_ClockConfig+0x278>)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ad8:	f7fd fe66 	bl	80067a8 <HAL_GetTick>
 8008adc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ade:	e008      	b.n	8008af2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008ae0:	f7fd fe62 	bl	80067a8 <HAL_GetTick>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d901      	bls.n	8008af2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8008aee:	2303      	movs	r3, #3
 8008af0:	e012      	b.n	8008b18 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008af2:	4b0b      	ldr	r3, [pc, #44]	@ (8008b20 <HAL_RCC_ClockConfig+0x278>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0307 	and.w	r3, r3, #7
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d1ef      	bne.n	8008ae0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008b00:	f000 f87e 	bl	8008c00 <HAL_RCC_GetHCLKFreq>
 8008b04:	4603      	mov	r3, r0
 8008b06:	4a07      	ldr	r2, [pc, #28]	@ (8008b24 <HAL_RCC_ClockConfig+0x27c>)
 8008b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8008b0a:	f7fd fe59 	bl	80067c0 <HAL_GetTickPrio>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fd fdfb 	bl	800670c <HAL_InitTick>
 8008b16:	4603      	mov	r3, r0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	58004000 	.word	0x58004000
 8008b24:	2000000c 	.word	0x2000000c

08008b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b28:	b590      	push	{r4, r7, lr}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b2e:	f7ff f9e2 	bl	8007ef6 <LL_RCC_GetSysClkSource>
 8008b32:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10a      	bne.n	8008b50 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008b3a:	f7ff f99e 	bl	8007e7a <LL_RCC_MSI_GetRange>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	091b      	lsrs	r3, r3, #4
 8008b42:	f003 030f 	and.w	r3, r3, #15
 8008b46:	4a2b      	ldr	r2, [pc, #172]	@ (8008bf4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b4c:	60fb      	str	r3, [r7, #12]
 8008b4e:	e04b      	b.n	8008be8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b04      	cmp	r3, #4
 8008b54:	d102      	bne.n	8008b5c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008b56:	4b28      	ldr	r3, [pc, #160]	@ (8008bf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008b58:	60fb      	str	r3, [r7, #12]
 8008b5a:	e045      	b.n	8008be8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b08      	cmp	r3, #8
 8008b60:	d10a      	bne.n	8008b78 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008b62:	f7fe ffb7 	bl	8007ad4 <LL_RCC_HSE_IsEnabledDiv2>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d102      	bne.n	8008b72 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008b6c:	4b22      	ldr	r3, [pc, #136]	@ (8008bf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008b6e:	60fb      	str	r3, [r7, #12]
 8008b70:	e03a      	b.n	8008be8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008b72:	4b22      	ldr	r3, [pc, #136]	@ (8008bfc <HAL_RCC_GetSysClockFreq+0xd4>)
 8008b74:	60fb      	str	r3, [r7, #12]
 8008b76:	e037      	b.n	8008be8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008b78:	f7ff fab9 	bl	80080ee <LL_RCC_PLL_GetMainSource>
 8008b7c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d003      	beq.n	8008b8c <HAL_RCC_GetSysClockFreq+0x64>
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	d003      	beq.n	8008b92 <HAL_RCC_GetSysClockFreq+0x6a>
 8008b8a:	e00d      	b.n	8008ba8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8008bf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008b8e:	60bb      	str	r3, [r7, #8]
        break;
 8008b90:	e015      	b.n	8008bbe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008b92:	f7fe ff9f 	bl	8007ad4 <LL_RCC_HSE_IsEnabledDiv2>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d102      	bne.n	8008ba2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008b9c:	4b16      	ldr	r3, [pc, #88]	@ (8008bf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008b9e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008ba0:	e00d      	b.n	8008bbe <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8008ba2:	4b16      	ldr	r3, [pc, #88]	@ (8008bfc <HAL_RCC_GetSysClockFreq+0xd4>)
 8008ba4:	60bb      	str	r3, [r7, #8]
        break;
 8008ba6:	e00a      	b.n	8008bbe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008ba8:	f7ff f967 	bl	8007e7a <LL_RCC_MSI_GetRange>
 8008bac:	4603      	mov	r3, r0
 8008bae:	091b      	lsrs	r3, r3, #4
 8008bb0:	f003 030f 	and.w	r3, r3, #15
 8008bb4:	4a0f      	ldr	r2, [pc, #60]	@ (8008bf4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bba:	60bb      	str	r3, [r7, #8]
        break;
 8008bbc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8008bbe:	f7ff fa71 	bl	80080a4 <LL_RCC_PLL_GetN>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	fb03 f402 	mul.w	r4, r3, r2
 8008bca:	f7ff fa84 	bl	80080d6 <LL_RCC_PLL_GetDivider>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	091b      	lsrs	r3, r3, #4
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	fbb4 f4f3 	udiv	r4, r4, r3
 8008bd8:	f7ff fa71 	bl	80080be <LL_RCC_PLL_GetR>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	0f5b      	lsrs	r3, r3, #29
 8008be0:	3301      	adds	r3, #1
 8008be2:	fbb4 f3f3 	udiv	r3, r4, r3
 8008be6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008be8:	68fb      	ldr	r3, [r7, #12]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3714      	adds	r7, #20
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd90      	pop	{r4, r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	0800c030 	.word	0x0800c030
 8008bf8:	00f42400 	.word	0x00f42400
 8008bfc:	01e84800 	.word	0x01e84800

08008c00 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c00:	b598      	push	{r3, r4, r7, lr}
 8008c02:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008c04:	f7ff ff90 	bl	8008b28 <HAL_RCC_GetSysClockFreq>
 8008c08:	4604      	mov	r4, r0
 8008c0a:	f7ff f9e9 	bl	8007fe0 <LL_RCC_GetAHBPrescaler>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	091b      	lsrs	r3, r3, #4
 8008c12:	f003 030f 	and.w	r3, r3, #15
 8008c16:	4a03      	ldr	r2, [pc, #12]	@ (8008c24 <HAL_RCC_GetHCLKFreq+0x24>)
 8008c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c1c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	bd98      	pop	{r3, r4, r7, pc}
 8008c24:	0800bfd0 	.word	0x0800bfd0

08008c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c28:	b598      	push	{r3, r4, r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008c2c:	f7ff ffe8 	bl	8008c00 <HAL_RCC_GetHCLKFreq>
 8008c30:	4604      	mov	r4, r0
 8008c32:	f7ff f9ef 	bl	8008014 <LL_RCC_GetAPB1Prescaler>
 8008c36:	4603      	mov	r3, r0
 8008c38:	0a1b      	lsrs	r3, r3, #8
 8008c3a:	f003 0307 	and.w	r3, r3, #7
 8008c3e:	4a04      	ldr	r2, [pc, #16]	@ (8008c50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c44:	f003 031f 	and.w	r3, r3, #31
 8008c48:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	bd98      	pop	{r3, r4, r7, pc}
 8008c50:	0800c010 	.word	0x0800c010

08008c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c54:	b598      	push	{r3, r4, r7, lr}
 8008c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008c58:	f7ff ffd2 	bl	8008c00 <HAL_RCC_GetHCLKFreq>
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	f7ff f9e5 	bl	800802c <LL_RCC_GetAPB2Prescaler>
 8008c62:	4603      	mov	r3, r0
 8008c64:	0adb      	lsrs	r3, r3, #11
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	4a04      	ldr	r2, [pc, #16]	@ (8008c7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c70:	f003 031f 	and.w	r3, r3, #31
 8008c74:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	bd98      	pop	{r3, r4, r7, pc}
 8008c7c:	0800c010 	.word	0x0800c010

08008c80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008c80:	b590      	push	{r4, r7, lr}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2bb0      	cmp	r3, #176	@ 0xb0
 8008c8c:	d903      	bls.n	8008c96 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008c8e:	4b15      	ldr	r3, [pc, #84]	@ (8008ce4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c92:	60fb      	str	r3, [r7, #12]
 8008c94:	e007      	b.n	8008ca6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	091b      	lsrs	r3, r3, #4
 8008c9a:	f003 030f 	and.w	r3, r3, #15
 8008c9e:	4a11      	ldr	r2, [pc, #68]	@ (8008ce4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ca4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008ca6:	f7ff f9a7 	bl	8007ff8 <LL_RCC_GetAHB4Prescaler>
 8008caa:	4603      	mov	r3, r0
 8008cac:	091b      	lsrs	r3, r3, #4
 8008cae:	f003 030f 	and.w	r3, r3, #15
 8008cb2:	4a0d      	ldr	r2, [pc, #52]	@ (8008ce8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cbe:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8008cec <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8008cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008cc8:	0c9c      	lsrs	r4, r3, #18
 8008cca:	f7fe fef5 	bl	8007ab8 <HAL_PWREx_GetVoltageRange>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f000 f80c 	bl	8008cf0 <RCC_SetFlashLatency>
 8008cd8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd90      	pop	{r4, r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	0800c030 	.word	0x0800c030
 8008ce8:	0800bfd0 	.word	0x0800bfd0
 8008cec:	431bde83 	.word	0x431bde83

08008cf0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008cf0:	b590      	push	{r4, r7, lr}
 8008cf2:	b093      	sub	sp, #76	@ 0x4c
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8008cfa:	4b37      	ldr	r3, [pc, #220]	@ (8008dd8 <RCC_SetFlashLatency+0xe8>)
 8008cfc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8008d00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8008d06:	4a35      	ldr	r2, [pc, #212]	@ (8008ddc <RCC_SetFlashLatency+0xec>)
 8008d08:	f107 031c 	add.w	r3, r7, #28
 8008d0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8008d12:	4b33      	ldr	r3, [pc, #204]	@ (8008de0 <RCC_SetFlashLatency+0xf0>)
 8008d14:	f107 040c 	add.w	r4, r7, #12
 8008d18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008d1e:	2300      	movs	r3, #0
 8008d20:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d28:	d11a      	bne.n	8008d60 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d2e:	e013      	b.n	8008d58 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	3348      	adds	r3, #72	@ 0x48
 8008d36:	443b      	add	r3, r7
 8008d38:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d807      	bhi.n	8008d52 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	3348      	adds	r3, #72	@ 0x48
 8008d48:	443b      	add	r3, r7
 8008d4a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008d4e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8008d50:	e020      	b.n	8008d94 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008d52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d54:	3301      	adds	r3, #1
 8008d56:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d9e8      	bls.n	8008d30 <RCC_SetFlashLatency+0x40>
 8008d5e:	e019      	b.n	8008d94 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008d60:	2300      	movs	r3, #0
 8008d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d64:	e013      	b.n	8008d8e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	3348      	adds	r3, #72	@ 0x48
 8008d6c:	443b      	add	r3, r7
 8008d6e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d807      	bhi.n	8008d88 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	3348      	adds	r3, #72	@ 0x48
 8008d7e:	443b      	add	r3, r7
 8008d80:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008d84:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8008d86:	e005      	b.n	8008d94 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d9e8      	bls.n	8008d66 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8008d94:	4b13      	ldr	r3, [pc, #76]	@ (8008de4 <RCC_SetFlashLatency+0xf4>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f023 0207 	bic.w	r2, r3, #7
 8008d9c:	4911      	ldr	r1, [pc, #68]	@ (8008de4 <RCC_SetFlashLatency+0xf4>)
 8008d9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008da0:	4313      	orrs	r3, r2
 8008da2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008da4:	f7fd fd00 	bl	80067a8 <HAL_GetTick>
 8008da8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008daa:	e008      	b.n	8008dbe <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008dac:	f7fd fcfc 	bl	80067a8 <HAL_GetTick>
 8008db0:	4602      	mov	r2, r0
 8008db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d901      	bls.n	8008dbe <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e007      	b.n	8008dce <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008dbe:	4b09      	ldr	r3, [pc, #36]	@ (8008de4 <RCC_SetFlashLatency+0xf4>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 0307 	and.w	r3, r3, #7
 8008dc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d1ef      	bne.n	8008dac <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	374c      	adds	r7, #76	@ 0x4c
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd90      	pop	{r4, r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	0800bfa4 	.word	0x0800bfa4
 8008ddc:	0800bfb4 	.word	0x0800bfb4
 8008de0:	0800bfc0 	.word	0x0800bfc0
 8008de4:	58004000 	.word	0x58004000

08008de8 <LL_RCC_LSE_IsEnabled>:
{
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008df4:	f003 0301 	and.w	r3, r3, #1
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d101      	bne.n	8008e00 <LL_RCC_LSE_IsEnabled+0x18>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e000      	b.n	8008e02 <LL_RCC_LSE_IsEnabled+0x1a>
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <LL_RCC_LSE_IsReady>:
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d101      	bne.n	8008e24 <LL_RCC_LSE_IsReady+0x18>
 8008e20:	2301      	movs	r3, #1
 8008e22:	e000      	b.n	8008e26 <LL_RCC_LSE_IsReady+0x1a>
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <LL_RCC_SetRFWKPClockSource>:
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8008e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e40:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008e44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <LL_RCC_SetSMPSClockSource>:
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8008e64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6a:	f023 0203 	bic.w	r2, r3, #3
 8008e6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <LL_RCC_SetSMPSPrescaler>:
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8008e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e92:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008e96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <LL_RCC_SetUSARTClockSource>:
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8008eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ebc:	f023 0203 	bic.w	r2, r3, #3
 8008ec0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <LL_RCC_SetLPUARTClockSource>:
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ee8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008eec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <LL_RCC_SetI2CClockSource>:
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f10:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	091b      	lsrs	r3, r3, #4
 8008f18:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8008f1c:	43db      	mvns	r3, r3
 8008f1e:	401a      	ands	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	011b      	lsls	r3, r3, #4
 8008f24:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8008f28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008f32:	bf00      	nop
 8008f34:	370c      	adds	r7, #12
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr

08008f3e <LL_RCC_SetLPTIMClockSource>:
{
 8008f3e:	b480      	push	{r7}
 8008f40:	b083      	sub	sp, #12
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008f46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	0c1b      	lsrs	r3, r3, #16
 8008f52:	041b      	lsls	r3, r3, #16
 8008f54:	43db      	mvns	r3, r3
 8008f56:	401a      	ands	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	041b      	lsls	r3, r3, #16
 8008f5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008f60:	4313      	orrs	r3, r2
 8008f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008f66:	bf00      	nop
 8008f68:	370c      	adds	r7, #12
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <LL_RCC_SetSAIClockSource>:
{
 8008f72:	b480      	push	{r7}
 8008f74:	b083      	sub	sp, #12
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008f7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008f86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008f92:	bf00      	nop
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <LL_RCC_SetRNGClockSource>:
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b083      	sub	sp, #12
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fae:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008fb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008fbe:	bf00      	nop
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <LL_RCC_SetCLK48ClockSource>:
{
 8008fca:	b480      	push	{r7}
 8008fcc:	b083      	sub	sp, #12
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008fd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008fde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008fea:	bf00      	nop
 8008fec:	370c      	adds	r7, #12
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <LL_RCC_SetUSBClockSource>:
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b082      	sub	sp, #8
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7ff ffe3 	bl	8008fca <LL_RCC_SetCLK48ClockSource>
}
 8009004:	bf00      	nop
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <LL_RCC_SetADCClockSource>:
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800901c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009020:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4313      	orrs	r3, r2
 8009028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <LL_RCC_SetRTCClockSource>:
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009048:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800904c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4313      	orrs	r3, r2
 8009054:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <LL_RCC_GetRTCClockSource>:
{
 8009064:	b480      	push	{r7}
 8009066:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8009068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800906c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009070:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8009074:	4618      	mov	r0, r3
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <LL_RCC_ForceBackupDomainReset>:
{
 800907e:	b480      	push	{r7}
 8009080:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009082:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800908a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800908e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009092:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8009096:	bf00      	nop
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <LL_RCC_ReleaseBackupDomainReset>:
{
 80090a0:	b480      	push	{r7}
 80090a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80090a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80090b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80090b8:	bf00      	nop
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <LL_RCC_PLLSAI1_Enable>:
{
 80090c2:	b480      	push	{r7}
 80090c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80090c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80090d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80090d4:	6013      	str	r3, [r2, #0]
}
 80090d6:	bf00      	nop
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <LL_RCC_PLLSAI1_Disable>:
{
 80090e0:	b480      	push	{r7}
 80090e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80090e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80090ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80090f2:	6013      	str	r3, [r2, #0]
}
 80090f4:	bf00      	nop
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr

080090fe <LL_RCC_PLLSAI1_IsReady>:
{
 80090fe:	b480      	push	{r7}
 8009100:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8009102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800910c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009110:	d101      	bne.n	8009116 <LL_RCC_PLLSAI1_IsReady+0x18>
 8009112:	2301      	movs	r3, #1
 8009114:	e000      	b.n	8009118 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr

08009122 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b088      	sub	sp, #32
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800912a:	2300      	movs	r3, #0
 800912c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800912e:	2300      	movs	r3, #0
 8009130:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800913a:	2b00      	cmp	r3, #0
 800913c:	d034      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009142:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009146:	d021      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8009148:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800914c:	d81b      	bhi.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800914e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009152:	d01d      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8009154:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009158:	d815      	bhi.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00b      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800915e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009162:	d110      	bne.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8009164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800916e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009172:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8009174:	e00d      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	3304      	adds	r3, #4
 800917a:	4618      	mov	r0, r3
 800917c:	f000 f947 	bl	800940e <RCCEx_PLLSAI1_ConfigNP>
 8009180:	4603      	mov	r3, r0
 8009182:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009184:	e005      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	77fb      	strb	r3, [r7, #31]
        break;
 800918a:	e002      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800918c:	bf00      	nop
 800918e:	e000      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8009190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009192:	7ffb      	ldrb	r3, [r7, #31]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d105      	bne.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800919c:	4618      	mov	r0, r3
 800919e:	f7ff fee8 	bl	8008f72 <LL_RCC_SetSAIClockSource>
 80091a2:	e001      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091a4:	7ffb      	ldrb	r3, [r7, #31]
 80091a6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d046      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80091b4:	f7ff ff56 	bl	8009064 <LL_RCC_GetRTCClockSource>
 80091b8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091be:	69ba      	ldr	r2, [r7, #24]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d03c      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80091c4:	f7fe fc68 	bl	8007a98 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d105      	bne.n	80091da <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7ff ff30 	bl	8009038 <LL_RCC_SetRTCClockSource>
 80091d8:	e02e      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80091da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091e2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80091e4:	f7ff ff4b 	bl	800907e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80091e8:	f7ff ff5a 	bl	80090a0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f6:	4313      	orrs	r3, r2
 80091f8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80091fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8009204:	f7ff fdf0 	bl	8008de8 <LL_RCC_LSE_IsEnabled>
 8009208:	4603      	mov	r3, r0
 800920a:	2b01      	cmp	r3, #1
 800920c:	d114      	bne.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800920e:	f7fd facb 	bl	80067a8 <HAL_GetTick>
 8009212:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8009214:	e00b      	b.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009216:	f7fd fac7 	bl	80067a8 <HAL_GetTick>
 800921a:	4602      	mov	r2, r0
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009224:	4293      	cmp	r3, r2
 8009226:	d902      	bls.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	77fb      	strb	r3, [r7, #31]
              break;
 800922c:	e004      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800922e:	f7ff fded 	bl	8008e0c <LL_RCC_LSE_IsReady>
 8009232:	4603      	mov	r3, r0
 8009234:	2b01      	cmp	r3, #1
 8009236:	d1ee      	bne.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8009238:	7ffb      	ldrb	r3, [r7, #31]
 800923a:	77bb      	strb	r3, [r7, #30]
 800923c:	e001      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800923e:	7ffb      	ldrb	r3, [r7, #31]
 8009240:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	2b00      	cmp	r3, #0
 800924c:	d004      	beq.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	4618      	mov	r0, r3
 8009254:	f7ff fe2a 	bl	8008eac <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b00      	cmp	r3, #0
 8009262:	d004      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	69db      	ldr	r3, [r3, #28]
 8009268:	4618      	mov	r0, r3
 800926a:	f7ff fe35 	bl	8008ed8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 0310 	and.w	r3, r3, #16
 8009276:	2b00      	cmp	r3, #0
 8009278:	d004      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff fe5d 	bl	8008f3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 0320 	and.w	r3, r3, #32
 800928c:	2b00      	cmp	r3, #0
 800928e:	d004      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009294:	4618      	mov	r0, r3
 8009296:	f7ff fe52 	bl	8008f3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 0304 	and.w	r3, r3, #4
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d004      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7ff fe2a 	bl	8008f04 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 0308 	and.w	r3, r3, #8
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d004      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7ff fe1f 	bl	8008f04 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d022      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7ff fe8d 	bl	8008ff6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092e4:	d107      	bne.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80092e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80092f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80092f4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80092fe:	d10b      	bne.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	3304      	adds	r3, #4
 8009304:	4618      	mov	r0, r3
 8009306:	f000 f8dd 	bl	80094c4 <RCCEx_PLLSAI1_ConfigNQ>
 800930a:	4603      	mov	r3, r0
 800930c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800930e:	7ffb      	ldrb	r3, [r7, #31]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8009314:	7ffb      	ldrb	r3, [r7, #31]
 8009316:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009320:	2b00      	cmp	r3, #0
 8009322:	d02b      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800932c:	d008      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009332:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009336:	d003      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800933c:	2b00      	cmp	r3, #0
 800933e:	d105      	bne.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009344:	4618      	mov	r0, r3
 8009346:	f7ff fe2a 	bl	8008f9e <LL_RCC_SetRNGClockSource>
 800934a:	e00a      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009350:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009354:	60fb      	str	r3, [r7, #12]
 8009356:	2000      	movs	r0, #0
 8009358:	f7ff fe21 	bl	8008f9e <LL_RCC_SetRNGClockSource>
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f7ff fe34 	bl	8008fca <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009366:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800936a:	d107      	bne.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800936c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009376:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800937a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009384:	2b00      	cmp	r3, #0
 8009386:	d022      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff fe3d 	bl	800900c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009396:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800939a:	d107      	bne.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800939c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80093a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093aa:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093b4:	d10b      	bne.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	3304      	adds	r3, #4
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 f8dd 	bl	800957a <RCCEx_PLLSAI1_ConfigNR>
 80093c0:	4603      	mov	r3, r0
 80093c2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80093c4:	7ffb      	ldrb	r3, [r7, #31]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80093ca:	7ffb      	ldrb	r3, [r7, #31]
 80093cc:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d004      	beq.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093de:	4618      	mov	r0, r3
 80093e0:	f7ff fd26 	bl	8008e30 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d009      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7ff fd45 	bl	8008e84 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093fe:	4618      	mov	r0, r3
 8009400:	f7ff fd2c 	bl	8008e5c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8009404:	7fbb      	ldrb	r3, [r7, #30]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3720      	adds	r7, #32
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b084      	sub	sp, #16
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800941a:	f7ff fe61 	bl	80090e0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800941e:	f7fd f9c3 	bl	80067a8 <HAL_GetTick>
 8009422:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009424:	e009      	b.n	800943a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009426:	f7fd f9bf 	bl	80067a8 <HAL_GetTick>
 800942a:	4602      	mov	r2, r0
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	2b02      	cmp	r3, #2
 8009432:	d902      	bls.n	800943a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	73fb      	strb	r3, [r7, #15]
      break;
 8009438:	e004      	b.n	8009444 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800943a:	f7ff fe60 	bl	80090fe <LL_RCC_PLLSAI1_IsReady>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1f0      	bne.n	8009426 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8009444:	7bfb      	ldrb	r3, [r7, #15]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d137      	bne.n	80094ba <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800944a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	021b      	lsls	r3, r3, #8
 800945a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800945e:	4313      	orrs	r3, r2
 8009460:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8009462:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009474:	4313      	orrs	r3, r2
 8009476:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009478:	f7ff fe23 	bl	80090c2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800947c:	f7fd f994 	bl	80067a8 <HAL_GetTick>
 8009480:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009482:	e009      	b.n	8009498 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009484:	f7fd f990 	bl	80067a8 <HAL_GetTick>
 8009488:	4602      	mov	r2, r0
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	2b02      	cmp	r3, #2
 8009490:	d902      	bls.n	8009498 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8009492:	2303      	movs	r3, #3
 8009494:	73fb      	strb	r3, [r7, #15]
        break;
 8009496:	e004      	b.n	80094a2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009498:	f7ff fe31 	bl	80090fe <LL_RCC_PLLSAI1_IsReady>
 800949c:	4603      	mov	r3, r0
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d1f0      	bne.n	8009484 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80094a2:	7bfb      	ldrb	r3, [r7, #15]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d108      	bne.n	80094ba <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80094a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094ac:	691a      	ldr	r2, [r3, #16]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80094b6:	4313      	orrs	r3, r2
 80094b8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80094ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80094d0:	f7ff fe06 	bl	80090e0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80094d4:	f7fd f968 	bl	80067a8 <HAL_GetTick>
 80094d8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80094da:	e009      	b.n	80094f0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80094dc:	f7fd f964 	bl	80067a8 <HAL_GetTick>
 80094e0:	4602      	mov	r2, r0
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d902      	bls.n	80094f0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80094ea:	2303      	movs	r3, #3
 80094ec:	73fb      	strb	r3, [r7, #15]
      break;
 80094ee:	e004      	b.n	80094fa <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80094f0:	f7ff fe05 	bl	80090fe <LL_RCC_PLLSAI1_IsReady>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1f0      	bne.n	80094dc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80094fa:	7bfb      	ldrb	r3, [r7, #15]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d137      	bne.n	8009570 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	021b      	lsls	r3, r3, #8
 8009510:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009514:	4313      	orrs	r3, r2
 8009516:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8009518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800952a:	4313      	orrs	r3, r2
 800952c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800952e:	f7ff fdc8 	bl	80090c2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009532:	f7fd f939 	bl	80067a8 <HAL_GetTick>
 8009536:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009538:	e009      	b.n	800954e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800953a:	f7fd f935 	bl	80067a8 <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	2b02      	cmp	r3, #2
 8009546:	d902      	bls.n	800954e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8009548:	2303      	movs	r3, #3
 800954a:	73fb      	strb	r3, [r7, #15]
        break;
 800954c:	e004      	b.n	8009558 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800954e:	f7ff fdd6 	bl	80090fe <LL_RCC_PLLSAI1_IsReady>
 8009552:	4603      	mov	r3, r0
 8009554:	2b01      	cmp	r3, #1
 8009556:	d1f0      	bne.n	800953a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8009558:	7bfb      	ldrb	r3, [r7, #15]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d108      	bne.n	8009570 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800955e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009562:	691a      	ldr	r2, [r3, #16]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800956c:	4313      	orrs	r3, r2
 800956e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009570:	7bfb      	ldrb	r3, [r7, #15]
}
 8009572:	4618      	mov	r0, r3
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b084      	sub	sp, #16
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009586:	f7ff fdab 	bl	80090e0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800958a:	f7fd f90d 	bl	80067a8 <HAL_GetTick>
 800958e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009590:	e009      	b.n	80095a6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009592:	f7fd f909 	bl	80067a8 <HAL_GetTick>
 8009596:	4602      	mov	r2, r0
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	2b02      	cmp	r3, #2
 800959e:	d902      	bls.n	80095a6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80095a0:	2303      	movs	r3, #3
 80095a2:	73fb      	strb	r3, [r7, #15]
      break;
 80095a4:	e004      	b.n	80095b0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80095a6:	f7ff fdaa 	bl	80090fe <LL_RCC_PLLSAI1_IsReady>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1f0      	bne.n	8009592 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d137      	bne.n	8009626 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80095b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	021b      	lsls	r3, r3, #8
 80095c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80095ca:	4313      	orrs	r3, r2
 80095cc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80095ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80095e0:	4313      	orrs	r3, r2
 80095e2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80095e4:	f7ff fd6d 	bl	80090c2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095e8:	f7fd f8de 	bl	80067a8 <HAL_GetTick>
 80095ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80095ee:	e009      	b.n	8009604 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80095f0:	f7fd f8da 	bl	80067a8 <HAL_GetTick>
 80095f4:	4602      	mov	r2, r0
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d902      	bls.n	8009604 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	73fb      	strb	r3, [r7, #15]
        break;
 8009602:	e004      	b.n	800960e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009604:	f7ff fd7b 	bl	80090fe <LL_RCC_PLLSAI1_IsReady>
 8009608:	4603      	mov	r3, r0
 800960a:	2b01      	cmp	r3, #1
 800960c:	d1f0      	bne.n	80095f0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800960e:	7bfb      	ldrb	r3, [r7, #15]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d108      	bne.n	8009626 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009618:	691a      	ldr	r2, [r3, #16]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009622:	4313      	orrs	r3, r2
 8009624:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009626:	7bfb      	ldrb	r3, [r7, #15]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d101      	bne.n	8009642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e095      	b.n	800976e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009646:	2b00      	cmp	r3, #0
 8009648:	d108      	bne.n	800965c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009652:	d009      	beq.n	8009668 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	61da      	str	r2, [r3, #28]
 800965a:	e005      	b.n	8009668 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009674:	b2db      	uxtb	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d106      	bne.n	8009688 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f7f7 fb0e 	bl	8000ca4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2202      	movs	r2, #2
 800968c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800969e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80096a8:	d902      	bls.n	80096b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80096aa:	2300      	movs	r3, #0
 80096ac:	60fb      	str	r3, [r7, #12]
 80096ae:	e002      	b.n	80096b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80096b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80096b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80096be:	d007      	beq.n	80096d0 <HAL_SPI_Init+0xa0>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80096c8:	d002      	beq.n	80096d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80096e0:	431a      	orrs	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	f003 0302 	and.w	r3, r3, #2
 80096ea:	431a      	orrs	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	695b      	ldr	r3, [r3, #20]
 80096f0:	f003 0301 	and.w	r3, r3, #1
 80096f4:	431a      	orrs	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096fe:	431a      	orrs	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	69db      	ldr	r3, [r3, #28]
 8009704:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009708:	431a      	orrs	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a1b      	ldr	r3, [r3, #32]
 800970e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009712:	ea42 0103 	orr.w	r1, r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800971a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	430a      	orrs	r2, r1
 8009724:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	0c1b      	lsrs	r3, r3, #16
 800972c:	f003 0204 	and.w	r2, r3, #4
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009734:	f003 0310 	and.w	r3, r3, #16
 8009738:	431a      	orrs	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800973e:	f003 0308 	and.w	r3, r3, #8
 8009742:	431a      	orrs	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800974c:	ea42 0103 	orr.w	r1, r2, r3
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	430a      	orrs	r2, r1
 800975c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b088      	sub	sp, #32
 800977a:	af00      	add	r7, sp, #0
 800977c:	60f8      	str	r0, [r7, #12]
 800977e:	60b9      	str	r1, [r7, #8]
 8009780:	603b      	str	r3, [r7, #0]
 8009782:	4613      	mov	r3, r2
 8009784:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009790:	2b01      	cmp	r3, #1
 8009792:	d101      	bne.n	8009798 <HAL_SPI_Transmit+0x22>
 8009794:	2302      	movs	r3, #2
 8009796:	e15f      	b.n	8009a58 <HAL_SPI_Transmit+0x2e2>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097a0:	f7fd f802 	bl	80067a8 <HAL_GetTick>
 80097a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80097a6:	88fb      	ldrh	r3, [r7, #6]
 80097a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d002      	beq.n	80097bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80097b6:	2302      	movs	r3, #2
 80097b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80097ba:	e148      	b.n	8009a4e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d002      	beq.n	80097c8 <HAL_SPI_Transmit+0x52>
 80097c2:	88fb      	ldrh	r3, [r7, #6]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d102      	bne.n	80097ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80097cc:	e13f      	b.n	8009a4e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2203      	movs	r2, #3
 80097d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	88fa      	ldrh	r2, [r7, #6]
 80097e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	88fa      	ldrh	r2, [r7, #6]
 80097ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009818:	d10f      	bne.n	800983a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009828:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009838:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009844:	2b40      	cmp	r3, #64	@ 0x40
 8009846:	d007      	beq.n	8009858 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009856:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009860:	d94f      	bls.n	8009902 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d002      	beq.n	8009870 <HAL_SPI_Transmit+0xfa>
 800986a:	8afb      	ldrh	r3, [r7, #22]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d142      	bne.n	80098f6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009874:	881a      	ldrh	r2, [r3, #0]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009880:	1c9a      	adds	r2, r3, #2
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800988a:	b29b      	uxth	r3, r3
 800988c:	3b01      	subs	r3, #1
 800988e:	b29a      	uxth	r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009894:	e02f      	b.n	80098f6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	f003 0302 	and.w	r3, r3, #2
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d112      	bne.n	80098ca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a8:	881a      	ldrh	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098b4:	1c9a      	adds	r2, r3, #2
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098be:	b29b      	uxth	r3, r3
 80098c0:	3b01      	subs	r3, #1
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80098c8:	e015      	b.n	80098f6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098ca:	f7fc ff6d 	bl	80067a8 <HAL_GetTick>
 80098ce:	4602      	mov	r2, r0
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	683a      	ldr	r2, [r7, #0]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d803      	bhi.n	80098e2 <HAL_SPI_Transmit+0x16c>
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e0:	d102      	bne.n	80098e8 <HAL_SPI_Transmit+0x172>
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d106      	bne.n	80098f6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80098e8:	2303      	movs	r3, #3
 80098ea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80098f4:	e0ab      	b.n	8009a4e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1ca      	bne.n	8009896 <HAL_SPI_Transmit+0x120>
 8009900:	e080      	b.n	8009a04 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d002      	beq.n	8009910 <HAL_SPI_Transmit+0x19a>
 800990a:	8afb      	ldrh	r3, [r7, #22]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d174      	bne.n	80099fa <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009914:	b29b      	uxth	r3, r3
 8009916:	2b01      	cmp	r3, #1
 8009918:	d912      	bls.n	8009940 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800991e:	881a      	ldrh	r2, [r3, #0]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800992a:	1c9a      	adds	r2, r3, #2
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009934:	b29b      	uxth	r3, r3
 8009936:	3b02      	subs	r3, #2
 8009938:	b29a      	uxth	r2, r3
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800993e:	e05c      	b.n	80099fa <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	330c      	adds	r3, #12
 800994a:	7812      	ldrb	r2, [r2, #0]
 800994c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009952:	1c5a      	adds	r2, r3, #1
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800995c:	b29b      	uxth	r3, r3
 800995e:	3b01      	subs	r3, #1
 8009960:	b29a      	uxth	r2, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009966:	e048      	b.n	80099fa <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	f003 0302 	and.w	r3, r3, #2
 8009972:	2b02      	cmp	r3, #2
 8009974:	d12b      	bne.n	80099ce <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800997a:	b29b      	uxth	r3, r3
 800997c:	2b01      	cmp	r3, #1
 800997e:	d912      	bls.n	80099a6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009984:	881a      	ldrh	r2, [r3, #0]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009990:	1c9a      	adds	r2, r3, #2
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800999a:	b29b      	uxth	r3, r3
 800999c:	3b02      	subs	r3, #2
 800999e:	b29a      	uxth	r2, r3
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80099a4:	e029      	b.n	80099fa <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	330c      	adds	r3, #12
 80099b0:	7812      	ldrb	r2, [r2, #0]
 80099b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b8:	1c5a      	adds	r2, r3, #1
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	3b01      	subs	r3, #1
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80099cc:	e015      	b.n	80099fa <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099ce:	f7fc feeb 	bl	80067a8 <HAL_GetTick>
 80099d2:	4602      	mov	r2, r0
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d803      	bhi.n	80099e6 <HAL_SPI_Transmit+0x270>
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e4:	d102      	bne.n	80099ec <HAL_SPI_Transmit+0x276>
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d106      	bne.n	80099fa <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80099ec:	2303      	movs	r3, #3
 80099ee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80099f8:	e029      	b.n	8009a4e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1b1      	bne.n	8009968 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a04:	69ba      	ldr	r2, [r7, #24]
 8009a06:	6839      	ldr	r1, [r7, #0]
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f000 fa5b 	bl	8009ec4 <SPI_EndRxTxTransaction>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2220      	movs	r2, #32
 8009a18:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10a      	bne.n	8009a38 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a22:	2300      	movs	r3, #0
 8009a24:	613b      	str	r3, [r7, #16]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	613b      	str	r3, [r7, #16]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	613b      	str	r3, [r7, #16]
 8009a36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d002      	beq.n	8009a46 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	77fb      	strb	r3, [r7, #31]
 8009a44:	e003      	b.n	8009a4e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009a56:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3720      	adds	r7, #32
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b088      	sub	sp, #32
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10e      	bne.n	8009aa0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d009      	beq.n	8009aa0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d004      	beq.n	8009aa0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	4798      	blx	r3
    return;
 8009a9e:	e0ce      	b.n	8009c3e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	f003 0302 	and.w	r3, r3, #2
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d009      	beq.n	8009abe <HAL_SPI_IRQHandler+0x5e>
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d004      	beq.n	8009abe <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	4798      	blx	r3
    return;
 8009abc:	e0bf      	b.n	8009c3e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	f003 0320 	and.w	r3, r3, #32
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10a      	bne.n	8009ade <HAL_SPI_IRQHandler+0x7e>
 8009ac8:	69bb      	ldr	r3, [r7, #24]
 8009aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d105      	bne.n	8009ade <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 80b0 	beq.w	8009c3e <HAL_SPI_IRQHandler+0x1de>
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	f003 0320 	and.w	r3, r3, #32
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 80aa 	beq.w	8009c3e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d023      	beq.n	8009b3c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	2b03      	cmp	r3, #3
 8009afe:	d011      	beq.n	8009b24 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b04:	f043 0204 	orr.w	r2, r3, #4
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	617b      	str	r3, [r7, #20]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	617b      	str	r3, [r7, #20]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	617b      	str	r3, [r7, #20]
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	e00b      	b.n	8009b3c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b24:	2300      	movs	r3, #0
 8009b26:	613b      	str	r3, [r7, #16]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	613b      	str	r3, [r7, #16]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	613b      	str	r3, [r7, #16]
 8009b38:	693b      	ldr	r3, [r7, #16]
        return;
 8009b3a:	e080      	b.n	8009c3e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	f003 0320 	and.w	r3, r3, #32
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d014      	beq.n	8009b70 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b4a:	f043 0201 	orr.w	r2, r3, #1
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009b52:	2300      	movs	r3, #0
 8009b54:	60fb      	str	r3, [r7, #12]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	60fb      	str	r3, [r7, #12]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b6c:	601a      	str	r2, [r3, #0]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00c      	beq.n	8009b94 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b7e:	f043 0208 	orr.w	r2, r3, #8
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009b86:	2300      	movs	r3, #0
 8009b88:	60bb      	str	r3, [r7, #8]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	60bb      	str	r3, [r7, #8]
 8009b92:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d04f      	beq.n	8009c3c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	685a      	ldr	r2, [r3, #4]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009baa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	f003 0302 	and.w	r3, r3, #2
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d104      	bne.n	8009bc8 <HAL_SPI_IRQHandler+0x168>
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	f003 0301 	and.w	r3, r3, #1
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d034      	beq.n	8009c32 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f022 0203 	bic.w	r2, r2, #3
 8009bd6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d011      	beq.n	8009c04 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009be4:	4a17      	ldr	r2, [pc, #92]	@ (8009c44 <HAL_SPI_IRQHandler+0x1e4>)
 8009be6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fc ff26 	bl	8006a3e <HAL_DMA_Abort_IT>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d005      	beq.n	8009c04 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bfc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d016      	beq.n	8009c3a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c10:	4a0c      	ldr	r2, [pc, #48]	@ (8009c44 <HAL_SPI_IRQHandler+0x1e4>)
 8009c12:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7fc ff10 	bl	8006a3e <HAL_DMA_Abort_IT>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00a      	beq.n	8009c3a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8009c30:	e003      	b.n	8009c3a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f808 	bl	8009c48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009c38:	e000      	b.n	8009c3c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8009c3a:	bf00      	nop
    return;
 8009c3c:	bf00      	nop
  }
}
 8009c3e:	3720      	adds	r7, #32
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	08009c5d 	.word	0x08009c5d

08009c48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009c50:	bf00      	nop
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c68:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f7ff ffe5 	bl	8009c48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c7e:	bf00      	nop
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
	...

08009c88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b088      	sub	sp, #32
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	603b      	str	r3, [r7, #0]
 8009c94:	4613      	mov	r3, r2
 8009c96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009c98:	f7fc fd86 	bl	80067a8 <HAL_GetTick>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca0:	1a9b      	subs	r3, r3, r2
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009ca8:	f7fc fd7e 	bl	80067a8 <HAL_GetTick>
 8009cac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009cae:	4b39      	ldr	r3, [pc, #228]	@ (8009d94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	015b      	lsls	r3, r3, #5
 8009cb4:	0d1b      	lsrs	r3, r3, #20
 8009cb6:	69fa      	ldr	r2, [r7, #28]
 8009cb8:	fb02 f303 	mul.w	r3, r2, r3
 8009cbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009cbe:	e054      	b.n	8009d6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc6:	d050      	beq.n	8009d6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009cc8:	f7fc fd6e 	bl	80067a8 <HAL_GetTick>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	69fa      	ldr	r2, [r7, #28]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d902      	bls.n	8009cde <SPI_WaitFlagStateUntilTimeout+0x56>
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d13d      	bne.n	8009d5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	685a      	ldr	r2, [r3, #4]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009cec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009cf6:	d111      	bne.n	8009d1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d00:	d004      	beq.n	8009d0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d0a:	d107      	bne.n	8009d1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d24:	d10f      	bne.n	8009d46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009d34:	601a      	str	r2, [r3, #0]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009d44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009d56:	2303      	movs	r3, #3
 8009d58:	e017      	b.n	8009d8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d101      	bne.n	8009d64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009d60:	2300      	movs	r3, #0
 8009d62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	3b01      	subs	r3, #1
 8009d68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	689a      	ldr	r2, [r3, #8]
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	4013      	ands	r3, r2
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	bf0c      	ite	eq
 8009d7a:	2301      	moveq	r3, #1
 8009d7c:	2300      	movne	r3, #0
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	461a      	mov	r2, r3
 8009d82:	79fb      	ldrb	r3, [r7, #7]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d19b      	bne.n	8009cc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3720      	adds	r7, #32
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	2000000c 	.word	0x2000000c

08009d98 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b08a      	sub	sp, #40	@ 0x28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
 8009da4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009daa:	f7fc fcfd 	bl	80067a8 <HAL_GetTick>
 8009dae:	4602      	mov	r2, r0
 8009db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db2:	1a9b      	subs	r3, r3, r2
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	4413      	add	r3, r2
 8009db8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009dba:	f7fc fcf5 	bl	80067a8 <HAL_GetTick>
 8009dbe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	330c      	adds	r3, #12
 8009dc6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009dc8:	4b3d      	ldr	r3, [pc, #244]	@ (8009ec0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	4613      	mov	r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4413      	add	r3, r2
 8009dd2:	00da      	lsls	r2, r3, #3
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	0d1b      	lsrs	r3, r3, #20
 8009dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dda:	fb02 f303 	mul.w	r3, r2, r3
 8009dde:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009de0:	e060      	b.n	8009ea4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009de8:	d107      	bne.n	8009dfa <SPI_WaitFifoStateUntilTimeout+0x62>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d104      	bne.n	8009dfa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009df8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e00:	d050      	beq.n	8009ea4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e02:	f7fc fcd1 	bl	80067a8 <HAL_GetTick>
 8009e06:	4602      	mov	r2, r0
 8009e08:	6a3b      	ldr	r3, [r7, #32]
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d902      	bls.n	8009e18 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d13d      	bne.n	8009e94 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	685a      	ldr	r2, [r3, #4]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009e26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009e30:	d111      	bne.n	8009e56 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e3a:	d004      	beq.n	8009e46 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e44:	d107      	bne.n	8009e56 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e5e:	d10f      	bne.n	8009e80 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009e6e:	601a      	str	r2, [r3, #0]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009e7e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009e90:	2303      	movs	r3, #3
 8009e92:	e010      	b.n	8009eb6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d101      	bne.n	8009e9e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	689a      	ldr	r2, [r3, #8]
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	4013      	ands	r3, r2
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d196      	bne.n	8009de2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3728      	adds	r7, #40	@ 0x28
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	2000000c 	.word	0x2000000c

08009ec4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af02      	add	r7, sp, #8
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	9300      	str	r3, [sp, #0]
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f7ff ff5b 	bl	8009d98 <SPI_WaitFifoStateUntilTimeout>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d007      	beq.n	8009ef8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009eec:	f043 0220 	orr.w	r2, r3, #32
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	e027      	b.n	8009f48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	2200      	movs	r2, #0
 8009f00:	2180      	movs	r1, #128	@ 0x80
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f7ff fec0 	bl	8009c88 <SPI_WaitFlagStateUntilTimeout>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d007      	beq.n	8009f1e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f12:	f043 0220 	orr.w	r2, r3, #32
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	e014      	b.n	8009f48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f7ff ff34 	bl	8009d98 <SPI_WaitFifoStateUntilTimeout>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d007      	beq.n	8009f46 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f3a:	f043 0220 	orr.w	r2, r3, #32
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e000      	b.n	8009f48 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d101      	bne.n	8009f64 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e097      	b.n	800a094 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d106      	bne.n	8009f7e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f7f6 fecb 	bl	8000d14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2202      	movs	r2, #2
 8009f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	6812      	ldr	r2, [r2, #0]
 8009f90:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8009f94:	f023 0307 	bic.w	r3, r3, #7
 8009f98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	4610      	mov	r0, r2
 8009fa6:	f000 f9b3 	bl	800a310 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	699b      	ldr	r3, [r3, #24]
 8009fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	6a1b      	ldr	r3, [r3, #32]
 8009fc0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fd2:	f023 0303 	bic.w	r3, r3, #3
 8009fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	689a      	ldr	r2, [r3, #8]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	699b      	ldr	r3, [r3, #24]
 8009fe0:	021b      	lsls	r3, r3, #8
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009ff0:	f023 030c 	bic.w	r3, r3, #12
 8009ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ffc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a000:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	68da      	ldr	r2, [r3, #12]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	021b      	lsls	r3, r3, #8
 800a00c:	4313      	orrs	r3, r2
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	4313      	orrs	r3, r2
 800a012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	011a      	lsls	r2, r3, #4
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	6a1b      	ldr	r3, [r3, #32]
 800a01e:	031b      	lsls	r3, r3, #12
 800a020:	4313      	orrs	r3, r2
 800a022:	693a      	ldr	r2, [r7, #16]
 800a024:	4313      	orrs	r3, r2
 800a026:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a02e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a036:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	695b      	ldr	r3, [r3, #20]
 800a040:	011b      	lsls	r3, r3, #4
 800a042:	4313      	orrs	r3, r2
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	4313      	orrs	r3, r2
 800a048:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	697a      	ldr	r2, [r7, #20]
 800a050:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	693a      	ldr	r2, [r7, #16]
 800a058:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2201      	movs	r2, #1
 800a066:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2201      	movs	r2, #1
 800a06e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3718      	adds	r7, #24
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	f003 0302 	and.w	r3, r3, #2
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d020      	beq.n	800a100 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f003 0302 	and.w	r3, r3, #2
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d01b      	beq.n	800a100 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f06f 0202 	mvn.w	r2, #2
 800a0d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	699b      	ldr	r3, [r3, #24]
 800a0de:	f003 0303 	and.w	r3, r3, #3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d003      	beq.n	800a0ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 f8f3 	bl	800a2d2 <HAL_TIM_IC_CaptureCallback>
 800a0ec:	e005      	b.n	800a0fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 f8e5 	bl	800a2be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 f8f6 	bl	800a2e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	f003 0304 	and.w	r3, r3, #4
 800a106:	2b00      	cmp	r3, #0
 800a108:	d020      	beq.n	800a14c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f003 0304 	and.w	r3, r3, #4
 800a110:	2b00      	cmp	r3, #0
 800a112:	d01b      	beq.n	800a14c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f06f 0204 	mvn.w	r2, #4
 800a11c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2202      	movs	r2, #2
 800a122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d003      	beq.n	800a13a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f8cd 	bl	800a2d2 <HAL_TIM_IC_CaptureCallback>
 800a138:	e005      	b.n	800a146 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f8bf 	bl	800a2be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f8d0 	bl	800a2e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	f003 0308 	and.w	r3, r3, #8
 800a152:	2b00      	cmp	r3, #0
 800a154:	d020      	beq.n	800a198 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f003 0308 	and.w	r3, r3, #8
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d01b      	beq.n	800a198 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f06f 0208 	mvn.w	r2, #8
 800a168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2204      	movs	r2, #4
 800a16e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	69db      	ldr	r3, [r3, #28]
 800a176:	f003 0303 	and.w	r3, r3, #3
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d003      	beq.n	800a186 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 f8a7 	bl	800a2d2 <HAL_TIM_IC_CaptureCallback>
 800a184:	e005      	b.n	800a192 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f899 	bl	800a2be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 f8aa 	bl	800a2e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	f003 0310 	and.w	r3, r3, #16
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d020      	beq.n	800a1e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f003 0310 	and.w	r3, r3, #16
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d01b      	beq.n	800a1e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f06f 0210 	mvn.w	r2, #16
 800a1b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2208      	movs	r2, #8
 800a1ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	69db      	ldr	r3, [r3, #28]
 800a1c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d003      	beq.n	800a1d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 f881 	bl	800a2d2 <HAL_TIM_IC_CaptureCallback>
 800a1d0:	e005      	b.n	800a1de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 f873 	bl	800a2be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f884 	bl	800a2e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	f003 0301 	and.w	r3, r3, #1
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00c      	beq.n	800a208 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f003 0301 	and.w	r3, r3, #1
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d007      	beq.n	800a208 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f06f 0201 	mvn.w	r2, #1
 800a200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f851 	bl	800a2aa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d104      	bne.n	800a21c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00c      	beq.n	800a236 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a222:	2b00      	cmp	r3, #0
 800a224:	d007      	beq.n	800a236 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a22e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f947 	bl	800a4c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00c      	beq.n	800a25a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a246:	2b00      	cmp	r3, #0
 800a248:	d007      	beq.n	800a25a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 f93f 	bl	800a4d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00c      	beq.n	800a27e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d007      	beq.n	800a27e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f83e 	bl	800a2fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	f003 0320 	and.w	r3, r3, #32
 800a284:	2b00      	cmp	r3, #0
 800a286:	d00c      	beq.n	800a2a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f003 0320 	and.w	r3, r3, #32
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d007      	beq.n	800a2a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f06f 0220 	mvn.w	r2, #32
 800a29a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 f907 	bl	800a4b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2a2:	bf00      	nop
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2aa:	b480      	push	{r7}
 800a2ac:	b083      	sub	sp, #12
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a2b2:	bf00      	nop
 800a2b4:	370c      	adds	r7, #12
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b083      	sub	sp, #12
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a2c6:	bf00      	nop
 800a2c8:	370c      	adds	r7, #12
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr

0800a2d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a2d2:	b480      	push	{r7}
 800a2d4:	b083      	sub	sp, #12
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a2da:	bf00      	nop
 800a2dc:	370c      	adds	r7, #12
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr

0800a2e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2e6:	b480      	push	{r7}
 800a2e8:	b083      	sub	sp, #12
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a2ee:	bf00      	nop
 800a2f0:	370c      	adds	r7, #12
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr

0800a2fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b083      	sub	sp, #12
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a302:	bf00      	nop
 800a304:	370c      	adds	r7, #12
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr
	...

0800a310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a310:	b480      	push	{r7}
 800a312:	b085      	sub	sp, #20
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	4a30      	ldr	r2, [pc, #192]	@ (800a3e4 <TIM_Base_SetConfig+0xd4>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d003      	beq.n	800a330 <TIM_Base_SetConfig+0x20>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a32e:	d108      	bne.n	800a342 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	4313      	orrs	r3, r2
 800a340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a27      	ldr	r2, [pc, #156]	@ (800a3e4 <TIM_Base_SetConfig+0xd4>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d00b      	beq.n	800a362 <TIM_Base_SetConfig+0x52>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a350:	d007      	beq.n	800a362 <TIM_Base_SetConfig+0x52>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a24      	ldr	r2, [pc, #144]	@ (800a3e8 <TIM_Base_SetConfig+0xd8>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d003      	beq.n	800a362 <TIM_Base_SetConfig+0x52>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4a23      	ldr	r2, [pc, #140]	@ (800a3ec <TIM_Base_SetConfig+0xdc>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d108      	bne.n	800a374 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	4313      	orrs	r3, r2
 800a372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	695b      	ldr	r3, [r3, #20]
 800a37e:	4313      	orrs	r3, r2
 800a380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	689a      	ldr	r2, [r3, #8]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a12      	ldr	r2, [pc, #72]	@ (800a3e4 <TIM_Base_SetConfig+0xd4>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d007      	beq.n	800a3b0 <TIM_Base_SetConfig+0xa0>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a11      	ldr	r2, [pc, #68]	@ (800a3e8 <TIM_Base_SetConfig+0xd8>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d003      	beq.n	800a3b0 <TIM_Base_SetConfig+0xa0>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a10      	ldr	r2, [pc, #64]	@ (800a3ec <TIM_Base_SetConfig+0xdc>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d103      	bne.n	800a3b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	691a      	ldr	r2, [r3, #16]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	f003 0301 	and.w	r3, r3, #1
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d105      	bne.n	800a3d6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	f023 0201 	bic.w	r2, r3, #1
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	611a      	str	r2, [r3, #16]
  }
}
 800a3d6:	bf00      	nop
 800a3d8:	3714      	adds	r7, #20
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	40012c00 	.word	0x40012c00
 800a3e8:	40014400 	.word	0x40014400
 800a3ec:	40014800 	.word	0x40014800

0800a3f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a400:	2b01      	cmp	r3, #1
 800a402:	d101      	bne.n	800a408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a404:	2302      	movs	r3, #2
 800a406:	e04a      	b.n	800a49e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2202      	movs	r2, #2
 800a414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a1f      	ldr	r2, [pc, #124]	@ (800a4ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d108      	bne.n	800a444 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a438:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	4313      	orrs	r3, r2
 800a442:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a44a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	4313      	orrs	r3, r2
 800a454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a12      	ldr	r2, [pc, #72]	@ (800a4ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d004      	beq.n	800a472 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a470:	d10c      	bne.n	800a48c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a478:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	4313      	orrs	r3, r2
 800a482:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	68ba      	ldr	r2, [r7, #8]
 800a48a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3714      	adds	r7, #20
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	40012c00 	.word	0x40012c00

0800a4b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <LL_RCC_GetUSARTClockSource>:
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800a4f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4013      	ands	r3, r2
}
 800a500:	4618      	mov	r0, r3
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <LL_RCC_GetLPUARTClockSource>:
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800a514:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a518:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4013      	ands	r3, r2
}
 800a520:	4618      	mov	r0, r3
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d101      	bne.n	800a53e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e042      	b.n	800a5c4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a544:	2b00      	cmp	r3, #0
 800a546:	d106      	bne.n	800a556 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f83b 	bl	800a5cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2224      	movs	r2, #36	@ 0x24
 800a55a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f022 0201 	bic.w	r2, r2, #1
 800a56c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a572:	2b00      	cmp	r3, #0
 800a574:	d002      	beq.n	800a57c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 fae8 	bl	800ab4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 f8bd 	bl	800a6fc <UART_SetConfig>
 800a582:	4603      	mov	r3, r0
 800a584:	2b01      	cmp	r3, #1
 800a586:	d101      	bne.n	800a58c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a588:	2301      	movs	r3, #1
 800a58a:	e01b      	b.n	800a5c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	685a      	ldr	r2, [r3, #4]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a59a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	689a      	ldr	r2, [r3, #8]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a5aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f042 0201 	orr.w	r2, r2, #1
 800a5ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 fb67 	bl	800ac90 <UART_CheckIdleState>
 800a5c2:	4603      	mov	r3, r0
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3708      	adds	r7, #8
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a5d4:	bf00      	nop
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08a      	sub	sp, #40	@ 0x28
 800a5e4:	af02      	add	r7, sp, #8
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	603b      	str	r3, [r7, #0]
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5f6:	2b20      	cmp	r3, #32
 800a5f8:	d17b      	bne.n	800a6f2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d002      	beq.n	800a606 <HAL_UART_Transmit+0x26>
 800a600:	88fb      	ldrh	r3, [r7, #6]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d101      	bne.n	800a60a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e074      	b.n	800a6f4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2221      	movs	r2, #33	@ 0x21
 800a616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a61a:	f7fc f8c5 	bl	80067a8 <HAL_GetTick>
 800a61e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	88fa      	ldrh	r2, [r7, #6]
 800a624:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	88fa      	ldrh	r2, [r7, #6]
 800a62c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a638:	d108      	bne.n	800a64c <HAL_UART_Transmit+0x6c>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d104      	bne.n	800a64c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a642:	2300      	movs	r3, #0
 800a644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	61bb      	str	r3, [r7, #24]
 800a64a:	e003      	b.n	800a654 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a650:	2300      	movs	r3, #0
 800a652:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a654:	e030      	b.n	800a6b8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	9300      	str	r3, [sp, #0]
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	2200      	movs	r2, #0
 800a65e:	2180      	movs	r1, #128	@ 0x80
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f000 fbbf 	bl	800ade4 <UART_WaitOnFlagUntilTimeout>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d005      	beq.n	800a678 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2220      	movs	r2, #32
 800a670:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a674:	2303      	movs	r3, #3
 800a676:	e03d      	b.n	800a6f4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10b      	bne.n	800a696 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	881b      	ldrh	r3, [r3, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a68c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	3302      	adds	r3, #2
 800a692:	61bb      	str	r3, [r7, #24]
 800a694:	e007      	b.n	800a6a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	781a      	ldrb	r2, [r3, #0]
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1c8      	bne.n	800a656 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	2140      	movs	r1, #64	@ 0x40
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f000 fb88 	bl	800ade4 <UART_WaitOnFlagUntilTimeout>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d005      	beq.n	800a6e6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2220      	movs	r2, #32
 800a6de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	e006      	b.n	800a6f4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2220      	movs	r2, #32
 800a6ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	e000      	b.n	800a6f4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a6f2:	2302      	movs	r3, #2
  }
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3720      	adds	r7, #32
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a700:	b08c      	sub	sp, #48	@ 0x30
 800a702:	af00      	add	r7, sp, #0
 800a704:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	689a      	ldr	r2, [r3, #8]
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	431a      	orrs	r2, r3
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	695b      	ldr	r3, [r3, #20]
 800a71a:	431a      	orrs	r2, r3
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	69db      	ldr	r3, [r3, #28]
 800a720:	4313      	orrs	r3, r2
 800a722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	4baf      	ldr	r3, [pc, #700]	@ (800a9e8 <UART_SetConfig+0x2ec>)
 800a72c:	4013      	ands	r3, r2
 800a72e:	697a      	ldr	r2, [r7, #20]
 800a730:	6812      	ldr	r2, [r2, #0]
 800a732:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a734:	430b      	orrs	r3, r1
 800a736:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	68da      	ldr	r2, [r3, #12]
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	430a      	orrs	r2, r1
 800a74c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	699b      	ldr	r3, [r3, #24]
 800a752:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4aa4      	ldr	r2, [pc, #656]	@ (800a9ec <UART_SetConfig+0x2f0>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d004      	beq.n	800a768 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a764:	4313      	orrs	r3, r2
 800a766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a772:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a776:	697a      	ldr	r2, [r7, #20]
 800a778:	6812      	ldr	r2, [r2, #0]
 800a77a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a77c:	430b      	orrs	r3, r1
 800a77e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a786:	f023 010f 	bic.w	r1, r3, #15
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	430a      	orrs	r2, r1
 800a794:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a95      	ldr	r2, [pc, #596]	@ (800a9f0 <UART_SetConfig+0x2f4>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d125      	bne.n	800a7ec <UART_SetConfig+0xf0>
 800a7a0:	2003      	movs	r0, #3
 800a7a2:	f7ff fea3 	bl	800a4ec <LL_RCC_GetUSARTClockSource>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b03      	cmp	r3, #3
 800a7aa:	d81b      	bhi.n	800a7e4 <UART_SetConfig+0xe8>
 800a7ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a7b4 <UART_SetConfig+0xb8>)
 800a7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b2:	bf00      	nop
 800a7b4:	0800a7c5 	.word	0x0800a7c5
 800a7b8:	0800a7d5 	.word	0x0800a7d5
 800a7bc:	0800a7cd 	.word	0x0800a7cd
 800a7c0:	0800a7dd 	.word	0x0800a7dd
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ca:	e042      	b.n	800a852 <UART_SetConfig+0x156>
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7d2:	e03e      	b.n	800a852 <UART_SetConfig+0x156>
 800a7d4:	2304      	movs	r3, #4
 800a7d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7da:	e03a      	b.n	800a852 <UART_SetConfig+0x156>
 800a7dc:	2308      	movs	r3, #8
 800a7de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7e2:	e036      	b.n	800a852 <UART_SetConfig+0x156>
 800a7e4:	2310      	movs	r3, #16
 800a7e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ea:	e032      	b.n	800a852 <UART_SetConfig+0x156>
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a7e      	ldr	r2, [pc, #504]	@ (800a9ec <UART_SetConfig+0x2f0>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d12a      	bne.n	800a84c <UART_SetConfig+0x150>
 800a7f6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800a7fa:	f7ff fe87 	bl	800a50c <LL_RCC_GetLPUARTClockSource>
 800a7fe:	4603      	mov	r3, r0
 800a800:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a804:	d01a      	beq.n	800a83c <UART_SetConfig+0x140>
 800a806:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a80a:	d81b      	bhi.n	800a844 <UART_SetConfig+0x148>
 800a80c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a810:	d00c      	beq.n	800a82c <UART_SetConfig+0x130>
 800a812:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a816:	d815      	bhi.n	800a844 <UART_SetConfig+0x148>
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d003      	beq.n	800a824 <UART_SetConfig+0x128>
 800a81c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a820:	d008      	beq.n	800a834 <UART_SetConfig+0x138>
 800a822:	e00f      	b.n	800a844 <UART_SetConfig+0x148>
 800a824:	2300      	movs	r3, #0
 800a826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a82a:	e012      	b.n	800a852 <UART_SetConfig+0x156>
 800a82c:	2302      	movs	r3, #2
 800a82e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a832:	e00e      	b.n	800a852 <UART_SetConfig+0x156>
 800a834:	2304      	movs	r3, #4
 800a836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a83a:	e00a      	b.n	800a852 <UART_SetConfig+0x156>
 800a83c:	2308      	movs	r3, #8
 800a83e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a842:	e006      	b.n	800a852 <UART_SetConfig+0x156>
 800a844:	2310      	movs	r3, #16
 800a846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a84a:	e002      	b.n	800a852 <UART_SetConfig+0x156>
 800a84c:	2310      	movs	r3, #16
 800a84e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a65      	ldr	r2, [pc, #404]	@ (800a9ec <UART_SetConfig+0x2f0>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	f040 8097 	bne.w	800a98c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a85e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a862:	2b08      	cmp	r3, #8
 800a864:	d823      	bhi.n	800a8ae <UART_SetConfig+0x1b2>
 800a866:	a201      	add	r2, pc, #4	@ (adr r2, 800a86c <UART_SetConfig+0x170>)
 800a868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86c:	0800a891 	.word	0x0800a891
 800a870:	0800a8af 	.word	0x0800a8af
 800a874:	0800a899 	.word	0x0800a899
 800a878:	0800a8af 	.word	0x0800a8af
 800a87c:	0800a89f 	.word	0x0800a89f
 800a880:	0800a8af 	.word	0x0800a8af
 800a884:	0800a8af 	.word	0x0800a8af
 800a888:	0800a8af 	.word	0x0800a8af
 800a88c:	0800a8a7 	.word	0x0800a8a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a890:	f7fe f9ca 	bl	8008c28 <HAL_RCC_GetPCLK1Freq>
 800a894:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a896:	e010      	b.n	800a8ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a898:	4b56      	ldr	r3, [pc, #344]	@ (800a9f4 <UART_SetConfig+0x2f8>)
 800a89a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a89c:	e00d      	b.n	800a8ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a89e:	f7fe f943 	bl	8008b28 <HAL_RCC_GetSysClockFreq>
 800a8a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a8a4:	e009      	b.n	800a8ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a8ac:	e005      	b.n	800a8ba <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a8b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f000 812b 	beq.w	800ab18 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c6:	4a4c      	ldr	r2, [pc, #304]	@ (800a9f8 <UART_SetConfig+0x2fc>)
 800a8c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	685a      	ldr	r2, [r3, #4]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	005b      	lsls	r3, r3, #1
 800a8de:	4413      	add	r3, r2
 800a8e0:	69ba      	ldr	r2, [r7, #24]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d305      	bcc.n	800a8f2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8ec:	69ba      	ldr	r2, [r7, #24]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d903      	bls.n	800a8fa <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a8f8:	e10e      	b.n	800ab18 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	60bb      	str	r3, [r7, #8]
 800a900:	60fa      	str	r2, [r7, #12]
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a906:	4a3c      	ldr	r2, [pc, #240]	@ (800a9f8 <UART_SetConfig+0x2fc>)
 800a908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	2200      	movs	r2, #0
 800a910:	603b      	str	r3, [r7, #0]
 800a912:	607a      	str	r2, [r7, #4]
 800a914:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a918:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a91c:	f7f5 fc80 	bl	8000220 <__aeabi_uldivmod>
 800a920:	4602      	mov	r2, r0
 800a922:	460b      	mov	r3, r1
 800a924:	4610      	mov	r0, r2
 800a926:	4619      	mov	r1, r3
 800a928:	f04f 0200 	mov.w	r2, #0
 800a92c:	f04f 0300 	mov.w	r3, #0
 800a930:	020b      	lsls	r3, r1, #8
 800a932:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a936:	0202      	lsls	r2, r0, #8
 800a938:	6979      	ldr	r1, [r7, #20]
 800a93a:	6849      	ldr	r1, [r1, #4]
 800a93c:	0849      	lsrs	r1, r1, #1
 800a93e:	2000      	movs	r0, #0
 800a940:	460c      	mov	r4, r1
 800a942:	4605      	mov	r5, r0
 800a944:	eb12 0804 	adds.w	r8, r2, r4
 800a948:	eb43 0905 	adc.w	r9, r3, r5
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	469a      	mov	sl, r3
 800a954:	4693      	mov	fp, r2
 800a956:	4652      	mov	r2, sl
 800a958:	465b      	mov	r3, fp
 800a95a:	4640      	mov	r0, r8
 800a95c:	4649      	mov	r1, r9
 800a95e:	f7f5 fc5f 	bl	8000220 <__aeabi_uldivmod>
 800a962:	4602      	mov	r2, r0
 800a964:	460b      	mov	r3, r1
 800a966:	4613      	mov	r3, r2
 800a968:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a970:	d308      	bcc.n	800a984 <UART_SetConfig+0x288>
 800a972:	6a3b      	ldr	r3, [r7, #32]
 800a974:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a978:	d204      	bcs.n	800a984 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	6a3a      	ldr	r2, [r7, #32]
 800a980:	60da      	str	r2, [r3, #12]
 800a982:	e0c9      	b.n	800ab18 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a98a:	e0c5      	b.n	800ab18 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	69db      	ldr	r3, [r3, #28]
 800a990:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a994:	d16d      	bne.n	800aa72 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800a996:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a99a:	3b01      	subs	r3, #1
 800a99c:	2b07      	cmp	r3, #7
 800a99e:	d82d      	bhi.n	800a9fc <UART_SetConfig+0x300>
 800a9a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a9a8 <UART_SetConfig+0x2ac>)
 800a9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a6:	bf00      	nop
 800a9a8:	0800a9c9 	.word	0x0800a9c9
 800a9ac:	0800a9d1 	.word	0x0800a9d1
 800a9b0:	0800a9fd 	.word	0x0800a9fd
 800a9b4:	0800a9d7 	.word	0x0800a9d7
 800a9b8:	0800a9fd 	.word	0x0800a9fd
 800a9bc:	0800a9fd 	.word	0x0800a9fd
 800a9c0:	0800a9fd 	.word	0x0800a9fd
 800a9c4:	0800a9df 	.word	0x0800a9df
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9c8:	f7fe f944 	bl	8008c54 <HAL_RCC_GetPCLK2Freq>
 800a9cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9ce:	e01b      	b.n	800aa08 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a9d0:	4b08      	ldr	r3, [pc, #32]	@ (800a9f4 <UART_SetConfig+0x2f8>)
 800a9d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a9d4:	e018      	b.n	800aa08 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9d6:	f7fe f8a7 	bl	8008b28 <HAL_RCC_GetSysClockFreq>
 800a9da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9dc:	e014      	b.n	800aa08 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a9e4:	e010      	b.n	800aa08 <UART_SetConfig+0x30c>
 800a9e6:	bf00      	nop
 800a9e8:	cfff69f3 	.word	0xcfff69f3
 800a9ec:	40008000 	.word	0x40008000
 800a9f0:	40013800 	.word	0x40013800
 800a9f4:	00f42400 	.word	0x00f42400
 800a9f8:	0800c084 	.word	0x0800c084
      default:
        pclk = 0U;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aa06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f000 8084 	beq.w	800ab18 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa14:	4a4b      	ldr	r2, [pc, #300]	@ (800ab44 <UART_SetConfig+0x448>)
 800aa16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa22:	005a      	lsls	r2, r3, #1
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	085b      	lsrs	r3, r3, #1
 800aa2a:	441a      	add	r2, r3
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa34:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	2b0f      	cmp	r3, #15
 800aa3a:	d916      	bls.n	800aa6a <UART_SetConfig+0x36e>
 800aa3c:	6a3b      	ldr	r3, [r7, #32]
 800aa3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa42:	d212      	bcs.n	800aa6a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa44:	6a3b      	ldr	r3, [r7, #32]
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	f023 030f 	bic.w	r3, r3, #15
 800aa4c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa4e:	6a3b      	ldr	r3, [r7, #32]
 800aa50:	085b      	lsrs	r3, r3, #1
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	f003 0307 	and.w	r3, r3, #7
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	8bfb      	ldrh	r3, [r7, #30]
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	8bfa      	ldrh	r2, [r7, #30]
 800aa66:	60da      	str	r2, [r3, #12]
 800aa68:	e056      	b.n	800ab18 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aa70:	e052      	b.n	800ab18 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aa76:	3b01      	subs	r3, #1
 800aa78:	2b07      	cmp	r3, #7
 800aa7a:	d822      	bhi.n	800aac2 <UART_SetConfig+0x3c6>
 800aa7c:	a201      	add	r2, pc, #4	@ (adr r2, 800aa84 <UART_SetConfig+0x388>)
 800aa7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa82:	bf00      	nop
 800aa84:	0800aaa5 	.word	0x0800aaa5
 800aa88:	0800aaad 	.word	0x0800aaad
 800aa8c:	0800aac3 	.word	0x0800aac3
 800aa90:	0800aab3 	.word	0x0800aab3
 800aa94:	0800aac3 	.word	0x0800aac3
 800aa98:	0800aac3 	.word	0x0800aac3
 800aa9c:	0800aac3 	.word	0x0800aac3
 800aaa0:	0800aabb 	.word	0x0800aabb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aaa4:	f7fe f8d6 	bl	8008c54 <HAL_RCC_GetPCLK2Freq>
 800aaa8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aaaa:	e010      	b.n	800aace <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aaac:	4b26      	ldr	r3, [pc, #152]	@ (800ab48 <UART_SetConfig+0x44c>)
 800aaae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aab0:	e00d      	b.n	800aace <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aab2:	f7fe f839 	bl	8008b28 <HAL_RCC_GetSysClockFreq>
 800aab6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aab8:	e009      	b.n	800aace <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aabe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aac0:	e005      	b.n	800aace <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800aac2:	2300      	movs	r3, #0
 800aac4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aacc:	bf00      	nop
    }

    if (pclk != 0U)
 800aace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d021      	beq.n	800ab18 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad8:	4a1a      	ldr	r2, [pc, #104]	@ (800ab44 <UART_SetConfig+0x448>)
 800aada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aade:	461a      	mov	r2, r3
 800aae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae2:	fbb3 f2f2 	udiv	r2, r3, r2
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	085b      	lsrs	r3, r3, #1
 800aaec:	441a      	add	r2, r3
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaf6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aaf8:	6a3b      	ldr	r3, [r7, #32]
 800aafa:	2b0f      	cmp	r3, #15
 800aafc:	d909      	bls.n	800ab12 <UART_SetConfig+0x416>
 800aafe:	6a3b      	ldr	r3, [r7, #32]
 800ab00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab04:	d205      	bcs.n	800ab12 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab06:	6a3b      	ldr	r3, [r7, #32]
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	60da      	str	r2, [r3, #12]
 800ab10:	e002      	b.n	800ab18 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	2200      	movs	r2, #0
 800ab32:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ab34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3730      	adds	r7, #48	@ 0x30
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab42:	bf00      	nop
 800ab44:	0800c084 	.word	0x0800c084
 800ab48:	00f42400 	.word	0x00f42400

0800ab4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab58:	f003 0308 	and.w	r3, r3, #8
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00a      	beq.n	800ab76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	430a      	orrs	r2, r1
 800ab74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab7a:	f003 0301 	and.w	r3, r3, #1
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00a      	beq.n	800ab98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	430a      	orrs	r2, r1
 800ab96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab9c:	f003 0302 	and.w	r3, r3, #2
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00a      	beq.n	800abba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	430a      	orrs	r2, r1
 800abb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abbe:	f003 0304 	and.w	r3, r3, #4
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00a      	beq.n	800abdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	430a      	orrs	r2, r1
 800abda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abe0:	f003 0310 	and.w	r3, r3, #16
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00a      	beq.n	800abfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	430a      	orrs	r2, r1
 800abfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac02:	f003 0320 	and.w	r3, r3, #32
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00a      	beq.n	800ac20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	430a      	orrs	r2, r1
 800ac1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d01a      	beq.n	800ac62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	430a      	orrs	r2, r1
 800ac40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac4a:	d10a      	bne.n	800ac62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	430a      	orrs	r2, r1
 800ac60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00a      	beq.n	800ac84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	430a      	orrs	r2, r1
 800ac82:	605a      	str	r2, [r3, #4]
  }
}
 800ac84:	bf00      	nop
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b098      	sub	sp, #96	@ 0x60
 800ac94:	af02      	add	r7, sp, #8
 800ac96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aca0:	f7fb fd82 	bl	80067a8 <HAL_GetTick>
 800aca4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f003 0308 	and.w	r3, r3, #8
 800acb0:	2b08      	cmp	r3, #8
 800acb2:	d12f      	bne.n	800ad14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800acb8:	9300      	str	r3, [sp, #0]
 800acba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acbc:	2200      	movs	r2, #0
 800acbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 f88e 	bl	800ade4 <UART_WaitOnFlagUntilTimeout>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d022      	beq.n	800ad14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acd6:	e853 3f00 	ldrex	r3, [r3]
 800acda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800acdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ace2:	653b      	str	r3, [r7, #80]	@ 0x50
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	461a      	mov	r2, r3
 800acea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acec:	647b      	str	r3, [r7, #68]	@ 0x44
 800acee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800acf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acf4:	e841 2300 	strex	r3, r2, [r1]
 800acf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800acfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1e6      	bne.n	800acce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2220      	movs	r2, #32
 800ad04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad10:	2303      	movs	r3, #3
 800ad12:	e063      	b.n	800addc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 0304 	and.w	r3, r3, #4
 800ad1e:	2b04      	cmp	r3, #4
 800ad20:	d149      	bne.n	800adb6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad26:	9300      	str	r3, [sp, #0]
 800ad28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f857 	bl	800ade4 <UART_WaitOnFlagUntilTimeout>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d03c      	beq.n	800adb6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad44:	e853 3f00 	ldrex	r3, [r3]
 800ad48:	623b      	str	r3, [r7, #32]
   return(result);
 800ad4a:	6a3b      	ldr	r3, [r7, #32]
 800ad4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	461a      	mov	r2, r3
 800ad58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad5a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad62:	e841 2300 	strex	r3, r2, [r1]
 800ad66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1e6      	bne.n	800ad3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	3308      	adds	r3, #8
 800ad74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	e853 3f00 	ldrex	r3, [r3]
 800ad7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f023 0301 	bic.w	r3, r3, #1
 800ad84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	3308      	adds	r3, #8
 800ad8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad8e:	61fa      	str	r2, [r7, #28]
 800ad90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad92:	69b9      	ldr	r1, [r7, #24]
 800ad94:	69fa      	ldr	r2, [r7, #28]
 800ad96:	e841 2300 	strex	r3, r2, [r1]
 800ad9a:	617b      	str	r3, [r7, #20]
   return(result);
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1e5      	bne.n	800ad6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2220      	movs	r2, #32
 800ada6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adb2:	2303      	movs	r3, #3
 800adb4:	e012      	b.n	800addc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2220      	movs	r2, #32
 800adba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2220      	movs	r2, #32
 800adc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	3758      	adds	r7, #88	@ 0x58
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	603b      	str	r3, [r7, #0]
 800adf0:	4613      	mov	r3, r2
 800adf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adf4:	e04f      	b.n	800ae96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adfc:	d04b      	beq.n	800ae96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adfe:	f7fb fcd3 	bl	80067a8 <HAL_GetTick>
 800ae02:	4602      	mov	r2, r0
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	1ad3      	subs	r3, r2, r3
 800ae08:	69ba      	ldr	r2, [r7, #24]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d302      	bcc.n	800ae14 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d101      	bne.n	800ae18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae14:	2303      	movs	r3, #3
 800ae16:	e04e      	b.n	800aeb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 0304 	and.w	r3, r3, #4
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d037      	beq.n	800ae96 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	2b80      	cmp	r3, #128	@ 0x80
 800ae2a:	d034      	beq.n	800ae96 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	2b40      	cmp	r3, #64	@ 0x40
 800ae30:	d031      	beq.n	800ae96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	69db      	ldr	r3, [r3, #28]
 800ae38:	f003 0308 	and.w	r3, r3, #8
 800ae3c:	2b08      	cmp	r3, #8
 800ae3e:	d110      	bne.n	800ae62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2208      	movs	r2, #8
 800ae46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f000 f838 	bl	800aebe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2208      	movs	r2, #8
 800ae52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e029      	b.n	800aeb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	69db      	ldr	r3, [r3, #28]
 800ae68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae70:	d111      	bne.n	800ae96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	f000 f81e 	bl	800aebe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2220      	movs	r2, #32
 800ae86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ae92:	2303      	movs	r3, #3
 800ae94:	e00f      	b.n	800aeb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	69da      	ldr	r2, [r3, #28]
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	4013      	ands	r3, r2
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	bf0c      	ite	eq
 800aea6:	2301      	moveq	r3, #1
 800aea8:	2300      	movne	r3, #0
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	461a      	mov	r2, r3
 800aeae:	79fb      	ldrb	r3, [r7, #7]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d0a0      	beq.n	800adf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aebe:	b480      	push	{r7}
 800aec0:	b095      	sub	sp, #84	@ 0x54
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aece:	e853 3f00 	ldrex	r3, [r3]
 800aed2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aeda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	461a      	mov	r2, r3
 800aee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aee4:	643b      	str	r3, [r7, #64]	@ 0x40
 800aee6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aeea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aeec:	e841 2300 	strex	r3, r2, [r1]
 800aef0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1e6      	bne.n	800aec6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	3308      	adds	r3, #8
 800aefe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af00:	6a3b      	ldr	r3, [r7, #32]
 800af02:	e853 3f00 	ldrex	r3, [r3]
 800af06:	61fb      	str	r3, [r7, #28]
   return(result);
 800af08:	69fb      	ldr	r3, [r7, #28]
 800af0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af0e:	f023 0301 	bic.w	r3, r3, #1
 800af12:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	3308      	adds	r3, #8
 800af1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af24:	e841 2300 	strex	r3, r2, [r1]
 800af28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1e3      	bne.n	800aef8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af34:	2b01      	cmp	r3, #1
 800af36:	d118      	bne.n	800af6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	e853 3f00 	ldrex	r3, [r3]
 800af44:	60bb      	str	r3, [r7, #8]
   return(result);
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	f023 0310 	bic.w	r3, r3, #16
 800af4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	461a      	mov	r2, r3
 800af54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af56:	61bb      	str	r3, [r7, #24]
 800af58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af5a:	6979      	ldr	r1, [r7, #20]
 800af5c:	69ba      	ldr	r2, [r7, #24]
 800af5e:	e841 2300 	strex	r3, r2, [r1]
 800af62:	613b      	str	r3, [r7, #16]
   return(result);
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d1e6      	bne.n	800af38 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2220      	movs	r2, #32
 800af6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800af7e:	bf00      	nop
 800af80:	3754      	adds	r7, #84	@ 0x54
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
	...

0800af8c <std>:
 800af8c:	2300      	movs	r3, #0
 800af8e:	b510      	push	{r4, lr}
 800af90:	4604      	mov	r4, r0
 800af92:	e9c0 3300 	strd	r3, r3, [r0]
 800af96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af9a:	6083      	str	r3, [r0, #8]
 800af9c:	8181      	strh	r1, [r0, #12]
 800af9e:	6643      	str	r3, [r0, #100]	@ 0x64
 800afa0:	81c2      	strh	r2, [r0, #14]
 800afa2:	6183      	str	r3, [r0, #24]
 800afa4:	4619      	mov	r1, r3
 800afa6:	2208      	movs	r2, #8
 800afa8:	305c      	adds	r0, #92	@ 0x5c
 800afaa:	f000 f9f9 	bl	800b3a0 <memset>
 800afae:	4b0d      	ldr	r3, [pc, #52]	@ (800afe4 <std+0x58>)
 800afb0:	6263      	str	r3, [r4, #36]	@ 0x24
 800afb2:	4b0d      	ldr	r3, [pc, #52]	@ (800afe8 <std+0x5c>)
 800afb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800afb6:	4b0d      	ldr	r3, [pc, #52]	@ (800afec <std+0x60>)
 800afb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800afba:	4b0d      	ldr	r3, [pc, #52]	@ (800aff0 <std+0x64>)
 800afbc:	6323      	str	r3, [r4, #48]	@ 0x30
 800afbe:	4b0d      	ldr	r3, [pc, #52]	@ (800aff4 <std+0x68>)
 800afc0:	6224      	str	r4, [r4, #32]
 800afc2:	429c      	cmp	r4, r3
 800afc4:	d006      	beq.n	800afd4 <std+0x48>
 800afc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800afca:	4294      	cmp	r4, r2
 800afcc:	d002      	beq.n	800afd4 <std+0x48>
 800afce:	33d0      	adds	r3, #208	@ 0xd0
 800afd0:	429c      	cmp	r4, r3
 800afd2:	d105      	bne.n	800afe0 <std+0x54>
 800afd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800afd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afdc:	f000 ba6c 	b.w	800b4b8 <__retarget_lock_init_recursive>
 800afe0:	bd10      	pop	{r4, pc}
 800afe2:	bf00      	nop
 800afe4:	0800b1f1 	.word	0x0800b1f1
 800afe8:	0800b213 	.word	0x0800b213
 800afec:	0800b24b 	.word	0x0800b24b
 800aff0:	0800b26f 	.word	0x0800b26f
 800aff4:	20000694 	.word	0x20000694

0800aff8 <stdio_exit_handler>:
 800aff8:	4a02      	ldr	r2, [pc, #8]	@ (800b004 <stdio_exit_handler+0xc>)
 800affa:	4903      	ldr	r1, [pc, #12]	@ (800b008 <stdio_exit_handler+0x10>)
 800affc:	4803      	ldr	r0, [pc, #12]	@ (800b00c <stdio_exit_handler+0x14>)
 800affe:	f000 b869 	b.w	800b0d4 <_fwalk_sglue>
 800b002:	bf00      	nop
 800b004:	20000064 	.word	0x20000064
 800b008:	0800bd75 	.word	0x0800bd75
 800b00c:	20000074 	.word	0x20000074

0800b010 <cleanup_stdio>:
 800b010:	6841      	ldr	r1, [r0, #4]
 800b012:	4b0c      	ldr	r3, [pc, #48]	@ (800b044 <cleanup_stdio+0x34>)
 800b014:	4299      	cmp	r1, r3
 800b016:	b510      	push	{r4, lr}
 800b018:	4604      	mov	r4, r0
 800b01a:	d001      	beq.n	800b020 <cleanup_stdio+0x10>
 800b01c:	f000 feaa 	bl	800bd74 <_fflush_r>
 800b020:	68a1      	ldr	r1, [r4, #8]
 800b022:	4b09      	ldr	r3, [pc, #36]	@ (800b048 <cleanup_stdio+0x38>)
 800b024:	4299      	cmp	r1, r3
 800b026:	d002      	beq.n	800b02e <cleanup_stdio+0x1e>
 800b028:	4620      	mov	r0, r4
 800b02a:	f000 fea3 	bl	800bd74 <_fflush_r>
 800b02e:	68e1      	ldr	r1, [r4, #12]
 800b030:	4b06      	ldr	r3, [pc, #24]	@ (800b04c <cleanup_stdio+0x3c>)
 800b032:	4299      	cmp	r1, r3
 800b034:	d004      	beq.n	800b040 <cleanup_stdio+0x30>
 800b036:	4620      	mov	r0, r4
 800b038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b03c:	f000 be9a 	b.w	800bd74 <_fflush_r>
 800b040:	bd10      	pop	{r4, pc}
 800b042:	bf00      	nop
 800b044:	20000694 	.word	0x20000694
 800b048:	200006fc 	.word	0x200006fc
 800b04c:	20000764 	.word	0x20000764

0800b050 <global_stdio_init.part.0>:
 800b050:	b510      	push	{r4, lr}
 800b052:	4b0b      	ldr	r3, [pc, #44]	@ (800b080 <global_stdio_init.part.0+0x30>)
 800b054:	4c0b      	ldr	r4, [pc, #44]	@ (800b084 <global_stdio_init.part.0+0x34>)
 800b056:	4a0c      	ldr	r2, [pc, #48]	@ (800b088 <global_stdio_init.part.0+0x38>)
 800b058:	601a      	str	r2, [r3, #0]
 800b05a:	4620      	mov	r0, r4
 800b05c:	2200      	movs	r2, #0
 800b05e:	2104      	movs	r1, #4
 800b060:	f7ff ff94 	bl	800af8c <std>
 800b064:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b068:	2201      	movs	r2, #1
 800b06a:	2109      	movs	r1, #9
 800b06c:	f7ff ff8e 	bl	800af8c <std>
 800b070:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b074:	2202      	movs	r2, #2
 800b076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b07a:	2112      	movs	r1, #18
 800b07c:	f7ff bf86 	b.w	800af8c <std>
 800b080:	200007cc 	.word	0x200007cc
 800b084:	20000694 	.word	0x20000694
 800b088:	0800aff9 	.word	0x0800aff9

0800b08c <__sfp_lock_acquire>:
 800b08c:	4801      	ldr	r0, [pc, #4]	@ (800b094 <__sfp_lock_acquire+0x8>)
 800b08e:	f000 ba14 	b.w	800b4ba <__retarget_lock_acquire_recursive>
 800b092:	bf00      	nop
 800b094:	200007d5 	.word	0x200007d5

0800b098 <__sfp_lock_release>:
 800b098:	4801      	ldr	r0, [pc, #4]	@ (800b0a0 <__sfp_lock_release+0x8>)
 800b09a:	f000 ba0f 	b.w	800b4bc <__retarget_lock_release_recursive>
 800b09e:	bf00      	nop
 800b0a0:	200007d5 	.word	0x200007d5

0800b0a4 <__sinit>:
 800b0a4:	b510      	push	{r4, lr}
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	f7ff fff0 	bl	800b08c <__sfp_lock_acquire>
 800b0ac:	6a23      	ldr	r3, [r4, #32]
 800b0ae:	b11b      	cbz	r3, 800b0b8 <__sinit+0x14>
 800b0b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0b4:	f7ff bff0 	b.w	800b098 <__sfp_lock_release>
 800b0b8:	4b04      	ldr	r3, [pc, #16]	@ (800b0cc <__sinit+0x28>)
 800b0ba:	6223      	str	r3, [r4, #32]
 800b0bc:	4b04      	ldr	r3, [pc, #16]	@ (800b0d0 <__sinit+0x2c>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d1f5      	bne.n	800b0b0 <__sinit+0xc>
 800b0c4:	f7ff ffc4 	bl	800b050 <global_stdio_init.part.0>
 800b0c8:	e7f2      	b.n	800b0b0 <__sinit+0xc>
 800b0ca:	bf00      	nop
 800b0cc:	0800b011 	.word	0x0800b011
 800b0d0:	200007cc 	.word	0x200007cc

0800b0d4 <_fwalk_sglue>:
 800b0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0d8:	4607      	mov	r7, r0
 800b0da:	4688      	mov	r8, r1
 800b0dc:	4614      	mov	r4, r2
 800b0de:	2600      	movs	r6, #0
 800b0e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0e4:	f1b9 0901 	subs.w	r9, r9, #1
 800b0e8:	d505      	bpl.n	800b0f6 <_fwalk_sglue+0x22>
 800b0ea:	6824      	ldr	r4, [r4, #0]
 800b0ec:	2c00      	cmp	r4, #0
 800b0ee:	d1f7      	bne.n	800b0e0 <_fwalk_sglue+0xc>
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0f6:	89ab      	ldrh	r3, [r5, #12]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d907      	bls.n	800b10c <_fwalk_sglue+0x38>
 800b0fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b100:	3301      	adds	r3, #1
 800b102:	d003      	beq.n	800b10c <_fwalk_sglue+0x38>
 800b104:	4629      	mov	r1, r5
 800b106:	4638      	mov	r0, r7
 800b108:	47c0      	blx	r8
 800b10a:	4306      	orrs	r6, r0
 800b10c:	3568      	adds	r5, #104	@ 0x68
 800b10e:	e7e9      	b.n	800b0e4 <_fwalk_sglue+0x10>

0800b110 <iprintf>:
 800b110:	b40f      	push	{r0, r1, r2, r3}
 800b112:	b507      	push	{r0, r1, r2, lr}
 800b114:	4906      	ldr	r1, [pc, #24]	@ (800b130 <iprintf+0x20>)
 800b116:	ab04      	add	r3, sp, #16
 800b118:	6808      	ldr	r0, [r1, #0]
 800b11a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b11e:	6881      	ldr	r1, [r0, #8]
 800b120:	9301      	str	r3, [sp, #4]
 800b122:	f000 fafd 	bl	800b720 <_vfiprintf_r>
 800b126:	b003      	add	sp, #12
 800b128:	f85d eb04 	ldr.w	lr, [sp], #4
 800b12c:	b004      	add	sp, #16
 800b12e:	4770      	bx	lr
 800b130:	20000070 	.word	0x20000070

0800b134 <_puts_r>:
 800b134:	6a03      	ldr	r3, [r0, #32]
 800b136:	b570      	push	{r4, r5, r6, lr}
 800b138:	6884      	ldr	r4, [r0, #8]
 800b13a:	4605      	mov	r5, r0
 800b13c:	460e      	mov	r6, r1
 800b13e:	b90b      	cbnz	r3, 800b144 <_puts_r+0x10>
 800b140:	f7ff ffb0 	bl	800b0a4 <__sinit>
 800b144:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b146:	07db      	lsls	r3, r3, #31
 800b148:	d405      	bmi.n	800b156 <_puts_r+0x22>
 800b14a:	89a3      	ldrh	r3, [r4, #12]
 800b14c:	0598      	lsls	r0, r3, #22
 800b14e:	d402      	bmi.n	800b156 <_puts_r+0x22>
 800b150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b152:	f000 f9b2 	bl	800b4ba <__retarget_lock_acquire_recursive>
 800b156:	89a3      	ldrh	r3, [r4, #12]
 800b158:	0719      	lsls	r1, r3, #28
 800b15a:	d502      	bpl.n	800b162 <_puts_r+0x2e>
 800b15c:	6923      	ldr	r3, [r4, #16]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d135      	bne.n	800b1ce <_puts_r+0x9a>
 800b162:	4621      	mov	r1, r4
 800b164:	4628      	mov	r0, r5
 800b166:	f000 f8c5 	bl	800b2f4 <__swsetup_r>
 800b16a:	b380      	cbz	r0, 800b1ce <_puts_r+0x9a>
 800b16c:	f04f 35ff 	mov.w	r5, #4294967295
 800b170:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b172:	07da      	lsls	r2, r3, #31
 800b174:	d405      	bmi.n	800b182 <_puts_r+0x4e>
 800b176:	89a3      	ldrh	r3, [r4, #12]
 800b178:	059b      	lsls	r3, r3, #22
 800b17a:	d402      	bmi.n	800b182 <_puts_r+0x4e>
 800b17c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b17e:	f000 f99d 	bl	800b4bc <__retarget_lock_release_recursive>
 800b182:	4628      	mov	r0, r5
 800b184:	bd70      	pop	{r4, r5, r6, pc}
 800b186:	2b00      	cmp	r3, #0
 800b188:	da04      	bge.n	800b194 <_puts_r+0x60>
 800b18a:	69a2      	ldr	r2, [r4, #24]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	dc17      	bgt.n	800b1c0 <_puts_r+0x8c>
 800b190:	290a      	cmp	r1, #10
 800b192:	d015      	beq.n	800b1c0 <_puts_r+0x8c>
 800b194:	6823      	ldr	r3, [r4, #0]
 800b196:	1c5a      	adds	r2, r3, #1
 800b198:	6022      	str	r2, [r4, #0]
 800b19a:	7019      	strb	r1, [r3, #0]
 800b19c:	68a3      	ldr	r3, [r4, #8]
 800b19e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	60a3      	str	r3, [r4, #8]
 800b1a6:	2900      	cmp	r1, #0
 800b1a8:	d1ed      	bne.n	800b186 <_puts_r+0x52>
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	da11      	bge.n	800b1d2 <_puts_r+0x9e>
 800b1ae:	4622      	mov	r2, r4
 800b1b0:	210a      	movs	r1, #10
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	f000 f85f 	bl	800b276 <__swbuf_r>
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	d0d7      	beq.n	800b16c <_puts_r+0x38>
 800b1bc:	250a      	movs	r5, #10
 800b1be:	e7d7      	b.n	800b170 <_puts_r+0x3c>
 800b1c0:	4622      	mov	r2, r4
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	f000 f857 	bl	800b276 <__swbuf_r>
 800b1c8:	3001      	adds	r0, #1
 800b1ca:	d1e7      	bne.n	800b19c <_puts_r+0x68>
 800b1cc:	e7ce      	b.n	800b16c <_puts_r+0x38>
 800b1ce:	3e01      	subs	r6, #1
 800b1d0:	e7e4      	b.n	800b19c <_puts_r+0x68>
 800b1d2:	6823      	ldr	r3, [r4, #0]
 800b1d4:	1c5a      	adds	r2, r3, #1
 800b1d6:	6022      	str	r2, [r4, #0]
 800b1d8:	220a      	movs	r2, #10
 800b1da:	701a      	strb	r2, [r3, #0]
 800b1dc:	e7ee      	b.n	800b1bc <_puts_r+0x88>
	...

0800b1e0 <puts>:
 800b1e0:	4b02      	ldr	r3, [pc, #8]	@ (800b1ec <puts+0xc>)
 800b1e2:	4601      	mov	r1, r0
 800b1e4:	6818      	ldr	r0, [r3, #0]
 800b1e6:	f7ff bfa5 	b.w	800b134 <_puts_r>
 800b1ea:	bf00      	nop
 800b1ec:	20000070 	.word	0x20000070

0800b1f0 <__sread>:
 800b1f0:	b510      	push	{r4, lr}
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1f8:	f000 f910 	bl	800b41c <_read_r>
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	bfab      	itete	ge
 800b200:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b202:	89a3      	ldrhlt	r3, [r4, #12]
 800b204:	181b      	addge	r3, r3, r0
 800b206:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b20a:	bfac      	ite	ge
 800b20c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b20e:	81a3      	strhlt	r3, [r4, #12]
 800b210:	bd10      	pop	{r4, pc}

0800b212 <__swrite>:
 800b212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b216:	461f      	mov	r7, r3
 800b218:	898b      	ldrh	r3, [r1, #12]
 800b21a:	05db      	lsls	r3, r3, #23
 800b21c:	4605      	mov	r5, r0
 800b21e:	460c      	mov	r4, r1
 800b220:	4616      	mov	r6, r2
 800b222:	d505      	bpl.n	800b230 <__swrite+0x1e>
 800b224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b228:	2302      	movs	r3, #2
 800b22a:	2200      	movs	r2, #0
 800b22c:	f000 f8e4 	bl	800b3f8 <_lseek_r>
 800b230:	89a3      	ldrh	r3, [r4, #12]
 800b232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b236:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b23a:	81a3      	strh	r3, [r4, #12]
 800b23c:	4632      	mov	r2, r6
 800b23e:	463b      	mov	r3, r7
 800b240:	4628      	mov	r0, r5
 800b242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b246:	f000 b8fb 	b.w	800b440 <_write_r>

0800b24a <__sseek>:
 800b24a:	b510      	push	{r4, lr}
 800b24c:	460c      	mov	r4, r1
 800b24e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b252:	f000 f8d1 	bl	800b3f8 <_lseek_r>
 800b256:	1c43      	adds	r3, r0, #1
 800b258:	89a3      	ldrh	r3, [r4, #12]
 800b25a:	bf15      	itete	ne
 800b25c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b25e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b262:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b266:	81a3      	strheq	r3, [r4, #12]
 800b268:	bf18      	it	ne
 800b26a:	81a3      	strhne	r3, [r4, #12]
 800b26c:	bd10      	pop	{r4, pc}

0800b26e <__sclose>:
 800b26e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b272:	f000 b8b1 	b.w	800b3d8 <_close_r>

0800b276 <__swbuf_r>:
 800b276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b278:	460e      	mov	r6, r1
 800b27a:	4614      	mov	r4, r2
 800b27c:	4605      	mov	r5, r0
 800b27e:	b118      	cbz	r0, 800b288 <__swbuf_r+0x12>
 800b280:	6a03      	ldr	r3, [r0, #32]
 800b282:	b90b      	cbnz	r3, 800b288 <__swbuf_r+0x12>
 800b284:	f7ff ff0e 	bl	800b0a4 <__sinit>
 800b288:	69a3      	ldr	r3, [r4, #24]
 800b28a:	60a3      	str	r3, [r4, #8]
 800b28c:	89a3      	ldrh	r3, [r4, #12]
 800b28e:	071a      	lsls	r2, r3, #28
 800b290:	d501      	bpl.n	800b296 <__swbuf_r+0x20>
 800b292:	6923      	ldr	r3, [r4, #16]
 800b294:	b943      	cbnz	r3, 800b2a8 <__swbuf_r+0x32>
 800b296:	4621      	mov	r1, r4
 800b298:	4628      	mov	r0, r5
 800b29a:	f000 f82b 	bl	800b2f4 <__swsetup_r>
 800b29e:	b118      	cbz	r0, 800b2a8 <__swbuf_r+0x32>
 800b2a0:	f04f 37ff 	mov.w	r7, #4294967295
 800b2a4:	4638      	mov	r0, r7
 800b2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2a8:	6823      	ldr	r3, [r4, #0]
 800b2aa:	6922      	ldr	r2, [r4, #16]
 800b2ac:	1a98      	subs	r0, r3, r2
 800b2ae:	6963      	ldr	r3, [r4, #20]
 800b2b0:	b2f6      	uxtb	r6, r6
 800b2b2:	4283      	cmp	r3, r0
 800b2b4:	4637      	mov	r7, r6
 800b2b6:	dc05      	bgt.n	800b2c4 <__swbuf_r+0x4e>
 800b2b8:	4621      	mov	r1, r4
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	f000 fd5a 	bl	800bd74 <_fflush_r>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d1ed      	bne.n	800b2a0 <__swbuf_r+0x2a>
 800b2c4:	68a3      	ldr	r3, [r4, #8]
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	60a3      	str	r3, [r4, #8]
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	1c5a      	adds	r2, r3, #1
 800b2ce:	6022      	str	r2, [r4, #0]
 800b2d0:	701e      	strb	r6, [r3, #0]
 800b2d2:	6962      	ldr	r2, [r4, #20]
 800b2d4:	1c43      	adds	r3, r0, #1
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d004      	beq.n	800b2e4 <__swbuf_r+0x6e>
 800b2da:	89a3      	ldrh	r3, [r4, #12]
 800b2dc:	07db      	lsls	r3, r3, #31
 800b2de:	d5e1      	bpl.n	800b2a4 <__swbuf_r+0x2e>
 800b2e0:	2e0a      	cmp	r6, #10
 800b2e2:	d1df      	bne.n	800b2a4 <__swbuf_r+0x2e>
 800b2e4:	4621      	mov	r1, r4
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	f000 fd44 	bl	800bd74 <_fflush_r>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d0d9      	beq.n	800b2a4 <__swbuf_r+0x2e>
 800b2f0:	e7d6      	b.n	800b2a0 <__swbuf_r+0x2a>
	...

0800b2f4 <__swsetup_r>:
 800b2f4:	b538      	push	{r3, r4, r5, lr}
 800b2f6:	4b29      	ldr	r3, [pc, #164]	@ (800b39c <__swsetup_r+0xa8>)
 800b2f8:	4605      	mov	r5, r0
 800b2fa:	6818      	ldr	r0, [r3, #0]
 800b2fc:	460c      	mov	r4, r1
 800b2fe:	b118      	cbz	r0, 800b308 <__swsetup_r+0x14>
 800b300:	6a03      	ldr	r3, [r0, #32]
 800b302:	b90b      	cbnz	r3, 800b308 <__swsetup_r+0x14>
 800b304:	f7ff fece 	bl	800b0a4 <__sinit>
 800b308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b30c:	0719      	lsls	r1, r3, #28
 800b30e:	d422      	bmi.n	800b356 <__swsetup_r+0x62>
 800b310:	06da      	lsls	r2, r3, #27
 800b312:	d407      	bmi.n	800b324 <__swsetup_r+0x30>
 800b314:	2209      	movs	r2, #9
 800b316:	602a      	str	r2, [r5, #0]
 800b318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b31c:	81a3      	strh	r3, [r4, #12]
 800b31e:	f04f 30ff 	mov.w	r0, #4294967295
 800b322:	e033      	b.n	800b38c <__swsetup_r+0x98>
 800b324:	0758      	lsls	r0, r3, #29
 800b326:	d512      	bpl.n	800b34e <__swsetup_r+0x5a>
 800b328:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b32a:	b141      	cbz	r1, 800b33e <__swsetup_r+0x4a>
 800b32c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b330:	4299      	cmp	r1, r3
 800b332:	d002      	beq.n	800b33a <__swsetup_r+0x46>
 800b334:	4628      	mov	r0, r5
 800b336:	f000 f8d1 	bl	800b4dc <_free_r>
 800b33a:	2300      	movs	r3, #0
 800b33c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b33e:	89a3      	ldrh	r3, [r4, #12]
 800b340:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b344:	81a3      	strh	r3, [r4, #12]
 800b346:	2300      	movs	r3, #0
 800b348:	6063      	str	r3, [r4, #4]
 800b34a:	6923      	ldr	r3, [r4, #16]
 800b34c:	6023      	str	r3, [r4, #0]
 800b34e:	89a3      	ldrh	r3, [r4, #12]
 800b350:	f043 0308 	orr.w	r3, r3, #8
 800b354:	81a3      	strh	r3, [r4, #12]
 800b356:	6923      	ldr	r3, [r4, #16]
 800b358:	b94b      	cbnz	r3, 800b36e <__swsetup_r+0x7a>
 800b35a:	89a3      	ldrh	r3, [r4, #12]
 800b35c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b364:	d003      	beq.n	800b36e <__swsetup_r+0x7a>
 800b366:	4621      	mov	r1, r4
 800b368:	4628      	mov	r0, r5
 800b36a:	f000 fd51 	bl	800be10 <__smakebuf_r>
 800b36e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b372:	f013 0201 	ands.w	r2, r3, #1
 800b376:	d00a      	beq.n	800b38e <__swsetup_r+0x9a>
 800b378:	2200      	movs	r2, #0
 800b37a:	60a2      	str	r2, [r4, #8]
 800b37c:	6962      	ldr	r2, [r4, #20]
 800b37e:	4252      	negs	r2, r2
 800b380:	61a2      	str	r2, [r4, #24]
 800b382:	6922      	ldr	r2, [r4, #16]
 800b384:	b942      	cbnz	r2, 800b398 <__swsetup_r+0xa4>
 800b386:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b38a:	d1c5      	bne.n	800b318 <__swsetup_r+0x24>
 800b38c:	bd38      	pop	{r3, r4, r5, pc}
 800b38e:	0799      	lsls	r1, r3, #30
 800b390:	bf58      	it	pl
 800b392:	6962      	ldrpl	r2, [r4, #20]
 800b394:	60a2      	str	r2, [r4, #8]
 800b396:	e7f4      	b.n	800b382 <__swsetup_r+0x8e>
 800b398:	2000      	movs	r0, #0
 800b39a:	e7f7      	b.n	800b38c <__swsetup_r+0x98>
 800b39c:	20000070 	.word	0x20000070

0800b3a0 <memset>:
 800b3a0:	4402      	add	r2, r0
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d100      	bne.n	800b3aa <memset+0xa>
 800b3a8:	4770      	bx	lr
 800b3aa:	f803 1b01 	strb.w	r1, [r3], #1
 800b3ae:	e7f9      	b.n	800b3a4 <memset+0x4>

0800b3b0 <strncpy>:
 800b3b0:	b510      	push	{r4, lr}
 800b3b2:	3901      	subs	r1, #1
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	b132      	cbz	r2, 800b3c6 <strncpy+0x16>
 800b3b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b3bc:	f803 4b01 	strb.w	r4, [r3], #1
 800b3c0:	3a01      	subs	r2, #1
 800b3c2:	2c00      	cmp	r4, #0
 800b3c4:	d1f7      	bne.n	800b3b6 <strncpy+0x6>
 800b3c6:	441a      	add	r2, r3
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d100      	bne.n	800b3d0 <strncpy+0x20>
 800b3ce:	bd10      	pop	{r4, pc}
 800b3d0:	f803 1b01 	strb.w	r1, [r3], #1
 800b3d4:	e7f9      	b.n	800b3ca <strncpy+0x1a>
	...

0800b3d8 <_close_r>:
 800b3d8:	b538      	push	{r3, r4, r5, lr}
 800b3da:	4d06      	ldr	r5, [pc, #24]	@ (800b3f4 <_close_r+0x1c>)
 800b3dc:	2300      	movs	r3, #0
 800b3de:	4604      	mov	r4, r0
 800b3e0:	4608      	mov	r0, r1
 800b3e2:	602b      	str	r3, [r5, #0]
 800b3e4:	f7f5 fd5b 	bl	8000e9e <_close>
 800b3e8:	1c43      	adds	r3, r0, #1
 800b3ea:	d102      	bne.n	800b3f2 <_close_r+0x1a>
 800b3ec:	682b      	ldr	r3, [r5, #0]
 800b3ee:	b103      	cbz	r3, 800b3f2 <_close_r+0x1a>
 800b3f0:	6023      	str	r3, [r4, #0]
 800b3f2:	bd38      	pop	{r3, r4, r5, pc}
 800b3f4:	200007d0 	.word	0x200007d0

0800b3f8 <_lseek_r>:
 800b3f8:	b538      	push	{r3, r4, r5, lr}
 800b3fa:	4d07      	ldr	r5, [pc, #28]	@ (800b418 <_lseek_r+0x20>)
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	4608      	mov	r0, r1
 800b400:	4611      	mov	r1, r2
 800b402:	2200      	movs	r2, #0
 800b404:	602a      	str	r2, [r5, #0]
 800b406:	461a      	mov	r2, r3
 800b408:	f7f5 fd70 	bl	8000eec <_lseek>
 800b40c:	1c43      	adds	r3, r0, #1
 800b40e:	d102      	bne.n	800b416 <_lseek_r+0x1e>
 800b410:	682b      	ldr	r3, [r5, #0]
 800b412:	b103      	cbz	r3, 800b416 <_lseek_r+0x1e>
 800b414:	6023      	str	r3, [r4, #0]
 800b416:	bd38      	pop	{r3, r4, r5, pc}
 800b418:	200007d0 	.word	0x200007d0

0800b41c <_read_r>:
 800b41c:	b538      	push	{r3, r4, r5, lr}
 800b41e:	4d07      	ldr	r5, [pc, #28]	@ (800b43c <_read_r+0x20>)
 800b420:	4604      	mov	r4, r0
 800b422:	4608      	mov	r0, r1
 800b424:	4611      	mov	r1, r2
 800b426:	2200      	movs	r2, #0
 800b428:	602a      	str	r2, [r5, #0]
 800b42a:	461a      	mov	r2, r3
 800b42c:	f7f5 fcfe 	bl	8000e2c <_read>
 800b430:	1c43      	adds	r3, r0, #1
 800b432:	d102      	bne.n	800b43a <_read_r+0x1e>
 800b434:	682b      	ldr	r3, [r5, #0]
 800b436:	b103      	cbz	r3, 800b43a <_read_r+0x1e>
 800b438:	6023      	str	r3, [r4, #0]
 800b43a:	bd38      	pop	{r3, r4, r5, pc}
 800b43c:	200007d0 	.word	0x200007d0

0800b440 <_write_r>:
 800b440:	b538      	push	{r3, r4, r5, lr}
 800b442:	4d07      	ldr	r5, [pc, #28]	@ (800b460 <_write_r+0x20>)
 800b444:	4604      	mov	r4, r0
 800b446:	4608      	mov	r0, r1
 800b448:	4611      	mov	r1, r2
 800b44a:	2200      	movs	r2, #0
 800b44c:	602a      	str	r2, [r5, #0]
 800b44e:	461a      	mov	r2, r3
 800b450:	f7f5 fd09 	bl	8000e66 <_write>
 800b454:	1c43      	adds	r3, r0, #1
 800b456:	d102      	bne.n	800b45e <_write_r+0x1e>
 800b458:	682b      	ldr	r3, [r5, #0]
 800b45a:	b103      	cbz	r3, 800b45e <_write_r+0x1e>
 800b45c:	6023      	str	r3, [r4, #0]
 800b45e:	bd38      	pop	{r3, r4, r5, pc}
 800b460:	200007d0 	.word	0x200007d0

0800b464 <__errno>:
 800b464:	4b01      	ldr	r3, [pc, #4]	@ (800b46c <__errno+0x8>)
 800b466:	6818      	ldr	r0, [r3, #0]
 800b468:	4770      	bx	lr
 800b46a:	bf00      	nop
 800b46c:	20000070 	.word	0x20000070

0800b470 <__libc_init_array>:
 800b470:	b570      	push	{r4, r5, r6, lr}
 800b472:	4d0d      	ldr	r5, [pc, #52]	@ (800b4a8 <__libc_init_array+0x38>)
 800b474:	4c0d      	ldr	r4, [pc, #52]	@ (800b4ac <__libc_init_array+0x3c>)
 800b476:	1b64      	subs	r4, r4, r5
 800b478:	10a4      	asrs	r4, r4, #2
 800b47a:	2600      	movs	r6, #0
 800b47c:	42a6      	cmp	r6, r4
 800b47e:	d109      	bne.n	800b494 <__libc_init_array+0x24>
 800b480:	4d0b      	ldr	r5, [pc, #44]	@ (800b4b0 <__libc_init_array+0x40>)
 800b482:	4c0c      	ldr	r4, [pc, #48]	@ (800b4b4 <__libc_init_array+0x44>)
 800b484:	f000 fd32 	bl	800beec <_init>
 800b488:	1b64      	subs	r4, r4, r5
 800b48a:	10a4      	asrs	r4, r4, #2
 800b48c:	2600      	movs	r6, #0
 800b48e:	42a6      	cmp	r6, r4
 800b490:	d105      	bne.n	800b49e <__libc_init_array+0x2e>
 800b492:	bd70      	pop	{r4, r5, r6, pc}
 800b494:	f855 3b04 	ldr.w	r3, [r5], #4
 800b498:	4798      	blx	r3
 800b49a:	3601      	adds	r6, #1
 800b49c:	e7ee      	b.n	800b47c <__libc_init_array+0xc>
 800b49e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4a2:	4798      	blx	r3
 800b4a4:	3601      	adds	r6, #1
 800b4a6:	e7f2      	b.n	800b48e <__libc_init_array+0x1e>
 800b4a8:	0800c0d8 	.word	0x0800c0d8
 800b4ac:	0800c0d8 	.word	0x0800c0d8
 800b4b0:	0800c0d8 	.word	0x0800c0d8
 800b4b4:	0800c0dc 	.word	0x0800c0dc

0800b4b8 <__retarget_lock_init_recursive>:
 800b4b8:	4770      	bx	lr

0800b4ba <__retarget_lock_acquire_recursive>:
 800b4ba:	4770      	bx	lr

0800b4bc <__retarget_lock_release_recursive>:
 800b4bc:	4770      	bx	lr

0800b4be <memcpy>:
 800b4be:	440a      	add	r2, r1
 800b4c0:	4291      	cmp	r1, r2
 800b4c2:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4c6:	d100      	bne.n	800b4ca <memcpy+0xc>
 800b4c8:	4770      	bx	lr
 800b4ca:	b510      	push	{r4, lr}
 800b4cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4d4:	4291      	cmp	r1, r2
 800b4d6:	d1f9      	bne.n	800b4cc <memcpy+0xe>
 800b4d8:	bd10      	pop	{r4, pc}
	...

0800b4dc <_free_r>:
 800b4dc:	b538      	push	{r3, r4, r5, lr}
 800b4de:	4605      	mov	r5, r0
 800b4e0:	2900      	cmp	r1, #0
 800b4e2:	d041      	beq.n	800b568 <_free_r+0x8c>
 800b4e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4e8:	1f0c      	subs	r4, r1, #4
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	bfb8      	it	lt
 800b4ee:	18e4      	addlt	r4, r4, r3
 800b4f0:	f000 f8e0 	bl	800b6b4 <__malloc_lock>
 800b4f4:	4a1d      	ldr	r2, [pc, #116]	@ (800b56c <_free_r+0x90>)
 800b4f6:	6813      	ldr	r3, [r2, #0]
 800b4f8:	b933      	cbnz	r3, 800b508 <_free_r+0x2c>
 800b4fa:	6063      	str	r3, [r4, #4]
 800b4fc:	6014      	str	r4, [r2, #0]
 800b4fe:	4628      	mov	r0, r5
 800b500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b504:	f000 b8dc 	b.w	800b6c0 <__malloc_unlock>
 800b508:	42a3      	cmp	r3, r4
 800b50a:	d908      	bls.n	800b51e <_free_r+0x42>
 800b50c:	6820      	ldr	r0, [r4, #0]
 800b50e:	1821      	adds	r1, r4, r0
 800b510:	428b      	cmp	r3, r1
 800b512:	bf01      	itttt	eq
 800b514:	6819      	ldreq	r1, [r3, #0]
 800b516:	685b      	ldreq	r3, [r3, #4]
 800b518:	1809      	addeq	r1, r1, r0
 800b51a:	6021      	streq	r1, [r4, #0]
 800b51c:	e7ed      	b.n	800b4fa <_free_r+0x1e>
 800b51e:	461a      	mov	r2, r3
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	b10b      	cbz	r3, 800b528 <_free_r+0x4c>
 800b524:	42a3      	cmp	r3, r4
 800b526:	d9fa      	bls.n	800b51e <_free_r+0x42>
 800b528:	6811      	ldr	r1, [r2, #0]
 800b52a:	1850      	adds	r0, r2, r1
 800b52c:	42a0      	cmp	r0, r4
 800b52e:	d10b      	bne.n	800b548 <_free_r+0x6c>
 800b530:	6820      	ldr	r0, [r4, #0]
 800b532:	4401      	add	r1, r0
 800b534:	1850      	adds	r0, r2, r1
 800b536:	4283      	cmp	r3, r0
 800b538:	6011      	str	r1, [r2, #0]
 800b53a:	d1e0      	bne.n	800b4fe <_free_r+0x22>
 800b53c:	6818      	ldr	r0, [r3, #0]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	6053      	str	r3, [r2, #4]
 800b542:	4408      	add	r0, r1
 800b544:	6010      	str	r0, [r2, #0]
 800b546:	e7da      	b.n	800b4fe <_free_r+0x22>
 800b548:	d902      	bls.n	800b550 <_free_r+0x74>
 800b54a:	230c      	movs	r3, #12
 800b54c:	602b      	str	r3, [r5, #0]
 800b54e:	e7d6      	b.n	800b4fe <_free_r+0x22>
 800b550:	6820      	ldr	r0, [r4, #0]
 800b552:	1821      	adds	r1, r4, r0
 800b554:	428b      	cmp	r3, r1
 800b556:	bf04      	itt	eq
 800b558:	6819      	ldreq	r1, [r3, #0]
 800b55a:	685b      	ldreq	r3, [r3, #4]
 800b55c:	6063      	str	r3, [r4, #4]
 800b55e:	bf04      	itt	eq
 800b560:	1809      	addeq	r1, r1, r0
 800b562:	6021      	streq	r1, [r4, #0]
 800b564:	6054      	str	r4, [r2, #4]
 800b566:	e7ca      	b.n	800b4fe <_free_r+0x22>
 800b568:	bd38      	pop	{r3, r4, r5, pc}
 800b56a:	bf00      	nop
 800b56c:	200007dc 	.word	0x200007dc

0800b570 <sbrk_aligned>:
 800b570:	b570      	push	{r4, r5, r6, lr}
 800b572:	4e0f      	ldr	r6, [pc, #60]	@ (800b5b0 <sbrk_aligned+0x40>)
 800b574:	460c      	mov	r4, r1
 800b576:	6831      	ldr	r1, [r6, #0]
 800b578:	4605      	mov	r5, r0
 800b57a:	b911      	cbnz	r1, 800b582 <sbrk_aligned+0x12>
 800b57c:	f000 fca6 	bl	800becc <_sbrk_r>
 800b580:	6030      	str	r0, [r6, #0]
 800b582:	4621      	mov	r1, r4
 800b584:	4628      	mov	r0, r5
 800b586:	f000 fca1 	bl	800becc <_sbrk_r>
 800b58a:	1c43      	adds	r3, r0, #1
 800b58c:	d103      	bne.n	800b596 <sbrk_aligned+0x26>
 800b58e:	f04f 34ff 	mov.w	r4, #4294967295
 800b592:	4620      	mov	r0, r4
 800b594:	bd70      	pop	{r4, r5, r6, pc}
 800b596:	1cc4      	adds	r4, r0, #3
 800b598:	f024 0403 	bic.w	r4, r4, #3
 800b59c:	42a0      	cmp	r0, r4
 800b59e:	d0f8      	beq.n	800b592 <sbrk_aligned+0x22>
 800b5a0:	1a21      	subs	r1, r4, r0
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	f000 fc92 	bl	800becc <_sbrk_r>
 800b5a8:	3001      	adds	r0, #1
 800b5aa:	d1f2      	bne.n	800b592 <sbrk_aligned+0x22>
 800b5ac:	e7ef      	b.n	800b58e <sbrk_aligned+0x1e>
 800b5ae:	bf00      	nop
 800b5b0:	200007d8 	.word	0x200007d8

0800b5b4 <_malloc_r>:
 800b5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5b8:	1ccd      	adds	r5, r1, #3
 800b5ba:	f025 0503 	bic.w	r5, r5, #3
 800b5be:	3508      	adds	r5, #8
 800b5c0:	2d0c      	cmp	r5, #12
 800b5c2:	bf38      	it	cc
 800b5c4:	250c      	movcc	r5, #12
 800b5c6:	2d00      	cmp	r5, #0
 800b5c8:	4606      	mov	r6, r0
 800b5ca:	db01      	blt.n	800b5d0 <_malloc_r+0x1c>
 800b5cc:	42a9      	cmp	r1, r5
 800b5ce:	d904      	bls.n	800b5da <_malloc_r+0x26>
 800b5d0:	230c      	movs	r3, #12
 800b5d2:	6033      	str	r3, [r6, #0]
 800b5d4:	2000      	movs	r0, #0
 800b5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b6b0 <_malloc_r+0xfc>
 800b5de:	f000 f869 	bl	800b6b4 <__malloc_lock>
 800b5e2:	f8d8 3000 	ldr.w	r3, [r8]
 800b5e6:	461c      	mov	r4, r3
 800b5e8:	bb44      	cbnz	r4, 800b63c <_malloc_r+0x88>
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	f7ff ffbf 	bl	800b570 <sbrk_aligned>
 800b5f2:	1c43      	adds	r3, r0, #1
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	d158      	bne.n	800b6aa <_malloc_r+0xf6>
 800b5f8:	f8d8 4000 	ldr.w	r4, [r8]
 800b5fc:	4627      	mov	r7, r4
 800b5fe:	2f00      	cmp	r7, #0
 800b600:	d143      	bne.n	800b68a <_malloc_r+0xd6>
 800b602:	2c00      	cmp	r4, #0
 800b604:	d04b      	beq.n	800b69e <_malloc_r+0xea>
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	4639      	mov	r1, r7
 800b60a:	4630      	mov	r0, r6
 800b60c:	eb04 0903 	add.w	r9, r4, r3
 800b610:	f000 fc5c 	bl	800becc <_sbrk_r>
 800b614:	4581      	cmp	r9, r0
 800b616:	d142      	bne.n	800b69e <_malloc_r+0xea>
 800b618:	6821      	ldr	r1, [r4, #0]
 800b61a:	1a6d      	subs	r5, r5, r1
 800b61c:	4629      	mov	r1, r5
 800b61e:	4630      	mov	r0, r6
 800b620:	f7ff ffa6 	bl	800b570 <sbrk_aligned>
 800b624:	3001      	adds	r0, #1
 800b626:	d03a      	beq.n	800b69e <_malloc_r+0xea>
 800b628:	6823      	ldr	r3, [r4, #0]
 800b62a:	442b      	add	r3, r5
 800b62c:	6023      	str	r3, [r4, #0]
 800b62e:	f8d8 3000 	ldr.w	r3, [r8]
 800b632:	685a      	ldr	r2, [r3, #4]
 800b634:	bb62      	cbnz	r2, 800b690 <_malloc_r+0xdc>
 800b636:	f8c8 7000 	str.w	r7, [r8]
 800b63a:	e00f      	b.n	800b65c <_malloc_r+0xa8>
 800b63c:	6822      	ldr	r2, [r4, #0]
 800b63e:	1b52      	subs	r2, r2, r5
 800b640:	d420      	bmi.n	800b684 <_malloc_r+0xd0>
 800b642:	2a0b      	cmp	r2, #11
 800b644:	d917      	bls.n	800b676 <_malloc_r+0xc2>
 800b646:	1961      	adds	r1, r4, r5
 800b648:	42a3      	cmp	r3, r4
 800b64a:	6025      	str	r5, [r4, #0]
 800b64c:	bf18      	it	ne
 800b64e:	6059      	strne	r1, [r3, #4]
 800b650:	6863      	ldr	r3, [r4, #4]
 800b652:	bf08      	it	eq
 800b654:	f8c8 1000 	streq.w	r1, [r8]
 800b658:	5162      	str	r2, [r4, r5]
 800b65a:	604b      	str	r3, [r1, #4]
 800b65c:	4630      	mov	r0, r6
 800b65e:	f000 f82f 	bl	800b6c0 <__malloc_unlock>
 800b662:	f104 000b 	add.w	r0, r4, #11
 800b666:	1d23      	adds	r3, r4, #4
 800b668:	f020 0007 	bic.w	r0, r0, #7
 800b66c:	1ac2      	subs	r2, r0, r3
 800b66e:	bf1c      	itt	ne
 800b670:	1a1b      	subne	r3, r3, r0
 800b672:	50a3      	strne	r3, [r4, r2]
 800b674:	e7af      	b.n	800b5d6 <_malloc_r+0x22>
 800b676:	6862      	ldr	r2, [r4, #4]
 800b678:	42a3      	cmp	r3, r4
 800b67a:	bf0c      	ite	eq
 800b67c:	f8c8 2000 	streq.w	r2, [r8]
 800b680:	605a      	strne	r2, [r3, #4]
 800b682:	e7eb      	b.n	800b65c <_malloc_r+0xa8>
 800b684:	4623      	mov	r3, r4
 800b686:	6864      	ldr	r4, [r4, #4]
 800b688:	e7ae      	b.n	800b5e8 <_malloc_r+0x34>
 800b68a:	463c      	mov	r4, r7
 800b68c:	687f      	ldr	r7, [r7, #4]
 800b68e:	e7b6      	b.n	800b5fe <_malloc_r+0x4a>
 800b690:	461a      	mov	r2, r3
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	42a3      	cmp	r3, r4
 800b696:	d1fb      	bne.n	800b690 <_malloc_r+0xdc>
 800b698:	2300      	movs	r3, #0
 800b69a:	6053      	str	r3, [r2, #4]
 800b69c:	e7de      	b.n	800b65c <_malloc_r+0xa8>
 800b69e:	230c      	movs	r3, #12
 800b6a0:	6033      	str	r3, [r6, #0]
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	f000 f80c 	bl	800b6c0 <__malloc_unlock>
 800b6a8:	e794      	b.n	800b5d4 <_malloc_r+0x20>
 800b6aa:	6005      	str	r5, [r0, #0]
 800b6ac:	e7d6      	b.n	800b65c <_malloc_r+0xa8>
 800b6ae:	bf00      	nop
 800b6b0:	200007dc 	.word	0x200007dc

0800b6b4 <__malloc_lock>:
 800b6b4:	4801      	ldr	r0, [pc, #4]	@ (800b6bc <__malloc_lock+0x8>)
 800b6b6:	f7ff bf00 	b.w	800b4ba <__retarget_lock_acquire_recursive>
 800b6ba:	bf00      	nop
 800b6bc:	200007d4 	.word	0x200007d4

0800b6c0 <__malloc_unlock>:
 800b6c0:	4801      	ldr	r0, [pc, #4]	@ (800b6c8 <__malloc_unlock+0x8>)
 800b6c2:	f7ff befb 	b.w	800b4bc <__retarget_lock_release_recursive>
 800b6c6:	bf00      	nop
 800b6c8:	200007d4 	.word	0x200007d4

0800b6cc <__sfputc_r>:
 800b6cc:	6893      	ldr	r3, [r2, #8]
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	b410      	push	{r4}
 800b6d4:	6093      	str	r3, [r2, #8]
 800b6d6:	da08      	bge.n	800b6ea <__sfputc_r+0x1e>
 800b6d8:	6994      	ldr	r4, [r2, #24]
 800b6da:	42a3      	cmp	r3, r4
 800b6dc:	db01      	blt.n	800b6e2 <__sfputc_r+0x16>
 800b6de:	290a      	cmp	r1, #10
 800b6e0:	d103      	bne.n	800b6ea <__sfputc_r+0x1e>
 800b6e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6e6:	f7ff bdc6 	b.w	800b276 <__swbuf_r>
 800b6ea:	6813      	ldr	r3, [r2, #0]
 800b6ec:	1c58      	adds	r0, r3, #1
 800b6ee:	6010      	str	r0, [r2, #0]
 800b6f0:	7019      	strb	r1, [r3, #0]
 800b6f2:	4608      	mov	r0, r1
 800b6f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6f8:	4770      	bx	lr

0800b6fa <__sfputs_r>:
 800b6fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6fc:	4606      	mov	r6, r0
 800b6fe:	460f      	mov	r7, r1
 800b700:	4614      	mov	r4, r2
 800b702:	18d5      	adds	r5, r2, r3
 800b704:	42ac      	cmp	r4, r5
 800b706:	d101      	bne.n	800b70c <__sfputs_r+0x12>
 800b708:	2000      	movs	r0, #0
 800b70a:	e007      	b.n	800b71c <__sfputs_r+0x22>
 800b70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b710:	463a      	mov	r2, r7
 800b712:	4630      	mov	r0, r6
 800b714:	f7ff ffda 	bl	800b6cc <__sfputc_r>
 800b718:	1c43      	adds	r3, r0, #1
 800b71a:	d1f3      	bne.n	800b704 <__sfputs_r+0xa>
 800b71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b720 <_vfiprintf_r>:
 800b720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b724:	460d      	mov	r5, r1
 800b726:	b09d      	sub	sp, #116	@ 0x74
 800b728:	4614      	mov	r4, r2
 800b72a:	4698      	mov	r8, r3
 800b72c:	4606      	mov	r6, r0
 800b72e:	b118      	cbz	r0, 800b738 <_vfiprintf_r+0x18>
 800b730:	6a03      	ldr	r3, [r0, #32]
 800b732:	b90b      	cbnz	r3, 800b738 <_vfiprintf_r+0x18>
 800b734:	f7ff fcb6 	bl	800b0a4 <__sinit>
 800b738:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b73a:	07d9      	lsls	r1, r3, #31
 800b73c:	d405      	bmi.n	800b74a <_vfiprintf_r+0x2a>
 800b73e:	89ab      	ldrh	r3, [r5, #12]
 800b740:	059a      	lsls	r2, r3, #22
 800b742:	d402      	bmi.n	800b74a <_vfiprintf_r+0x2a>
 800b744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b746:	f7ff feb8 	bl	800b4ba <__retarget_lock_acquire_recursive>
 800b74a:	89ab      	ldrh	r3, [r5, #12]
 800b74c:	071b      	lsls	r3, r3, #28
 800b74e:	d501      	bpl.n	800b754 <_vfiprintf_r+0x34>
 800b750:	692b      	ldr	r3, [r5, #16]
 800b752:	b99b      	cbnz	r3, 800b77c <_vfiprintf_r+0x5c>
 800b754:	4629      	mov	r1, r5
 800b756:	4630      	mov	r0, r6
 800b758:	f7ff fdcc 	bl	800b2f4 <__swsetup_r>
 800b75c:	b170      	cbz	r0, 800b77c <_vfiprintf_r+0x5c>
 800b75e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b760:	07dc      	lsls	r4, r3, #31
 800b762:	d504      	bpl.n	800b76e <_vfiprintf_r+0x4e>
 800b764:	f04f 30ff 	mov.w	r0, #4294967295
 800b768:	b01d      	add	sp, #116	@ 0x74
 800b76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b76e:	89ab      	ldrh	r3, [r5, #12]
 800b770:	0598      	lsls	r0, r3, #22
 800b772:	d4f7      	bmi.n	800b764 <_vfiprintf_r+0x44>
 800b774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b776:	f7ff fea1 	bl	800b4bc <__retarget_lock_release_recursive>
 800b77a:	e7f3      	b.n	800b764 <_vfiprintf_r+0x44>
 800b77c:	2300      	movs	r3, #0
 800b77e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b780:	2320      	movs	r3, #32
 800b782:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b786:	f8cd 800c 	str.w	r8, [sp, #12]
 800b78a:	2330      	movs	r3, #48	@ 0x30
 800b78c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b93c <_vfiprintf_r+0x21c>
 800b790:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b794:	f04f 0901 	mov.w	r9, #1
 800b798:	4623      	mov	r3, r4
 800b79a:	469a      	mov	sl, r3
 800b79c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7a0:	b10a      	cbz	r2, 800b7a6 <_vfiprintf_r+0x86>
 800b7a2:	2a25      	cmp	r2, #37	@ 0x25
 800b7a4:	d1f9      	bne.n	800b79a <_vfiprintf_r+0x7a>
 800b7a6:	ebba 0b04 	subs.w	fp, sl, r4
 800b7aa:	d00b      	beq.n	800b7c4 <_vfiprintf_r+0xa4>
 800b7ac:	465b      	mov	r3, fp
 800b7ae:	4622      	mov	r2, r4
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	f7ff ffa1 	bl	800b6fa <__sfputs_r>
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	f000 80a7 	beq.w	800b90c <_vfiprintf_r+0x1ec>
 800b7be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7c0:	445a      	add	r2, fp
 800b7c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f000 809f 	beq.w	800b90c <_vfiprintf_r+0x1ec>
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7d8:	f10a 0a01 	add.w	sl, sl, #1
 800b7dc:	9304      	str	r3, [sp, #16]
 800b7de:	9307      	str	r3, [sp, #28]
 800b7e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7e6:	4654      	mov	r4, sl
 800b7e8:	2205      	movs	r2, #5
 800b7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ee:	4853      	ldr	r0, [pc, #332]	@ (800b93c <_vfiprintf_r+0x21c>)
 800b7f0:	f7f4 fcc6 	bl	8000180 <memchr>
 800b7f4:	9a04      	ldr	r2, [sp, #16]
 800b7f6:	b9d8      	cbnz	r0, 800b830 <_vfiprintf_r+0x110>
 800b7f8:	06d1      	lsls	r1, r2, #27
 800b7fa:	bf44      	itt	mi
 800b7fc:	2320      	movmi	r3, #32
 800b7fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b802:	0713      	lsls	r3, r2, #28
 800b804:	bf44      	itt	mi
 800b806:	232b      	movmi	r3, #43	@ 0x2b
 800b808:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b80c:	f89a 3000 	ldrb.w	r3, [sl]
 800b810:	2b2a      	cmp	r3, #42	@ 0x2a
 800b812:	d015      	beq.n	800b840 <_vfiprintf_r+0x120>
 800b814:	9a07      	ldr	r2, [sp, #28]
 800b816:	4654      	mov	r4, sl
 800b818:	2000      	movs	r0, #0
 800b81a:	f04f 0c0a 	mov.w	ip, #10
 800b81e:	4621      	mov	r1, r4
 800b820:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b824:	3b30      	subs	r3, #48	@ 0x30
 800b826:	2b09      	cmp	r3, #9
 800b828:	d94b      	bls.n	800b8c2 <_vfiprintf_r+0x1a2>
 800b82a:	b1b0      	cbz	r0, 800b85a <_vfiprintf_r+0x13a>
 800b82c:	9207      	str	r2, [sp, #28]
 800b82e:	e014      	b.n	800b85a <_vfiprintf_r+0x13a>
 800b830:	eba0 0308 	sub.w	r3, r0, r8
 800b834:	fa09 f303 	lsl.w	r3, r9, r3
 800b838:	4313      	orrs	r3, r2
 800b83a:	9304      	str	r3, [sp, #16]
 800b83c:	46a2      	mov	sl, r4
 800b83e:	e7d2      	b.n	800b7e6 <_vfiprintf_r+0xc6>
 800b840:	9b03      	ldr	r3, [sp, #12]
 800b842:	1d19      	adds	r1, r3, #4
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	9103      	str	r1, [sp, #12]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	bfbb      	ittet	lt
 800b84c:	425b      	neglt	r3, r3
 800b84e:	f042 0202 	orrlt.w	r2, r2, #2
 800b852:	9307      	strge	r3, [sp, #28]
 800b854:	9307      	strlt	r3, [sp, #28]
 800b856:	bfb8      	it	lt
 800b858:	9204      	strlt	r2, [sp, #16]
 800b85a:	7823      	ldrb	r3, [r4, #0]
 800b85c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b85e:	d10a      	bne.n	800b876 <_vfiprintf_r+0x156>
 800b860:	7863      	ldrb	r3, [r4, #1]
 800b862:	2b2a      	cmp	r3, #42	@ 0x2a
 800b864:	d132      	bne.n	800b8cc <_vfiprintf_r+0x1ac>
 800b866:	9b03      	ldr	r3, [sp, #12]
 800b868:	1d1a      	adds	r2, r3, #4
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	9203      	str	r2, [sp, #12]
 800b86e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b872:	3402      	adds	r4, #2
 800b874:	9305      	str	r3, [sp, #20]
 800b876:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b94c <_vfiprintf_r+0x22c>
 800b87a:	7821      	ldrb	r1, [r4, #0]
 800b87c:	2203      	movs	r2, #3
 800b87e:	4650      	mov	r0, sl
 800b880:	f7f4 fc7e 	bl	8000180 <memchr>
 800b884:	b138      	cbz	r0, 800b896 <_vfiprintf_r+0x176>
 800b886:	9b04      	ldr	r3, [sp, #16]
 800b888:	eba0 000a 	sub.w	r0, r0, sl
 800b88c:	2240      	movs	r2, #64	@ 0x40
 800b88e:	4082      	lsls	r2, r0
 800b890:	4313      	orrs	r3, r2
 800b892:	3401      	adds	r4, #1
 800b894:	9304      	str	r3, [sp, #16]
 800b896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b89a:	4829      	ldr	r0, [pc, #164]	@ (800b940 <_vfiprintf_r+0x220>)
 800b89c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8a0:	2206      	movs	r2, #6
 800b8a2:	f7f4 fc6d 	bl	8000180 <memchr>
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	d03f      	beq.n	800b92a <_vfiprintf_r+0x20a>
 800b8aa:	4b26      	ldr	r3, [pc, #152]	@ (800b944 <_vfiprintf_r+0x224>)
 800b8ac:	bb1b      	cbnz	r3, 800b8f6 <_vfiprintf_r+0x1d6>
 800b8ae:	9b03      	ldr	r3, [sp, #12]
 800b8b0:	3307      	adds	r3, #7
 800b8b2:	f023 0307 	bic.w	r3, r3, #7
 800b8b6:	3308      	adds	r3, #8
 800b8b8:	9303      	str	r3, [sp, #12]
 800b8ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8bc:	443b      	add	r3, r7
 800b8be:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8c0:	e76a      	b.n	800b798 <_vfiprintf_r+0x78>
 800b8c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8c6:	460c      	mov	r4, r1
 800b8c8:	2001      	movs	r0, #1
 800b8ca:	e7a8      	b.n	800b81e <_vfiprintf_r+0xfe>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	3401      	adds	r4, #1
 800b8d0:	9305      	str	r3, [sp, #20]
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	f04f 0c0a 	mov.w	ip, #10
 800b8d8:	4620      	mov	r0, r4
 800b8da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8de:	3a30      	subs	r2, #48	@ 0x30
 800b8e0:	2a09      	cmp	r2, #9
 800b8e2:	d903      	bls.n	800b8ec <_vfiprintf_r+0x1cc>
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d0c6      	beq.n	800b876 <_vfiprintf_r+0x156>
 800b8e8:	9105      	str	r1, [sp, #20]
 800b8ea:	e7c4      	b.n	800b876 <_vfiprintf_r+0x156>
 800b8ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e7f0      	b.n	800b8d8 <_vfiprintf_r+0x1b8>
 800b8f6:	ab03      	add	r3, sp, #12
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	462a      	mov	r2, r5
 800b8fc:	4b12      	ldr	r3, [pc, #72]	@ (800b948 <_vfiprintf_r+0x228>)
 800b8fe:	a904      	add	r1, sp, #16
 800b900:	4630      	mov	r0, r6
 800b902:	f3af 8000 	nop.w
 800b906:	4607      	mov	r7, r0
 800b908:	1c78      	adds	r0, r7, #1
 800b90a:	d1d6      	bne.n	800b8ba <_vfiprintf_r+0x19a>
 800b90c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b90e:	07d9      	lsls	r1, r3, #31
 800b910:	d405      	bmi.n	800b91e <_vfiprintf_r+0x1fe>
 800b912:	89ab      	ldrh	r3, [r5, #12]
 800b914:	059a      	lsls	r2, r3, #22
 800b916:	d402      	bmi.n	800b91e <_vfiprintf_r+0x1fe>
 800b918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b91a:	f7ff fdcf 	bl	800b4bc <__retarget_lock_release_recursive>
 800b91e:	89ab      	ldrh	r3, [r5, #12]
 800b920:	065b      	lsls	r3, r3, #25
 800b922:	f53f af1f 	bmi.w	800b764 <_vfiprintf_r+0x44>
 800b926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b928:	e71e      	b.n	800b768 <_vfiprintf_r+0x48>
 800b92a:	ab03      	add	r3, sp, #12
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	462a      	mov	r2, r5
 800b930:	4b05      	ldr	r3, [pc, #20]	@ (800b948 <_vfiprintf_r+0x228>)
 800b932:	a904      	add	r1, sp, #16
 800b934:	4630      	mov	r0, r6
 800b936:	f000 f879 	bl	800ba2c <_printf_i>
 800b93a:	e7e4      	b.n	800b906 <_vfiprintf_r+0x1e6>
 800b93c:	0800c09c 	.word	0x0800c09c
 800b940:	0800c0a6 	.word	0x0800c0a6
 800b944:	00000000 	.word	0x00000000
 800b948:	0800b6fb 	.word	0x0800b6fb
 800b94c:	0800c0a2 	.word	0x0800c0a2

0800b950 <_printf_common>:
 800b950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b954:	4616      	mov	r6, r2
 800b956:	4698      	mov	r8, r3
 800b958:	688a      	ldr	r2, [r1, #8]
 800b95a:	690b      	ldr	r3, [r1, #16]
 800b95c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b960:	4293      	cmp	r3, r2
 800b962:	bfb8      	it	lt
 800b964:	4613      	movlt	r3, r2
 800b966:	6033      	str	r3, [r6, #0]
 800b968:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b96c:	4607      	mov	r7, r0
 800b96e:	460c      	mov	r4, r1
 800b970:	b10a      	cbz	r2, 800b976 <_printf_common+0x26>
 800b972:	3301      	adds	r3, #1
 800b974:	6033      	str	r3, [r6, #0]
 800b976:	6823      	ldr	r3, [r4, #0]
 800b978:	0699      	lsls	r1, r3, #26
 800b97a:	bf42      	ittt	mi
 800b97c:	6833      	ldrmi	r3, [r6, #0]
 800b97e:	3302      	addmi	r3, #2
 800b980:	6033      	strmi	r3, [r6, #0]
 800b982:	6825      	ldr	r5, [r4, #0]
 800b984:	f015 0506 	ands.w	r5, r5, #6
 800b988:	d106      	bne.n	800b998 <_printf_common+0x48>
 800b98a:	f104 0a19 	add.w	sl, r4, #25
 800b98e:	68e3      	ldr	r3, [r4, #12]
 800b990:	6832      	ldr	r2, [r6, #0]
 800b992:	1a9b      	subs	r3, r3, r2
 800b994:	42ab      	cmp	r3, r5
 800b996:	dc26      	bgt.n	800b9e6 <_printf_common+0x96>
 800b998:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b99c:	6822      	ldr	r2, [r4, #0]
 800b99e:	3b00      	subs	r3, #0
 800b9a0:	bf18      	it	ne
 800b9a2:	2301      	movne	r3, #1
 800b9a4:	0692      	lsls	r2, r2, #26
 800b9a6:	d42b      	bmi.n	800ba00 <_printf_common+0xb0>
 800b9a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b9ac:	4641      	mov	r1, r8
 800b9ae:	4638      	mov	r0, r7
 800b9b0:	47c8      	blx	r9
 800b9b2:	3001      	adds	r0, #1
 800b9b4:	d01e      	beq.n	800b9f4 <_printf_common+0xa4>
 800b9b6:	6823      	ldr	r3, [r4, #0]
 800b9b8:	6922      	ldr	r2, [r4, #16]
 800b9ba:	f003 0306 	and.w	r3, r3, #6
 800b9be:	2b04      	cmp	r3, #4
 800b9c0:	bf02      	ittt	eq
 800b9c2:	68e5      	ldreq	r5, [r4, #12]
 800b9c4:	6833      	ldreq	r3, [r6, #0]
 800b9c6:	1aed      	subeq	r5, r5, r3
 800b9c8:	68a3      	ldr	r3, [r4, #8]
 800b9ca:	bf0c      	ite	eq
 800b9cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9d0:	2500      	movne	r5, #0
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	bfc4      	itt	gt
 800b9d6:	1a9b      	subgt	r3, r3, r2
 800b9d8:	18ed      	addgt	r5, r5, r3
 800b9da:	2600      	movs	r6, #0
 800b9dc:	341a      	adds	r4, #26
 800b9de:	42b5      	cmp	r5, r6
 800b9e0:	d11a      	bne.n	800ba18 <_printf_common+0xc8>
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	e008      	b.n	800b9f8 <_printf_common+0xa8>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	4652      	mov	r2, sl
 800b9ea:	4641      	mov	r1, r8
 800b9ec:	4638      	mov	r0, r7
 800b9ee:	47c8      	blx	r9
 800b9f0:	3001      	adds	r0, #1
 800b9f2:	d103      	bne.n	800b9fc <_printf_common+0xac>
 800b9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9fc:	3501      	adds	r5, #1
 800b9fe:	e7c6      	b.n	800b98e <_printf_common+0x3e>
 800ba00:	18e1      	adds	r1, r4, r3
 800ba02:	1c5a      	adds	r2, r3, #1
 800ba04:	2030      	movs	r0, #48	@ 0x30
 800ba06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba0a:	4422      	add	r2, r4
 800ba0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba14:	3302      	adds	r3, #2
 800ba16:	e7c7      	b.n	800b9a8 <_printf_common+0x58>
 800ba18:	2301      	movs	r3, #1
 800ba1a:	4622      	mov	r2, r4
 800ba1c:	4641      	mov	r1, r8
 800ba1e:	4638      	mov	r0, r7
 800ba20:	47c8      	blx	r9
 800ba22:	3001      	adds	r0, #1
 800ba24:	d0e6      	beq.n	800b9f4 <_printf_common+0xa4>
 800ba26:	3601      	adds	r6, #1
 800ba28:	e7d9      	b.n	800b9de <_printf_common+0x8e>
	...

0800ba2c <_printf_i>:
 800ba2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba30:	7e0f      	ldrb	r7, [r1, #24]
 800ba32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba34:	2f78      	cmp	r7, #120	@ 0x78
 800ba36:	4691      	mov	r9, r2
 800ba38:	4680      	mov	r8, r0
 800ba3a:	460c      	mov	r4, r1
 800ba3c:	469a      	mov	sl, r3
 800ba3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba42:	d807      	bhi.n	800ba54 <_printf_i+0x28>
 800ba44:	2f62      	cmp	r7, #98	@ 0x62
 800ba46:	d80a      	bhi.n	800ba5e <_printf_i+0x32>
 800ba48:	2f00      	cmp	r7, #0
 800ba4a:	f000 80d2 	beq.w	800bbf2 <_printf_i+0x1c6>
 800ba4e:	2f58      	cmp	r7, #88	@ 0x58
 800ba50:	f000 80b9 	beq.w	800bbc6 <_printf_i+0x19a>
 800ba54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba5c:	e03a      	b.n	800bad4 <_printf_i+0xa8>
 800ba5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba62:	2b15      	cmp	r3, #21
 800ba64:	d8f6      	bhi.n	800ba54 <_printf_i+0x28>
 800ba66:	a101      	add	r1, pc, #4	@ (adr r1, 800ba6c <_printf_i+0x40>)
 800ba68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba6c:	0800bac5 	.word	0x0800bac5
 800ba70:	0800bad9 	.word	0x0800bad9
 800ba74:	0800ba55 	.word	0x0800ba55
 800ba78:	0800ba55 	.word	0x0800ba55
 800ba7c:	0800ba55 	.word	0x0800ba55
 800ba80:	0800ba55 	.word	0x0800ba55
 800ba84:	0800bad9 	.word	0x0800bad9
 800ba88:	0800ba55 	.word	0x0800ba55
 800ba8c:	0800ba55 	.word	0x0800ba55
 800ba90:	0800ba55 	.word	0x0800ba55
 800ba94:	0800ba55 	.word	0x0800ba55
 800ba98:	0800bbd9 	.word	0x0800bbd9
 800ba9c:	0800bb03 	.word	0x0800bb03
 800baa0:	0800bb93 	.word	0x0800bb93
 800baa4:	0800ba55 	.word	0x0800ba55
 800baa8:	0800ba55 	.word	0x0800ba55
 800baac:	0800bbfb 	.word	0x0800bbfb
 800bab0:	0800ba55 	.word	0x0800ba55
 800bab4:	0800bb03 	.word	0x0800bb03
 800bab8:	0800ba55 	.word	0x0800ba55
 800babc:	0800ba55 	.word	0x0800ba55
 800bac0:	0800bb9b 	.word	0x0800bb9b
 800bac4:	6833      	ldr	r3, [r6, #0]
 800bac6:	1d1a      	adds	r2, r3, #4
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	6032      	str	r2, [r6, #0]
 800bacc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bad0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bad4:	2301      	movs	r3, #1
 800bad6:	e09d      	b.n	800bc14 <_printf_i+0x1e8>
 800bad8:	6833      	ldr	r3, [r6, #0]
 800bada:	6820      	ldr	r0, [r4, #0]
 800badc:	1d19      	adds	r1, r3, #4
 800bade:	6031      	str	r1, [r6, #0]
 800bae0:	0606      	lsls	r6, r0, #24
 800bae2:	d501      	bpl.n	800bae8 <_printf_i+0xbc>
 800bae4:	681d      	ldr	r5, [r3, #0]
 800bae6:	e003      	b.n	800baf0 <_printf_i+0xc4>
 800bae8:	0645      	lsls	r5, r0, #25
 800baea:	d5fb      	bpl.n	800bae4 <_printf_i+0xb8>
 800baec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800baf0:	2d00      	cmp	r5, #0
 800baf2:	da03      	bge.n	800bafc <_printf_i+0xd0>
 800baf4:	232d      	movs	r3, #45	@ 0x2d
 800baf6:	426d      	negs	r5, r5
 800baf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bafc:	4859      	ldr	r0, [pc, #356]	@ (800bc64 <_printf_i+0x238>)
 800bafe:	230a      	movs	r3, #10
 800bb00:	e011      	b.n	800bb26 <_printf_i+0xfa>
 800bb02:	6821      	ldr	r1, [r4, #0]
 800bb04:	6833      	ldr	r3, [r6, #0]
 800bb06:	0608      	lsls	r0, r1, #24
 800bb08:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb0c:	d402      	bmi.n	800bb14 <_printf_i+0xe8>
 800bb0e:	0649      	lsls	r1, r1, #25
 800bb10:	bf48      	it	mi
 800bb12:	b2ad      	uxthmi	r5, r5
 800bb14:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb16:	4853      	ldr	r0, [pc, #332]	@ (800bc64 <_printf_i+0x238>)
 800bb18:	6033      	str	r3, [r6, #0]
 800bb1a:	bf14      	ite	ne
 800bb1c:	230a      	movne	r3, #10
 800bb1e:	2308      	moveq	r3, #8
 800bb20:	2100      	movs	r1, #0
 800bb22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb26:	6866      	ldr	r6, [r4, #4]
 800bb28:	60a6      	str	r6, [r4, #8]
 800bb2a:	2e00      	cmp	r6, #0
 800bb2c:	bfa2      	ittt	ge
 800bb2e:	6821      	ldrge	r1, [r4, #0]
 800bb30:	f021 0104 	bicge.w	r1, r1, #4
 800bb34:	6021      	strge	r1, [r4, #0]
 800bb36:	b90d      	cbnz	r5, 800bb3c <_printf_i+0x110>
 800bb38:	2e00      	cmp	r6, #0
 800bb3a:	d04b      	beq.n	800bbd4 <_printf_i+0x1a8>
 800bb3c:	4616      	mov	r6, r2
 800bb3e:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb42:	fb03 5711 	mls	r7, r3, r1, r5
 800bb46:	5dc7      	ldrb	r7, [r0, r7]
 800bb48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb4c:	462f      	mov	r7, r5
 800bb4e:	42bb      	cmp	r3, r7
 800bb50:	460d      	mov	r5, r1
 800bb52:	d9f4      	bls.n	800bb3e <_printf_i+0x112>
 800bb54:	2b08      	cmp	r3, #8
 800bb56:	d10b      	bne.n	800bb70 <_printf_i+0x144>
 800bb58:	6823      	ldr	r3, [r4, #0]
 800bb5a:	07df      	lsls	r7, r3, #31
 800bb5c:	d508      	bpl.n	800bb70 <_printf_i+0x144>
 800bb5e:	6923      	ldr	r3, [r4, #16]
 800bb60:	6861      	ldr	r1, [r4, #4]
 800bb62:	4299      	cmp	r1, r3
 800bb64:	bfde      	ittt	le
 800bb66:	2330      	movle	r3, #48	@ 0x30
 800bb68:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb70:	1b92      	subs	r2, r2, r6
 800bb72:	6122      	str	r2, [r4, #16]
 800bb74:	f8cd a000 	str.w	sl, [sp]
 800bb78:	464b      	mov	r3, r9
 800bb7a:	aa03      	add	r2, sp, #12
 800bb7c:	4621      	mov	r1, r4
 800bb7e:	4640      	mov	r0, r8
 800bb80:	f7ff fee6 	bl	800b950 <_printf_common>
 800bb84:	3001      	adds	r0, #1
 800bb86:	d14a      	bne.n	800bc1e <_printf_i+0x1f2>
 800bb88:	f04f 30ff 	mov.w	r0, #4294967295
 800bb8c:	b004      	add	sp, #16
 800bb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb92:	6823      	ldr	r3, [r4, #0]
 800bb94:	f043 0320 	orr.w	r3, r3, #32
 800bb98:	6023      	str	r3, [r4, #0]
 800bb9a:	4833      	ldr	r0, [pc, #204]	@ (800bc68 <_printf_i+0x23c>)
 800bb9c:	2778      	movs	r7, #120	@ 0x78
 800bb9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bba2:	6823      	ldr	r3, [r4, #0]
 800bba4:	6831      	ldr	r1, [r6, #0]
 800bba6:	061f      	lsls	r7, r3, #24
 800bba8:	f851 5b04 	ldr.w	r5, [r1], #4
 800bbac:	d402      	bmi.n	800bbb4 <_printf_i+0x188>
 800bbae:	065f      	lsls	r7, r3, #25
 800bbb0:	bf48      	it	mi
 800bbb2:	b2ad      	uxthmi	r5, r5
 800bbb4:	6031      	str	r1, [r6, #0]
 800bbb6:	07d9      	lsls	r1, r3, #31
 800bbb8:	bf44      	itt	mi
 800bbba:	f043 0320 	orrmi.w	r3, r3, #32
 800bbbe:	6023      	strmi	r3, [r4, #0]
 800bbc0:	b11d      	cbz	r5, 800bbca <_printf_i+0x19e>
 800bbc2:	2310      	movs	r3, #16
 800bbc4:	e7ac      	b.n	800bb20 <_printf_i+0xf4>
 800bbc6:	4827      	ldr	r0, [pc, #156]	@ (800bc64 <_printf_i+0x238>)
 800bbc8:	e7e9      	b.n	800bb9e <_printf_i+0x172>
 800bbca:	6823      	ldr	r3, [r4, #0]
 800bbcc:	f023 0320 	bic.w	r3, r3, #32
 800bbd0:	6023      	str	r3, [r4, #0]
 800bbd2:	e7f6      	b.n	800bbc2 <_printf_i+0x196>
 800bbd4:	4616      	mov	r6, r2
 800bbd6:	e7bd      	b.n	800bb54 <_printf_i+0x128>
 800bbd8:	6833      	ldr	r3, [r6, #0]
 800bbda:	6825      	ldr	r5, [r4, #0]
 800bbdc:	6961      	ldr	r1, [r4, #20]
 800bbde:	1d18      	adds	r0, r3, #4
 800bbe0:	6030      	str	r0, [r6, #0]
 800bbe2:	062e      	lsls	r6, r5, #24
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	d501      	bpl.n	800bbec <_printf_i+0x1c0>
 800bbe8:	6019      	str	r1, [r3, #0]
 800bbea:	e002      	b.n	800bbf2 <_printf_i+0x1c6>
 800bbec:	0668      	lsls	r0, r5, #25
 800bbee:	d5fb      	bpl.n	800bbe8 <_printf_i+0x1bc>
 800bbf0:	8019      	strh	r1, [r3, #0]
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	6123      	str	r3, [r4, #16]
 800bbf6:	4616      	mov	r6, r2
 800bbf8:	e7bc      	b.n	800bb74 <_printf_i+0x148>
 800bbfa:	6833      	ldr	r3, [r6, #0]
 800bbfc:	1d1a      	adds	r2, r3, #4
 800bbfe:	6032      	str	r2, [r6, #0]
 800bc00:	681e      	ldr	r6, [r3, #0]
 800bc02:	6862      	ldr	r2, [r4, #4]
 800bc04:	2100      	movs	r1, #0
 800bc06:	4630      	mov	r0, r6
 800bc08:	f7f4 faba 	bl	8000180 <memchr>
 800bc0c:	b108      	cbz	r0, 800bc12 <_printf_i+0x1e6>
 800bc0e:	1b80      	subs	r0, r0, r6
 800bc10:	6060      	str	r0, [r4, #4]
 800bc12:	6863      	ldr	r3, [r4, #4]
 800bc14:	6123      	str	r3, [r4, #16]
 800bc16:	2300      	movs	r3, #0
 800bc18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc1c:	e7aa      	b.n	800bb74 <_printf_i+0x148>
 800bc1e:	6923      	ldr	r3, [r4, #16]
 800bc20:	4632      	mov	r2, r6
 800bc22:	4649      	mov	r1, r9
 800bc24:	4640      	mov	r0, r8
 800bc26:	47d0      	blx	sl
 800bc28:	3001      	adds	r0, #1
 800bc2a:	d0ad      	beq.n	800bb88 <_printf_i+0x15c>
 800bc2c:	6823      	ldr	r3, [r4, #0]
 800bc2e:	079b      	lsls	r3, r3, #30
 800bc30:	d413      	bmi.n	800bc5a <_printf_i+0x22e>
 800bc32:	68e0      	ldr	r0, [r4, #12]
 800bc34:	9b03      	ldr	r3, [sp, #12]
 800bc36:	4298      	cmp	r0, r3
 800bc38:	bfb8      	it	lt
 800bc3a:	4618      	movlt	r0, r3
 800bc3c:	e7a6      	b.n	800bb8c <_printf_i+0x160>
 800bc3e:	2301      	movs	r3, #1
 800bc40:	4632      	mov	r2, r6
 800bc42:	4649      	mov	r1, r9
 800bc44:	4640      	mov	r0, r8
 800bc46:	47d0      	blx	sl
 800bc48:	3001      	adds	r0, #1
 800bc4a:	d09d      	beq.n	800bb88 <_printf_i+0x15c>
 800bc4c:	3501      	adds	r5, #1
 800bc4e:	68e3      	ldr	r3, [r4, #12]
 800bc50:	9903      	ldr	r1, [sp, #12]
 800bc52:	1a5b      	subs	r3, r3, r1
 800bc54:	42ab      	cmp	r3, r5
 800bc56:	dcf2      	bgt.n	800bc3e <_printf_i+0x212>
 800bc58:	e7eb      	b.n	800bc32 <_printf_i+0x206>
 800bc5a:	2500      	movs	r5, #0
 800bc5c:	f104 0619 	add.w	r6, r4, #25
 800bc60:	e7f5      	b.n	800bc4e <_printf_i+0x222>
 800bc62:	bf00      	nop
 800bc64:	0800c0ad 	.word	0x0800c0ad
 800bc68:	0800c0be 	.word	0x0800c0be

0800bc6c <__sflush_r>:
 800bc6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc74:	0716      	lsls	r6, r2, #28
 800bc76:	4605      	mov	r5, r0
 800bc78:	460c      	mov	r4, r1
 800bc7a:	d454      	bmi.n	800bd26 <__sflush_r+0xba>
 800bc7c:	684b      	ldr	r3, [r1, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	dc02      	bgt.n	800bc88 <__sflush_r+0x1c>
 800bc82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	dd48      	ble.n	800bd1a <__sflush_r+0xae>
 800bc88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc8a:	2e00      	cmp	r6, #0
 800bc8c:	d045      	beq.n	800bd1a <__sflush_r+0xae>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc94:	682f      	ldr	r7, [r5, #0]
 800bc96:	6a21      	ldr	r1, [r4, #32]
 800bc98:	602b      	str	r3, [r5, #0]
 800bc9a:	d030      	beq.n	800bcfe <__sflush_r+0x92>
 800bc9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc9e:	89a3      	ldrh	r3, [r4, #12]
 800bca0:	0759      	lsls	r1, r3, #29
 800bca2:	d505      	bpl.n	800bcb0 <__sflush_r+0x44>
 800bca4:	6863      	ldr	r3, [r4, #4]
 800bca6:	1ad2      	subs	r2, r2, r3
 800bca8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bcaa:	b10b      	cbz	r3, 800bcb0 <__sflush_r+0x44>
 800bcac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bcae:	1ad2      	subs	r2, r2, r3
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcb4:	6a21      	ldr	r1, [r4, #32]
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	47b0      	blx	r6
 800bcba:	1c43      	adds	r3, r0, #1
 800bcbc:	89a3      	ldrh	r3, [r4, #12]
 800bcbe:	d106      	bne.n	800bcce <__sflush_r+0x62>
 800bcc0:	6829      	ldr	r1, [r5, #0]
 800bcc2:	291d      	cmp	r1, #29
 800bcc4:	d82b      	bhi.n	800bd1e <__sflush_r+0xb2>
 800bcc6:	4a2a      	ldr	r2, [pc, #168]	@ (800bd70 <__sflush_r+0x104>)
 800bcc8:	410a      	asrs	r2, r1
 800bcca:	07d6      	lsls	r6, r2, #31
 800bccc:	d427      	bmi.n	800bd1e <__sflush_r+0xb2>
 800bcce:	2200      	movs	r2, #0
 800bcd0:	6062      	str	r2, [r4, #4]
 800bcd2:	04d9      	lsls	r1, r3, #19
 800bcd4:	6922      	ldr	r2, [r4, #16]
 800bcd6:	6022      	str	r2, [r4, #0]
 800bcd8:	d504      	bpl.n	800bce4 <__sflush_r+0x78>
 800bcda:	1c42      	adds	r2, r0, #1
 800bcdc:	d101      	bne.n	800bce2 <__sflush_r+0x76>
 800bcde:	682b      	ldr	r3, [r5, #0]
 800bce0:	b903      	cbnz	r3, 800bce4 <__sflush_r+0x78>
 800bce2:	6560      	str	r0, [r4, #84]	@ 0x54
 800bce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bce6:	602f      	str	r7, [r5, #0]
 800bce8:	b1b9      	cbz	r1, 800bd1a <__sflush_r+0xae>
 800bcea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcee:	4299      	cmp	r1, r3
 800bcf0:	d002      	beq.n	800bcf8 <__sflush_r+0x8c>
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	f7ff fbf2 	bl	800b4dc <_free_r>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcfc:	e00d      	b.n	800bd1a <__sflush_r+0xae>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	4628      	mov	r0, r5
 800bd02:	47b0      	blx	r6
 800bd04:	4602      	mov	r2, r0
 800bd06:	1c50      	adds	r0, r2, #1
 800bd08:	d1c9      	bne.n	800bc9e <__sflush_r+0x32>
 800bd0a:	682b      	ldr	r3, [r5, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d0c6      	beq.n	800bc9e <__sflush_r+0x32>
 800bd10:	2b1d      	cmp	r3, #29
 800bd12:	d001      	beq.n	800bd18 <__sflush_r+0xac>
 800bd14:	2b16      	cmp	r3, #22
 800bd16:	d11e      	bne.n	800bd56 <__sflush_r+0xea>
 800bd18:	602f      	str	r7, [r5, #0]
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	e022      	b.n	800bd64 <__sflush_r+0xf8>
 800bd1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd22:	b21b      	sxth	r3, r3
 800bd24:	e01b      	b.n	800bd5e <__sflush_r+0xf2>
 800bd26:	690f      	ldr	r7, [r1, #16]
 800bd28:	2f00      	cmp	r7, #0
 800bd2a:	d0f6      	beq.n	800bd1a <__sflush_r+0xae>
 800bd2c:	0793      	lsls	r3, r2, #30
 800bd2e:	680e      	ldr	r6, [r1, #0]
 800bd30:	bf08      	it	eq
 800bd32:	694b      	ldreq	r3, [r1, #20]
 800bd34:	600f      	str	r7, [r1, #0]
 800bd36:	bf18      	it	ne
 800bd38:	2300      	movne	r3, #0
 800bd3a:	eba6 0807 	sub.w	r8, r6, r7
 800bd3e:	608b      	str	r3, [r1, #8]
 800bd40:	f1b8 0f00 	cmp.w	r8, #0
 800bd44:	dde9      	ble.n	800bd1a <__sflush_r+0xae>
 800bd46:	6a21      	ldr	r1, [r4, #32]
 800bd48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd4a:	4643      	mov	r3, r8
 800bd4c:	463a      	mov	r2, r7
 800bd4e:	4628      	mov	r0, r5
 800bd50:	47b0      	blx	r6
 800bd52:	2800      	cmp	r0, #0
 800bd54:	dc08      	bgt.n	800bd68 <__sflush_r+0xfc>
 800bd56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd5e:	81a3      	strh	r3, [r4, #12]
 800bd60:	f04f 30ff 	mov.w	r0, #4294967295
 800bd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd68:	4407      	add	r7, r0
 800bd6a:	eba8 0800 	sub.w	r8, r8, r0
 800bd6e:	e7e7      	b.n	800bd40 <__sflush_r+0xd4>
 800bd70:	dfbffffe 	.word	0xdfbffffe

0800bd74 <_fflush_r>:
 800bd74:	b538      	push	{r3, r4, r5, lr}
 800bd76:	690b      	ldr	r3, [r1, #16]
 800bd78:	4605      	mov	r5, r0
 800bd7a:	460c      	mov	r4, r1
 800bd7c:	b913      	cbnz	r3, 800bd84 <_fflush_r+0x10>
 800bd7e:	2500      	movs	r5, #0
 800bd80:	4628      	mov	r0, r5
 800bd82:	bd38      	pop	{r3, r4, r5, pc}
 800bd84:	b118      	cbz	r0, 800bd8e <_fflush_r+0x1a>
 800bd86:	6a03      	ldr	r3, [r0, #32]
 800bd88:	b90b      	cbnz	r3, 800bd8e <_fflush_r+0x1a>
 800bd8a:	f7ff f98b 	bl	800b0a4 <__sinit>
 800bd8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d0f3      	beq.n	800bd7e <_fflush_r+0xa>
 800bd96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd98:	07d0      	lsls	r0, r2, #31
 800bd9a:	d404      	bmi.n	800bda6 <_fflush_r+0x32>
 800bd9c:	0599      	lsls	r1, r3, #22
 800bd9e:	d402      	bmi.n	800bda6 <_fflush_r+0x32>
 800bda0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bda2:	f7ff fb8a 	bl	800b4ba <__retarget_lock_acquire_recursive>
 800bda6:	4628      	mov	r0, r5
 800bda8:	4621      	mov	r1, r4
 800bdaa:	f7ff ff5f 	bl	800bc6c <__sflush_r>
 800bdae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bdb0:	07da      	lsls	r2, r3, #31
 800bdb2:	4605      	mov	r5, r0
 800bdb4:	d4e4      	bmi.n	800bd80 <_fflush_r+0xc>
 800bdb6:	89a3      	ldrh	r3, [r4, #12]
 800bdb8:	059b      	lsls	r3, r3, #22
 800bdba:	d4e1      	bmi.n	800bd80 <_fflush_r+0xc>
 800bdbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdbe:	f7ff fb7d 	bl	800b4bc <__retarget_lock_release_recursive>
 800bdc2:	e7dd      	b.n	800bd80 <_fflush_r+0xc>

0800bdc4 <__swhatbuf_r>:
 800bdc4:	b570      	push	{r4, r5, r6, lr}
 800bdc6:	460c      	mov	r4, r1
 800bdc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdcc:	2900      	cmp	r1, #0
 800bdce:	b096      	sub	sp, #88	@ 0x58
 800bdd0:	4615      	mov	r5, r2
 800bdd2:	461e      	mov	r6, r3
 800bdd4:	da0d      	bge.n	800bdf2 <__swhatbuf_r+0x2e>
 800bdd6:	89a3      	ldrh	r3, [r4, #12]
 800bdd8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bddc:	f04f 0100 	mov.w	r1, #0
 800bde0:	bf14      	ite	ne
 800bde2:	2340      	movne	r3, #64	@ 0x40
 800bde4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bde8:	2000      	movs	r0, #0
 800bdea:	6031      	str	r1, [r6, #0]
 800bdec:	602b      	str	r3, [r5, #0]
 800bdee:	b016      	add	sp, #88	@ 0x58
 800bdf0:	bd70      	pop	{r4, r5, r6, pc}
 800bdf2:	466a      	mov	r2, sp
 800bdf4:	f000 f848 	bl	800be88 <_fstat_r>
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	dbec      	blt.n	800bdd6 <__swhatbuf_r+0x12>
 800bdfc:	9901      	ldr	r1, [sp, #4]
 800bdfe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be06:	4259      	negs	r1, r3
 800be08:	4159      	adcs	r1, r3
 800be0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be0e:	e7eb      	b.n	800bde8 <__swhatbuf_r+0x24>

0800be10 <__smakebuf_r>:
 800be10:	898b      	ldrh	r3, [r1, #12]
 800be12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be14:	079d      	lsls	r5, r3, #30
 800be16:	4606      	mov	r6, r0
 800be18:	460c      	mov	r4, r1
 800be1a:	d507      	bpl.n	800be2c <__smakebuf_r+0x1c>
 800be1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be20:	6023      	str	r3, [r4, #0]
 800be22:	6123      	str	r3, [r4, #16]
 800be24:	2301      	movs	r3, #1
 800be26:	6163      	str	r3, [r4, #20]
 800be28:	b003      	add	sp, #12
 800be2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be2c:	ab01      	add	r3, sp, #4
 800be2e:	466a      	mov	r2, sp
 800be30:	f7ff ffc8 	bl	800bdc4 <__swhatbuf_r>
 800be34:	9f00      	ldr	r7, [sp, #0]
 800be36:	4605      	mov	r5, r0
 800be38:	4639      	mov	r1, r7
 800be3a:	4630      	mov	r0, r6
 800be3c:	f7ff fbba 	bl	800b5b4 <_malloc_r>
 800be40:	b948      	cbnz	r0, 800be56 <__smakebuf_r+0x46>
 800be42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be46:	059a      	lsls	r2, r3, #22
 800be48:	d4ee      	bmi.n	800be28 <__smakebuf_r+0x18>
 800be4a:	f023 0303 	bic.w	r3, r3, #3
 800be4e:	f043 0302 	orr.w	r3, r3, #2
 800be52:	81a3      	strh	r3, [r4, #12]
 800be54:	e7e2      	b.n	800be1c <__smakebuf_r+0xc>
 800be56:	89a3      	ldrh	r3, [r4, #12]
 800be58:	6020      	str	r0, [r4, #0]
 800be5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be5e:	81a3      	strh	r3, [r4, #12]
 800be60:	9b01      	ldr	r3, [sp, #4]
 800be62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be66:	b15b      	cbz	r3, 800be80 <__smakebuf_r+0x70>
 800be68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be6c:	4630      	mov	r0, r6
 800be6e:	f000 f81d 	bl	800beac <_isatty_r>
 800be72:	b128      	cbz	r0, 800be80 <__smakebuf_r+0x70>
 800be74:	89a3      	ldrh	r3, [r4, #12]
 800be76:	f023 0303 	bic.w	r3, r3, #3
 800be7a:	f043 0301 	orr.w	r3, r3, #1
 800be7e:	81a3      	strh	r3, [r4, #12]
 800be80:	89a3      	ldrh	r3, [r4, #12]
 800be82:	431d      	orrs	r5, r3
 800be84:	81a5      	strh	r5, [r4, #12]
 800be86:	e7cf      	b.n	800be28 <__smakebuf_r+0x18>

0800be88 <_fstat_r>:
 800be88:	b538      	push	{r3, r4, r5, lr}
 800be8a:	4d07      	ldr	r5, [pc, #28]	@ (800bea8 <_fstat_r+0x20>)
 800be8c:	2300      	movs	r3, #0
 800be8e:	4604      	mov	r4, r0
 800be90:	4608      	mov	r0, r1
 800be92:	4611      	mov	r1, r2
 800be94:	602b      	str	r3, [r5, #0]
 800be96:	f7f5 f80e 	bl	8000eb6 <_fstat>
 800be9a:	1c43      	adds	r3, r0, #1
 800be9c:	d102      	bne.n	800bea4 <_fstat_r+0x1c>
 800be9e:	682b      	ldr	r3, [r5, #0]
 800bea0:	b103      	cbz	r3, 800bea4 <_fstat_r+0x1c>
 800bea2:	6023      	str	r3, [r4, #0]
 800bea4:	bd38      	pop	{r3, r4, r5, pc}
 800bea6:	bf00      	nop
 800bea8:	200007d0 	.word	0x200007d0

0800beac <_isatty_r>:
 800beac:	b538      	push	{r3, r4, r5, lr}
 800beae:	4d06      	ldr	r5, [pc, #24]	@ (800bec8 <_isatty_r+0x1c>)
 800beb0:	2300      	movs	r3, #0
 800beb2:	4604      	mov	r4, r0
 800beb4:	4608      	mov	r0, r1
 800beb6:	602b      	str	r3, [r5, #0]
 800beb8:	f7f5 f80d 	bl	8000ed6 <_isatty>
 800bebc:	1c43      	adds	r3, r0, #1
 800bebe:	d102      	bne.n	800bec6 <_isatty_r+0x1a>
 800bec0:	682b      	ldr	r3, [r5, #0]
 800bec2:	b103      	cbz	r3, 800bec6 <_isatty_r+0x1a>
 800bec4:	6023      	str	r3, [r4, #0]
 800bec6:	bd38      	pop	{r3, r4, r5, pc}
 800bec8:	200007d0 	.word	0x200007d0

0800becc <_sbrk_r>:
 800becc:	b538      	push	{r3, r4, r5, lr}
 800bece:	4d06      	ldr	r5, [pc, #24]	@ (800bee8 <_sbrk_r+0x1c>)
 800bed0:	2300      	movs	r3, #0
 800bed2:	4604      	mov	r4, r0
 800bed4:	4608      	mov	r0, r1
 800bed6:	602b      	str	r3, [r5, #0]
 800bed8:	f7f5 f816 	bl	8000f08 <_sbrk>
 800bedc:	1c43      	adds	r3, r0, #1
 800bede:	d102      	bne.n	800bee6 <_sbrk_r+0x1a>
 800bee0:	682b      	ldr	r3, [r5, #0]
 800bee2:	b103      	cbz	r3, 800bee6 <_sbrk_r+0x1a>
 800bee4:	6023      	str	r3, [r4, #0]
 800bee6:	bd38      	pop	{r3, r4, r5, pc}
 800bee8:	200007d0 	.word	0x200007d0

0800beec <_init>:
 800beec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beee:	bf00      	nop
 800bef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bef2:	bc08      	pop	{r3}
 800bef4:	469e      	mov	lr, r3
 800bef6:	4770      	bx	lr

0800bef8 <_fini>:
 800bef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800befa:	bf00      	nop
 800befc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800befe:	bc08      	pop	{r3}
 800bf00:	469e      	mov	lr, r3
 800bf02:	4770      	bx	lr
